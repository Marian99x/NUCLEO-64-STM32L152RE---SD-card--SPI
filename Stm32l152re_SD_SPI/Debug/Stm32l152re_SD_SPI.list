
Stm32l152re_SD_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000610c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08006248  08006248  00016248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006398  08006398  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08006398  08006398  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006398  08006398  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006398  08006398  00016398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800639c  0800639c  0001639c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080063a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000afc  20000024  080063c4  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b20  080063c4  00020b20  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e52c  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020ee  00000000  00000000  0002e579  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b58  00000000  00000000  00030668  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a50  00000000  00000000  000311c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017190  00000000  00000000  00031c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a8e3  00000000  00000000  00048da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000892ed  00000000  00000000  00053683  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dc970  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e9c  00000000  00000000  000dc9ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000024 	.word	0x20000024
 8000158:	00000000 	.word	0x00000000
 800015c:	08006230 	.word	0x08006230

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000028 	.word	0x20000028
 8000178:	08006230 	.word	0x08006230

0800017c <__aeabi_drsub>:
 800017c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000180:	e002      	b.n	8000188 <__adddf3>
 8000182:	bf00      	nop

08000184 <__aeabi_dsub>:
 8000184:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000188 <__adddf3>:
 8000188:	b530      	push	{r4, r5, lr}
 800018a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800018e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000192:	ea94 0f05 	teq	r4, r5
 8000196:	bf08      	it	eq
 8000198:	ea90 0f02 	teqeq	r0, r2
 800019c:	bf1f      	itttt	ne
 800019e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ae:	f000 80e2 	beq.w	8000376 <__adddf3+0x1ee>
 80001b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ba:	bfb8      	it	lt
 80001bc:	426d      	neglt	r5, r5
 80001be:	dd0c      	ble.n	80001da <__adddf3+0x52>
 80001c0:	442c      	add	r4, r5
 80001c2:	ea80 0202 	eor.w	r2, r0, r2
 80001c6:	ea81 0303 	eor.w	r3, r1, r3
 80001ca:	ea82 0000 	eor.w	r0, r2, r0
 80001ce:	ea83 0101 	eor.w	r1, r3, r1
 80001d2:	ea80 0202 	eor.w	r2, r0, r2
 80001d6:	ea81 0303 	eor.w	r3, r1, r3
 80001da:	2d36      	cmp	r5, #54	; 0x36
 80001dc:	bf88      	it	hi
 80001de:	bd30      	pophi	{r4, r5, pc}
 80001e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f0:	d002      	beq.n	80001f8 <__adddf3+0x70>
 80001f2:	4240      	negs	r0, r0
 80001f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000200:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x84>
 8000206:	4252      	negs	r2, r2
 8000208:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800020c:	ea94 0f05 	teq	r4, r5
 8000210:	f000 80a7 	beq.w	8000362 <__adddf3+0x1da>
 8000214:	f1a4 0401 	sub.w	r4, r4, #1
 8000218:	f1d5 0e20 	rsbs	lr, r5, #32
 800021c:	db0d      	blt.n	800023a <__adddf3+0xb2>
 800021e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000222:	fa22 f205 	lsr.w	r2, r2, r5
 8000226:	1880      	adds	r0, r0, r2
 8000228:	f141 0100 	adc.w	r1, r1, #0
 800022c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000230:	1880      	adds	r0, r0, r2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	4159      	adcs	r1, r3
 8000238:	e00e      	b.n	8000258 <__adddf3+0xd0>
 800023a:	f1a5 0520 	sub.w	r5, r5, #32
 800023e:	f10e 0e20 	add.w	lr, lr, #32
 8000242:	2a01      	cmp	r2, #1
 8000244:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000248:	bf28      	it	cs
 800024a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800024e:	fa43 f305 	asr.w	r3, r3, r5
 8000252:	18c0      	adds	r0, r0, r3
 8000254:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000258:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800025c:	d507      	bpl.n	800026e <__adddf3+0xe6>
 800025e:	f04f 0e00 	mov.w	lr, #0
 8000262:	f1dc 0c00 	rsbs	ip, ip, #0
 8000266:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026a:	eb6e 0101 	sbc.w	r1, lr, r1
 800026e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000272:	d31b      	bcc.n	80002ac <__adddf3+0x124>
 8000274:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000278:	d30c      	bcc.n	8000294 <__adddf3+0x10c>
 800027a:	0849      	lsrs	r1, r1, #1
 800027c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000280:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000284:	f104 0401 	add.w	r4, r4, #1
 8000288:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800028c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000290:	f080 809a 	bcs.w	80003c8 <__adddf3+0x240>
 8000294:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000298:	bf08      	it	eq
 800029a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800029e:	f150 0000 	adcs.w	r0, r0, #0
 80002a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002a6:	ea41 0105 	orr.w	r1, r1, r5
 80002aa:	bd30      	pop	{r4, r5, pc}
 80002ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b0:	4140      	adcs	r0, r0
 80002b2:	eb41 0101 	adc.w	r1, r1, r1
 80002b6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ba:	f1a4 0401 	sub.w	r4, r4, #1
 80002be:	d1e9      	bne.n	8000294 <__adddf3+0x10c>
 80002c0:	f091 0f00 	teq	r1, #0
 80002c4:	bf04      	itt	eq
 80002c6:	4601      	moveq	r1, r0
 80002c8:	2000      	moveq	r0, #0
 80002ca:	fab1 f381 	clz	r3, r1
 80002ce:	bf08      	it	eq
 80002d0:	3320      	addeq	r3, #32
 80002d2:	f1a3 030b 	sub.w	r3, r3, #11
 80002d6:	f1b3 0220 	subs.w	r2, r3, #32
 80002da:	da0c      	bge.n	80002f6 <__adddf3+0x16e>
 80002dc:	320c      	adds	r2, #12
 80002de:	dd08      	ble.n	80002f2 <__adddf3+0x16a>
 80002e0:	f102 0c14 	add.w	ip, r2, #20
 80002e4:	f1c2 020c 	rsb	r2, r2, #12
 80002e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002ec:	fa21 f102 	lsr.w	r1, r1, r2
 80002f0:	e00c      	b.n	800030c <__adddf3+0x184>
 80002f2:	f102 0214 	add.w	r2, r2, #20
 80002f6:	bfd8      	it	le
 80002f8:	f1c2 0c20 	rsble	ip, r2, #32
 80002fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000300:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000304:	bfdc      	itt	le
 8000306:	ea41 010c 	orrle.w	r1, r1, ip
 800030a:	4090      	lslle	r0, r2
 800030c:	1ae4      	subs	r4, r4, r3
 800030e:	bfa2      	ittt	ge
 8000310:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000314:	4329      	orrge	r1, r5
 8000316:	bd30      	popge	{r4, r5, pc}
 8000318:	ea6f 0404 	mvn.w	r4, r4
 800031c:	3c1f      	subs	r4, #31
 800031e:	da1c      	bge.n	800035a <__adddf3+0x1d2>
 8000320:	340c      	adds	r4, #12
 8000322:	dc0e      	bgt.n	8000342 <__adddf3+0x1ba>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0220 	rsb	r2, r4, #32
 800032c:	fa20 f004 	lsr.w	r0, r0, r4
 8000330:	fa01 f302 	lsl.w	r3, r1, r2
 8000334:	ea40 0003 	orr.w	r0, r0, r3
 8000338:	fa21 f304 	lsr.w	r3, r1, r4
 800033c:	ea45 0103 	orr.w	r1, r5, r3
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f1c4 040c 	rsb	r4, r4, #12
 8000346:	f1c4 0220 	rsb	r2, r4, #32
 800034a:	fa20 f002 	lsr.w	r0, r0, r2
 800034e:	fa01 f304 	lsl.w	r3, r1, r4
 8000352:	ea40 0003 	orr.w	r0, r0, r3
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	fa21 f004 	lsr.w	r0, r1, r4
 800035e:	4629      	mov	r1, r5
 8000360:	bd30      	pop	{r4, r5, pc}
 8000362:	f094 0f00 	teq	r4, #0
 8000366:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036a:	bf06      	itte	eq
 800036c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000370:	3401      	addeq	r4, #1
 8000372:	3d01      	subne	r5, #1
 8000374:	e74e      	b.n	8000214 <__adddf3+0x8c>
 8000376:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037a:	bf18      	it	ne
 800037c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000380:	d029      	beq.n	80003d6 <__adddf3+0x24e>
 8000382:	ea94 0f05 	teq	r4, r5
 8000386:	bf08      	it	eq
 8000388:	ea90 0f02 	teqeq	r0, r2
 800038c:	d005      	beq.n	800039a <__adddf3+0x212>
 800038e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000392:	bf04      	itt	eq
 8000394:	4619      	moveq	r1, r3
 8000396:	4610      	moveq	r0, r2
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	ea91 0f03 	teq	r1, r3
 800039e:	bf1e      	ittt	ne
 80003a0:	2100      	movne	r1, #0
 80003a2:	2000      	movne	r0, #0
 80003a4:	bd30      	popne	{r4, r5, pc}
 80003a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003aa:	d105      	bne.n	80003b8 <__adddf3+0x230>
 80003ac:	0040      	lsls	r0, r0, #1
 80003ae:	4149      	adcs	r1, r1
 80003b0:	bf28      	it	cs
 80003b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003bc:	bf3c      	itt	cc
 80003be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c2:	bd30      	popcc	{r4, r5, pc}
 80003c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003da:	bf1a      	itte	ne
 80003dc:	4619      	movne	r1, r3
 80003de:	4610      	movne	r0, r2
 80003e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e4:	bf1c      	itt	ne
 80003e6:	460b      	movne	r3, r1
 80003e8:	4602      	movne	r2, r0
 80003ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ee:	bf06      	itte	eq
 80003f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f4:	ea91 0f03 	teqeq	r1, r3
 80003f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	bf00      	nop

08000400 <__aeabi_ui2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f04f 0500 	mov.w	r5, #0
 8000418:	f04f 0100 	mov.w	r1, #0
 800041c:	e750      	b.n	80002c0 <__adddf3+0x138>
 800041e:	bf00      	nop

08000420 <__aeabi_i2d>:
 8000420:	f090 0f00 	teq	r0, #0
 8000424:	bf04      	itt	eq
 8000426:	2100      	moveq	r1, #0
 8000428:	4770      	bxeq	lr
 800042a:	b530      	push	{r4, r5, lr}
 800042c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000430:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000434:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000438:	bf48      	it	mi
 800043a:	4240      	negmi	r0, r0
 800043c:	f04f 0100 	mov.w	r1, #0
 8000440:	e73e      	b.n	80002c0 <__adddf3+0x138>
 8000442:	bf00      	nop

08000444 <__aeabi_f2d>:
 8000444:	0042      	lsls	r2, r0, #1
 8000446:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044a:	ea4f 0131 	mov.w	r1, r1, rrx
 800044e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000452:	bf1f      	itttt	ne
 8000454:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000458:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800045c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000460:	4770      	bxne	lr
 8000462:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000466:	bf08      	it	eq
 8000468:	4770      	bxeq	lr
 800046a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800046e:	bf04      	itt	eq
 8000470:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 7460 	mov.w	r4, #896	; 0x380
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000484:	e71c      	b.n	80002c0 <__adddf3+0x138>
 8000486:	bf00      	nop

08000488 <__aeabi_ul2d>:
 8000488:	ea50 0201 	orrs.w	r2, r0, r1
 800048c:	bf08      	it	eq
 800048e:	4770      	bxeq	lr
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	f04f 0500 	mov.w	r5, #0
 8000496:	e00a      	b.n	80004ae <__aeabi_l2d+0x16>

08000498 <__aeabi_l2d>:
 8000498:	ea50 0201 	orrs.w	r2, r0, r1
 800049c:	bf08      	it	eq
 800049e:	4770      	bxeq	lr
 80004a0:	b530      	push	{r4, r5, lr}
 80004a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004a6:	d502      	bpl.n	80004ae <__aeabi_l2d+0x16>
 80004a8:	4240      	negs	r0, r0
 80004aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ba:	f43f aed8 	beq.w	800026e <__adddf3+0xe6>
 80004be:	f04f 0203 	mov.w	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ce:	bf18      	it	ne
 80004d0:	3203      	addne	r2, #3
 80004d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004d6:	f1c2 0320 	rsb	r3, r2, #32
 80004da:	fa00 fc03 	lsl.w	ip, r0, r3
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004e6:	ea40 000e 	orr.w	r0, r0, lr
 80004ea:	fa21 f102 	lsr.w	r1, r1, r2
 80004ee:	4414      	add	r4, r2
 80004f0:	e6bd      	b.n	800026e <__adddf3+0xe6>
 80004f2:	bf00      	nop

080004f4 <__aeabi_dmul>:
 80004f4:	b570      	push	{r4, r5, r6, lr}
 80004f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000502:	bf1d      	ittte	ne
 8000504:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000508:	ea94 0f0c 	teqne	r4, ip
 800050c:	ea95 0f0c 	teqne	r5, ip
 8000510:	f000 f8de 	bleq	80006d0 <__aeabi_dmul+0x1dc>
 8000514:	442c      	add	r4, r5
 8000516:	ea81 0603 	eor.w	r6, r1, r3
 800051a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800051e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000522:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000526:	bf18      	it	ne
 8000528:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800052c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000530:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000534:	d038      	beq.n	80005a8 <__aeabi_dmul+0xb4>
 8000536:	fba0 ce02 	umull	ip, lr, r0, r2
 800053a:	f04f 0500 	mov.w	r5, #0
 800053e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000542:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000546:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054a:	f04f 0600 	mov.w	r6, #0
 800054e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000552:	f09c 0f00 	teq	ip, #0
 8000556:	bf18      	it	ne
 8000558:	f04e 0e01 	orrne.w	lr, lr, #1
 800055c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000560:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000564:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000568:	d204      	bcs.n	8000574 <__aeabi_dmul+0x80>
 800056a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800056e:	416d      	adcs	r5, r5
 8000570:	eb46 0606 	adc.w	r6, r6, r6
 8000574:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000578:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800057c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000580:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000584:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000588:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800058c:	bf88      	it	hi
 800058e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000592:	d81e      	bhi.n	80005d2 <__aeabi_dmul+0xde>
 8000594:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000598:	bf08      	it	eq
 800059a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800059e:	f150 0000 	adcs.w	r0, r0, #0
 80005a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005ac:	ea46 0101 	orr.w	r1, r6, r1
 80005b0:	ea40 0002 	orr.w	r0, r0, r2
 80005b4:	ea81 0103 	eor.w	r1, r1, r3
 80005b8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005bc:	bfc2      	ittt	gt
 80005be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005c6:	bd70      	popgt	{r4, r5, r6, pc}
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f04f 0e00 	mov.w	lr, #0
 80005d0:	3c01      	subs	r4, #1
 80005d2:	f300 80ab 	bgt.w	800072c <__aeabi_dmul+0x238>
 80005d6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005da:	bfde      	ittt	le
 80005dc:	2000      	movle	r0, #0
 80005de:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e2:	bd70      	pople	{r4, r5, r6, pc}
 80005e4:	f1c4 0400 	rsb	r4, r4, #0
 80005e8:	3c20      	subs	r4, #32
 80005ea:	da35      	bge.n	8000658 <__aeabi_dmul+0x164>
 80005ec:	340c      	adds	r4, #12
 80005ee:	dc1b      	bgt.n	8000628 <__aeabi_dmul+0x134>
 80005f0:	f104 0414 	add.w	r4, r4, #20
 80005f4:	f1c4 0520 	rsb	r5, r4, #32
 80005f8:	fa00 f305 	lsl.w	r3, r0, r5
 80005fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000600:	fa01 f205 	lsl.w	r2, r1, r5
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800060c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	fa21 f604 	lsr.w	r6, r1, r4
 8000618:	eb42 0106 	adc.w	r1, r2, r6
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 040c 	rsb	r4, r4, #12
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f304 	lsl.w	r3, r0, r4
 8000634:	fa20 f005 	lsr.w	r0, r0, r5
 8000638:	fa01 f204 	lsl.w	r2, r1, r4
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000648:	f141 0100 	adc.w	r1, r1, #0
 800064c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000650:	bf08      	it	eq
 8000652:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000656:	bd70      	pop	{r4, r5, r6, pc}
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f205 	lsl.w	r2, r0, r5
 8000660:	ea4e 0e02 	orr.w	lr, lr, r2
 8000664:	fa20 f304 	lsr.w	r3, r0, r4
 8000668:	fa01 f205 	lsl.w	r2, r1, r5
 800066c:	ea43 0302 	orr.w	r3, r3, r2
 8000670:	fa21 f004 	lsr.w	r0, r1, r4
 8000674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000678:	fa21 f204 	lsr.w	r2, r1, r4
 800067c:	ea20 0002 	bic.w	r0, r0, r2
 8000680:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000684:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000688:	bf08      	it	eq
 800068a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f094 0f00 	teq	r4, #0
 8000694:	d10f      	bne.n	80006b6 <__aeabi_dmul+0x1c2>
 8000696:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069a:	0040      	lsls	r0, r0, #1
 800069c:	eb41 0101 	adc.w	r1, r1, r1
 80006a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a4:	bf08      	it	eq
 80006a6:	3c01      	subeq	r4, #1
 80006a8:	d0f7      	beq.n	800069a <__aeabi_dmul+0x1a6>
 80006aa:	ea41 0106 	orr.w	r1, r1, r6
 80006ae:	f095 0f00 	teq	r5, #0
 80006b2:	bf18      	it	ne
 80006b4:	4770      	bxne	lr
 80006b6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ba:	0052      	lsls	r2, r2, #1
 80006bc:	eb43 0303 	adc.w	r3, r3, r3
 80006c0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c4:	bf08      	it	eq
 80006c6:	3d01      	subeq	r5, #1
 80006c8:	d0f7      	beq.n	80006ba <__aeabi_dmul+0x1c6>
 80006ca:	ea43 0306 	orr.w	r3, r3, r6
 80006ce:	4770      	bx	lr
 80006d0:	ea94 0f0c 	teq	r4, ip
 80006d4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d8:	bf18      	it	ne
 80006da:	ea95 0f0c 	teqne	r5, ip
 80006de:	d00c      	beq.n	80006fa <__aeabi_dmul+0x206>
 80006e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e4:	bf18      	it	ne
 80006e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ea:	d1d1      	bne.n	8000690 <__aeabi_dmul+0x19c>
 80006ec:	ea81 0103 	eor.w	r1, r1, r3
 80006f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f4:	f04f 0000 	mov.w	r0, #0
 80006f8:	bd70      	pop	{r4, r5, r6, pc}
 80006fa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fe:	bf06      	itte	eq
 8000700:	4610      	moveq	r0, r2
 8000702:	4619      	moveq	r1, r3
 8000704:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000708:	d019      	beq.n	800073e <__aeabi_dmul+0x24a>
 800070a:	ea94 0f0c 	teq	r4, ip
 800070e:	d102      	bne.n	8000716 <__aeabi_dmul+0x222>
 8000710:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000714:	d113      	bne.n	800073e <__aeabi_dmul+0x24a>
 8000716:	ea95 0f0c 	teq	r5, ip
 800071a:	d105      	bne.n	8000728 <__aeabi_dmul+0x234>
 800071c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000720:	bf1c      	itt	ne
 8000722:	4610      	movne	r0, r2
 8000724:	4619      	movne	r1, r3
 8000726:	d10a      	bne.n	800073e <__aeabi_dmul+0x24a>
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000730:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000742:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000746:	bd70      	pop	{r4, r5, r6, pc}

08000748 <__aeabi_ddiv>:
 8000748:	b570      	push	{r4, r5, r6, lr}
 800074a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800074e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000752:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000756:	bf1d      	ittte	ne
 8000758:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800075c:	ea94 0f0c 	teqne	r4, ip
 8000760:	ea95 0f0c 	teqne	r5, ip
 8000764:	f000 f8a7 	bleq	80008b6 <__aeabi_ddiv+0x16e>
 8000768:	eba4 0405 	sub.w	r4, r4, r5
 800076c:	ea81 0e03 	eor.w	lr, r1, r3
 8000770:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000774:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000778:	f000 8088 	beq.w	800088c <__aeabi_ddiv+0x144>
 800077c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000780:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000784:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000788:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800078c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000790:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000794:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000798:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800079c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a0:	429d      	cmp	r5, r3
 80007a2:	bf08      	it	eq
 80007a4:	4296      	cmpeq	r6, r2
 80007a6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007aa:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ae:	d202      	bcs.n	80007b6 <__aeabi_ddiv+0x6e>
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	1ab6      	subs	r6, r6, r2
 80007b8:	eb65 0503 	sbc.w	r5, r5, r3
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007c6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	ebb6 0e02 	subs.w	lr, r6, r2
 8000816:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081a:	bf22      	ittt	cs
 800081c:	1ab6      	subcs	r6, r6, r2
 800081e:	4675      	movcs	r5, lr
 8000820:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000824:	ea55 0e06 	orrs.w	lr, r5, r6
 8000828:	d018      	beq.n	800085c <__aeabi_ddiv+0x114>
 800082a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800082e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000832:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000836:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800083e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000842:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000846:	d1c0      	bne.n	80007ca <__aeabi_ddiv+0x82>
 8000848:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800084c:	d10b      	bne.n	8000866 <__aeabi_ddiv+0x11e>
 800084e:	ea41 0100 	orr.w	r1, r1, r0
 8000852:	f04f 0000 	mov.w	r0, #0
 8000856:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085a:	e7b6      	b.n	80007ca <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	bf04      	itt	eq
 8000862:	4301      	orreq	r1, r0
 8000864:	2000      	moveq	r0, #0
 8000866:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086a:	bf88      	it	hi
 800086c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000870:	f63f aeaf 	bhi.w	80005d2 <__aeabi_dmul+0xde>
 8000874:	ebb5 0c03 	subs.w	ip, r5, r3
 8000878:	bf04      	itt	eq
 800087a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800087e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000882:	f150 0000 	adcs.w	r0, r0, #0
 8000886:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088a:	bd70      	pop	{r4, r5, r6, pc}
 800088c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000890:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000894:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000898:	bfc2      	ittt	gt
 800089a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800089e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a2:	bd70      	popgt	{r4, r5, r6, pc}
 80008a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a8:	f04f 0e00 	mov.w	lr, #0
 80008ac:	3c01      	subs	r4, #1
 80008ae:	e690      	b.n	80005d2 <__aeabi_dmul+0xde>
 80008b0:	ea45 0e06 	orr.w	lr, r5, r6
 80008b4:	e68d      	b.n	80005d2 <__aeabi_dmul+0xde>
 80008b6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ba:	ea94 0f0c 	teq	r4, ip
 80008be:	bf08      	it	eq
 80008c0:	ea95 0f0c 	teqeq	r5, ip
 80008c4:	f43f af3b 	beq.w	800073e <__aeabi_dmul+0x24a>
 80008c8:	ea94 0f0c 	teq	r4, ip
 80008cc:	d10a      	bne.n	80008e4 <__aeabi_ddiv+0x19c>
 80008ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d2:	f47f af34 	bne.w	800073e <__aeabi_dmul+0x24a>
 80008d6:	ea95 0f0c 	teq	r5, ip
 80008da:	f47f af25 	bne.w	8000728 <__aeabi_dmul+0x234>
 80008de:	4610      	mov	r0, r2
 80008e0:	4619      	mov	r1, r3
 80008e2:	e72c      	b.n	800073e <__aeabi_dmul+0x24a>
 80008e4:	ea95 0f0c 	teq	r5, ip
 80008e8:	d106      	bne.n	80008f8 <__aeabi_ddiv+0x1b0>
 80008ea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ee:	f43f aefd 	beq.w	80006ec <__aeabi_dmul+0x1f8>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e722      	b.n	800073e <__aeabi_dmul+0x24a>
 80008f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008fc:	bf18      	it	ne
 80008fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000902:	f47f aec5 	bne.w	8000690 <__aeabi_dmul+0x19c>
 8000906:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090a:	f47f af0d 	bne.w	8000728 <__aeabi_dmul+0x234>
 800090e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000912:	f47f aeeb 	bne.w	80006ec <__aeabi_dmul+0x1f8>
 8000916:	e712      	b.n	800073e <__aeabi_dmul+0x24a>

08000918 <__aeabi_d2uiz>:
 8000918:	004a      	lsls	r2, r1, #1
 800091a:	d211      	bcs.n	8000940 <__aeabi_d2uiz+0x28>
 800091c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000920:	d211      	bcs.n	8000946 <__aeabi_d2uiz+0x2e>
 8000922:	d50d      	bpl.n	8000940 <__aeabi_d2uiz+0x28>
 8000924:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000928:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800092c:	d40e      	bmi.n	800094c <__aeabi_d2uiz+0x34>
 800092e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000932:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000936:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800093a:	fa23 f002 	lsr.w	r0, r3, r2
 800093e:	4770      	bx	lr
 8000940:	f04f 0000 	mov.w	r0, #0
 8000944:	4770      	bx	lr
 8000946:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800094a:	d102      	bne.n	8000952 <__aeabi_d2uiz+0x3a>
 800094c:	f04f 30ff 	mov.w	r0, #4294967295
 8000950:	4770      	bx	lr
 8000952:	f04f 0000 	mov.w	r0, #0
 8000956:	4770      	bx	lr

08000958 <SELECT>:
static uint8_t CardType;                                /* SD 타입 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0;                           /* Power 상태 Flag */

/* SPI Chip Select */
static void SELECT(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	2140      	movs	r1, #64	; 0x40
 8000960:	4802      	ldr	r0, [pc, #8]	; (800096c <SELECT+0x14>)
 8000962:	f001 fb55 	bl	8002010 <HAL_GPIO_WritePin>
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40020400 	.word	0x40020400

08000970 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000974:	2201      	movs	r2, #1
 8000976:	2140      	movs	r1, #64	; 0x40
 8000978:	4802      	ldr	r0, [pc, #8]	; (8000984 <DESELECT+0x14>)
 800097a:	f001 fb49 	bl	8002010 <HAL_GPIO_WritePin>
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40020400 	.word	0x40020400

08000988 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000992:	bf00      	nop
 8000994:	4807      	ldr	r0, [pc, #28]	; (80009b4 <SPI_TxByte+0x2c>)
 8000996:	f002 fbdb 	bl	8003150 <HAL_SPI_GetState>
 800099a:	4603      	mov	r3, r0
 800099c:	2b01      	cmp	r3, #1
 800099e:	d1f9      	bne.n	8000994 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80009a0:	1df9      	adds	r1, r7, #7
 80009a2:	2364      	movs	r3, #100	; 0x64
 80009a4:	2201      	movs	r2, #1
 80009a6:	4803      	ldr	r0, [pc, #12]	; (80009b4 <SPI_TxByte+0x2c>)
 80009a8:	f002 f8fc 	bl	8002ba4 <HAL_SPI_Transmit>
}
 80009ac:	bf00      	nop
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	200003e8 	.word	0x200003e8

080009b8 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80009be:	23ff      	movs	r3, #255	; 0xff
 80009c0:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80009c6:	bf00      	nop
 80009c8:	4809      	ldr	r0, [pc, #36]	; (80009f0 <SPI_RxByte+0x38>)
 80009ca:	f002 fbc1 	bl	8003150 <HAL_SPI_GetState>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d1f9      	bne.n	80009c8 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80009d4:	1dba      	adds	r2, r7, #6
 80009d6:	1df9      	adds	r1, r7, #7
 80009d8:	2364      	movs	r3, #100	; 0x64
 80009da:	9300      	str	r3, [sp, #0]
 80009dc:	2301      	movs	r3, #1
 80009de:	4804      	ldr	r0, [pc, #16]	; (80009f0 <SPI_RxByte+0x38>)
 80009e0:	f002 fa14 	bl	8002e0c <HAL_SPI_TransmitReceive>
  
  return data;
 80009e4:	79bb      	ldrb	r3, [r7, #6]
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200003e8 	.word	0x200003e8

080009f4 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80009fc:	f7ff ffdc 	bl	80009b8 <SPI_RxByte>
 8000a00:	4603      	mov	r3, r0
 8000a02:	461a      	mov	r2, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	701a      	strb	r2, [r3, #0]
}
 8000a08:	bf00      	nop
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void) 
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <SD_ReadyWait+0x34>)
 8000a18:	2232      	movs	r2, #50	; 0x32
 8000a1a:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000a1c:	f7ff ffcc 	bl	80009b8 <SPI_RxByte>
  
  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000a20:	f7ff ffca 	bl	80009b8 <SPI_RxByte>
 8000a24:	4603      	mov	r3, r0
 8000a26:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	2bff      	cmp	r3, #255	; 0xff
 8000a2c:	d004      	beq.n	8000a38 <SD_ReadyWait+0x28>
 8000a2e:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <SD_ReadyWait+0x34>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d1f3      	bne.n	8000a20 <SD_ReadyWait+0x10>
  
  return res;
 8000a38:	79fb      	ldrb	r3, [r7, #7]
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000078 	.word	0x20000078

08000a48 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void) 
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000a4e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000a52:	617b      	str	r3, [r7, #20]
  
  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8000a54:	f7ff ff8c 	bl	8000970 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8000a58:	2300      	movs	r3, #0
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	e005      	b.n	8000a6a <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000a5e:	20ff      	movs	r0, #255	; 0xff
 8000a60:	f7ff ff92 	bl	8000988 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	3301      	adds	r3, #1
 8000a68:	613b      	str	r3, [r7, #16]
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	2b09      	cmp	r3, #9
 8000a6e:	ddf6      	ble.n	8000a5e <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8000a70:	f7ff ff72 	bl	8000958 <SELECT>
  
  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8000a74:	2340      	movs	r3, #64	; 0x40
 8000a76:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000a88:	2395      	movs	r3, #149	; 0x95
 8000a8a:	727b      	strb	r3, [r7, #9]
  
  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	e009      	b.n	8000aa6 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000a92:	1d3a      	adds	r2, r7, #4
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	4413      	add	r3, r2
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff ff74 	bl	8000988 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	2b05      	cmp	r3, #5
 8000aaa:	ddf2      	ble.n	8000a92 <SD_PowerOn+0x4a>
  }
  
  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8000aac:	e002      	b.n	8000ab4 <SD_PowerOn+0x6c>
  {
    Count--;
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	3b01      	subs	r3, #1
 8000ab2:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000ab4:	f7ff ff80 	bl	80009b8 <SPI_RxByte>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d002      	beq.n	8000ac4 <SD_PowerOn+0x7c>
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d1f4      	bne.n	8000aae <SD_PowerOn+0x66>
  }
  
  DESELECT();
 8000ac4:	f7ff ff54 	bl	8000970 <DESELECT>
  SPI_TxByte(0XFF);
 8000ac8:	20ff      	movs	r0, #255	; 0xff
 8000aca:	f7ff ff5d 	bl	8000988 <SPI_TxByte>
  
  PowerFlag = 1;
 8000ace:	4b03      	ldr	r3, [pc, #12]	; (8000adc <SD_PowerOn+0x94>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	701a      	strb	r2, [r3, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	3718      	adds	r7, #24
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000041 	.word	0x20000041

08000ae0 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000ae4:	4b03      	ldr	r3, [pc, #12]	; (8000af4 <SD_PowerOff+0x14>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	701a      	strb	r2, [r3, #0]
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bc80      	pop	{r7}
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	20000041 	.word	0x20000041

08000af8 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000afc:	4b02      	ldr	r3, [pc, #8]	; (8000b08 <SD_CheckPower+0x10>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr
 8000b08:	20000041 	.word	0x20000041

08000b0c <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8000b16:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <SD_RxDataBlock+0x68>)
 8000b18:	220a      	movs	r2, #10
 8000b1a:	701a      	strb	r2, [r3, #0]
  
  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8000b1c:	f7ff ff4c 	bl	80009b8 <SPI_RxByte>
 8000b20:	4603      	mov	r3, r0
 8000b22:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000b24:	7bfb      	ldrb	r3, [r7, #15]
 8000b26:	2bff      	cmp	r3, #255	; 0xff
 8000b28:	d104      	bne.n	8000b34 <SD_RxDataBlock+0x28>
 8000b2a:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <SD_RxDataBlock+0x68>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d1f3      	bne.n	8000b1c <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000b34:	7bfb      	ldrb	r3, [r7, #15]
 8000b36:	2bfe      	cmp	r3, #254	; 0xfe
 8000b38:	d001      	beq.n	8000b3e <SD_RxDataBlock+0x32>
    return FALSE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e016      	b.n	8000b6c <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	1c5a      	adds	r2, r3, #1
 8000b42:	607a      	str	r2, [r7, #4]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff ff55 	bl	80009f4 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	1c5a      	adds	r2, r3, #1
 8000b4e:	607a      	str	r2, [r7, #4]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff ff4f 	bl	80009f4 <SPI_RxBytePtr>
  } while(btr -= 2);
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	3b02      	subs	r3, #2
 8000b5a:	603b      	str	r3, [r7, #0]
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d1ed      	bne.n	8000b3e <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 8000b62:	f7ff ff29 	bl	80009b8 <SPI_RxByte>
  SPI_RxByte();
 8000b66:	f7ff ff27 	bl	80009b8 <SPI_RxByte>
  
  return TRUE;
 8000b6a:	2301      	movs	r3, #1
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3710      	adds	r7, #16
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000079 	.word	0x20000079

08000b78 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	460b      	mov	r3, r1
 8000b82:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000b88:	f7ff ff42 	bl	8000a10 <SD_ReadyWait>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2bff      	cmp	r3, #255	; 0xff
 8000b90:	d001      	beq.n	8000b96 <SD_TxDataBlock+0x1e>
    return FALSE;
 8000b92:	2300      	movs	r3, #0
 8000b94:	e040      	b.n	8000c18 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 8000b96:	78fb      	ldrb	r3, [r7, #3]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fef5 	bl	8000988 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 8000b9e:	78fb      	ldrb	r3, [r7, #3]
 8000ba0:	2bfd      	cmp	r3, #253	; 0xfd
 8000ba2:	d031      	beq.n	8000c08 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	1c5a      	adds	r2, r3, #1
 8000bac:	607a      	str	r2, [r7, #4]
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff fee9 	bl	8000988 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	1c5a      	adds	r2, r3, #1
 8000bba:	607a      	str	r2, [r7, #4]
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff fee2 	bl	8000988 <SPI_TxByte>
    } while (--wc);
 8000bc4:	7bbb      	ldrb	r3, [r7, #14]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	73bb      	strb	r3, [r7, #14]
 8000bca:	7bbb      	ldrb	r3, [r7, #14]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d1eb      	bne.n	8000ba8 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 8000bd0:	f7ff fef2 	bl	80009b8 <SPI_RxByte>
    SPI_RxByte();
 8000bd4:	f7ff fef0 	bl	80009b8 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8000bd8:	e00b      	b.n	8000bf2 <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 8000bda:	f7ff feed 	bl	80009b8 <SPI_RxByte>
 8000bde:	4603      	mov	r3, r0
 8000be0:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 8000be2:	7bfb      	ldrb	r3, [r7, #15]
 8000be4:	f003 031f 	and.w	r3, r3, #31
 8000be8:	2b05      	cmp	r3, #5
 8000bea:	d006      	beq.n	8000bfa <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8000bec:	7b7b      	ldrb	r3, [r7, #13]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 8000bf2:	7b7b      	ldrb	r3, [r7, #13]
 8000bf4:	2b40      	cmp	r3, #64	; 0x40
 8000bf6:	d9f0      	bls.n	8000bda <SD_TxDataBlock+0x62>
 8000bf8:	e000      	b.n	8000bfc <SD_TxDataBlock+0x84>
        break;
 8000bfa:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000bfc:	bf00      	nop
 8000bfe:	f7ff fedb 	bl	80009b8 <SPI_RxByte>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d0fa      	beq.n	8000bfe <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8000c08:	7bfb      	ldrb	r3, [r7, #15]
 8000c0a:	f003 031f 	and.w	r3, r3, #31
 8000c0e:	2b05      	cmp	r3, #5
 8000c10:	d101      	bne.n	8000c16 <SD_TxDataBlock+0x9e>
    return TRUE;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e000      	b.n	8000c18 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8000c16:	2300      	movs	r3, #0
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3710      	adds	r7, #16
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	6039      	str	r1, [r7, #0]
 8000c2a:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000c2c:	f7ff fef0 	bl	8000a10 <SD_ReadyWait>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2bff      	cmp	r3, #255	; 0xff
 8000c34:	d001      	beq.n	8000c3a <SD_SendCmd+0x1a>
    return 0xFF;
 8000c36:	23ff      	movs	r3, #255	; 0xff
 8000c38:	e040      	b.n	8000cbc <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff fea3 	bl	8000988 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	0e1b      	lsrs	r3, r3, #24
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff fe9d 	bl	8000988 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	0c1b      	lsrs	r3, r3, #16
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff fe97 	bl	8000988 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	0a1b      	lsrs	r3, r3, #8
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff fe91 	bl	8000988 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fe8c 	bl	8000988 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8000c70:	2300      	movs	r3, #0
 8000c72:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	2b40      	cmp	r3, #64	; 0x40
 8000c78:	d101      	bne.n	8000c7e <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8000c7a:	2395      	movs	r3, #149	; 0x95
 8000c7c:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	2b48      	cmp	r3, #72	; 0x48
 8000c82:	d101      	bne.n	8000c88 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8000c84:	2387      	movs	r3, #135	; 0x87
 8000c86:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8000c88:	7bfb      	ldrb	r3, [r7, #15]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff fe7c 	bl	8000988 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	2b4c      	cmp	r3, #76	; 0x4c
 8000c94:	d101      	bne.n	8000c9a <SD_SendCmd+0x7a>
    SPI_RxByte();
 8000c96:	f7ff fe8f 	bl	80009b8 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 8000c9a:	230a      	movs	r3, #10
 8000c9c:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8000c9e:	f7ff fe8b 	bl	80009b8 <SPI_RxByte>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000ca6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	da05      	bge.n	8000cba <SD_SendCmd+0x9a>
 8000cae:	7bbb      	ldrb	r3, [r7, #14]
 8000cb0:	3b01      	subs	r3, #1
 8000cb2:	73bb      	strb	r3, [r7, #14]
 8000cb4:	7bbb      	ldrb	r3, [r7, #14]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d1f1      	bne.n	8000c9e <SD_SendCmd+0x7e>
  
  return res;
 8000cba:	7b7b      	ldrb	r3, [r7, #13]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3710      	adds	r7, #16
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000cc4:	b590      	push	{r4, r7, lr}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	e0d5      	b.n	8000e84 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000cd8:	4b6c      	ldr	r3, [pc, #432]	; (8000e8c <SD_disk_initialize+0x1c8>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	f003 0302 	and.w	r3, r3, #2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d003      	beq.n	8000cee <SD_disk_initialize+0x2a>
    return Stat;        
 8000ce6:	4b69      	ldr	r3, [pc, #420]	; (8000e8c <SD_disk_initialize+0x1c8>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	e0ca      	b.n	8000e84 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 8000cee:	f7ff feab 	bl	8000a48 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8000cf2:	f7ff fe31 	bl	8000958 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	2040      	movs	r0, #64	; 0x40
 8000cfe:	f7ff ff8f 	bl	8000c20 <SD_SendCmd>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	f040 80a5 	bne.w	8000e54 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8000d0a:	4b61      	ldr	r3, [pc, #388]	; (8000e90 <SD_disk_initialize+0x1cc>)
 8000d0c:	2264      	movs	r2, #100	; 0x64
 8000d0e:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8000d10:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000d14:	2048      	movs	r0, #72	; 0x48
 8000d16:	f7ff ff83 	bl	8000c20 <SD_SendCmd>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d158      	bne.n	8000dd2 <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000d20:	2300      	movs	r3, #0
 8000d22:	73fb      	strb	r3, [r7, #15]
 8000d24:	e00c      	b.n	8000d40 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8000d26:	7bfc      	ldrb	r4, [r7, #15]
 8000d28:	f7ff fe46 	bl	80009b8 <SPI_RxByte>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	461a      	mov	r2, r3
 8000d30:	f107 0310 	add.w	r3, r7, #16
 8000d34:	4423      	add	r3, r4
 8000d36:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	73fb      	strb	r3, [r7, #15]
 8000d40:	7bfb      	ldrb	r3, [r7, #15]
 8000d42:	2b03      	cmp	r3, #3
 8000d44:	d9ef      	bls.n	8000d26 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8000d46:	7abb      	ldrb	r3, [r7, #10]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	f040 8083 	bne.w	8000e54 <SD_disk_initialize+0x190>
 8000d4e:	7afb      	ldrb	r3, [r7, #11]
 8000d50:	2baa      	cmp	r3, #170	; 0xaa
 8000d52:	d17f      	bne.n	8000e54 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8000d54:	2100      	movs	r1, #0
 8000d56:	2077      	movs	r0, #119	; 0x77
 8000d58:	f7ff ff62 	bl	8000c20 <SD_SendCmd>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d807      	bhi.n	8000d72 <SD_disk_initialize+0xae>
 8000d62:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000d66:	2069      	movs	r0, #105	; 0x69
 8000d68:	f7ff ff5a 	bl	8000c20 <SD_SendCmd>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d005      	beq.n	8000d7e <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8000d72:	4b47      	ldr	r3, [pc, #284]	; (8000e90 <SD_disk_initialize+0x1cc>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d1eb      	bne.n	8000d54 <SD_disk_initialize+0x90>
 8000d7c:	e000      	b.n	8000d80 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8000d7e:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8000d80:	4b43      	ldr	r3, [pc, #268]	; (8000e90 <SD_disk_initialize+0x1cc>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d064      	beq.n	8000e54 <SD_disk_initialize+0x190>
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	207a      	movs	r0, #122	; 0x7a
 8000d8e:	f7ff ff47 	bl	8000c20 <SD_SendCmd>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d15d      	bne.n	8000e54 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000d98:	2300      	movs	r3, #0
 8000d9a:	73fb      	strb	r3, [r7, #15]
 8000d9c:	e00c      	b.n	8000db8 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8000d9e:	7bfc      	ldrb	r4, [r7, #15]
 8000da0:	f7ff fe0a 	bl	80009b8 <SPI_RxByte>
 8000da4:	4603      	mov	r3, r0
 8000da6:	461a      	mov	r2, r3
 8000da8:	f107 0310 	add.w	r3, r7, #16
 8000dac:	4423      	add	r3, r4
 8000dae:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
 8000db4:	3301      	adds	r3, #1
 8000db6:	73fb      	strb	r3, [r7, #15]
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
 8000dba:	2b03      	cmp	r3, #3
 8000dbc:	d9ef      	bls.n	8000d9e <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 8000dbe:	7a3b      	ldrb	r3, [r7, #8]
 8000dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <SD_disk_initialize+0x108>
 8000dc8:	2306      	movs	r3, #6
 8000dca:	e000      	b.n	8000dce <SD_disk_initialize+0x10a>
 8000dcc:	2302      	movs	r3, #2
 8000dce:	73bb      	strb	r3, [r7, #14]
 8000dd0:	e040      	b.n	8000e54 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	2077      	movs	r0, #119	; 0x77
 8000dd6:	f7ff ff23 	bl	8000c20 <SD_SendCmd>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d808      	bhi.n	8000df2 <SD_disk_initialize+0x12e>
 8000de0:	2100      	movs	r1, #0
 8000de2:	2069      	movs	r0, #105	; 0x69
 8000de4:	f7ff ff1c 	bl	8000c20 <SD_SendCmd>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d801      	bhi.n	8000df2 <SD_disk_initialize+0x12e>
 8000dee:	2302      	movs	r3, #2
 8000df0:	e000      	b.n	8000df4 <SD_disk_initialize+0x130>
 8000df2:	2301      	movs	r3, #1
 8000df4:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8000df6:	7bbb      	ldrb	r3, [r7, #14]
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d10e      	bne.n	8000e1a <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	2077      	movs	r0, #119	; 0x77
 8000e00:	f7ff ff0e 	bl	8000c20 <SD_SendCmd>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d80e      	bhi.n	8000e28 <SD_disk_initialize+0x164>
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	2069      	movs	r0, #105	; 0x69
 8000e0e:	f7ff ff07 	bl	8000c20 <SD_SendCmd>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d107      	bne.n	8000e28 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8000e18:	e00d      	b.n	8000e36 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	2041      	movs	r0, #65	; 0x41
 8000e1e:	f7ff feff 	bl	8000c20 <SD_SendCmd>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d005      	beq.n	8000e34 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8000e28:	4b19      	ldr	r3, [pc, #100]	; (8000e90 <SD_disk_initialize+0x1cc>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d1e1      	bne.n	8000df6 <SD_disk_initialize+0x132>
 8000e32:	e000      	b.n	8000e36 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8000e34:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8000e36:	4b16      	ldr	r3, [pc, #88]	; (8000e90 <SD_disk_initialize+0x1cc>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d007      	beq.n	8000e50 <SD_disk_initialize+0x18c>
 8000e40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e44:	2050      	movs	r0, #80	; 0x50
 8000e46:	f7ff feeb 	bl	8000c20 <SD_SendCmd>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 8000e54:	4a0f      	ldr	r2, [pc, #60]	; (8000e94 <SD_disk_initialize+0x1d0>)
 8000e56:	7bbb      	ldrb	r3, [r7, #14]
 8000e58:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 8000e5a:	f7ff fd89 	bl	8000970 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8000e5e:	f7ff fdab 	bl	80009b8 <SPI_RxByte>
  
  if (type) 
 8000e62:	7bbb      	ldrb	r3, [r7, #14]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d008      	beq.n	8000e7a <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <SD_disk_initialize+0x1c8>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	f023 0301 	bic.w	r3, r3, #1
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <SD_disk_initialize+0x1c8>)
 8000e76:	701a      	strb	r2, [r3, #0]
 8000e78:	e001      	b.n	8000e7e <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000e7a:	f7ff fe31 	bl	8000ae0 <SD_PowerOff>
  }
  
  return Stat;
 8000e7e:	4b03      	ldr	r3, [pc, #12]	; (8000e8c <SD_disk_initialize+0x1c8>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	b2db      	uxtb	r3, r3
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd90      	pop	{r4, r7, pc}
 8000e8c:	20000000 	.word	0x20000000
 8000e90:	20000079 	.word	0x20000079
 8000e94:	20000040 	.word	0x20000040

08000e98 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <SD_disk_status+0x14>
    return STA_NOINIT; 
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e002      	b.n	8000eb2 <SD_disk_status+0x1a>
  
  return Stat;
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <SD_disk_status+0x24>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	b2db      	uxtb	r3, r3
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr
 8000ebc:	20000000 	.word	0x20000000

08000ec0 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60b9      	str	r1, [r7, #8]
 8000ec8:	607a      	str	r2, [r7, #4]
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	4603      	mov	r3, r0
 8000ece:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000ed0:	7bfb      	ldrb	r3, [r7, #15]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d102      	bne.n	8000edc <SD_disk_read+0x1c>
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d101      	bne.n	8000ee0 <SD_disk_read+0x20>
    return RES_PARERR;
 8000edc:	2304      	movs	r3, #4
 8000ede:	e051      	b.n	8000f84 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8000ee0:	4b2a      	ldr	r3, [pc, #168]	; (8000f8c <SD_disk_read+0xcc>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	e048      	b.n	8000f84 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8000ef2:	4b27      	ldr	r3, [pc, #156]	; (8000f90 <SD_disk_read+0xd0>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	f003 0304 	and.w	r3, r3, #4
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d102      	bne.n	8000f04 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	025b      	lsls	r3, r3, #9
 8000f02:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8000f04:	f7ff fd28 	bl	8000958 <SELECT>
  
  if (count == 1) 
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d111      	bne.n	8000f32 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8000f0e:	6879      	ldr	r1, [r7, #4]
 8000f10:	2051      	movs	r0, #81	; 0x51
 8000f12:	f7ff fe85 	bl	8000c20 <SD_SendCmd>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d129      	bne.n	8000f70 <SD_disk_read+0xb0>
 8000f1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f20:	68b8      	ldr	r0, [r7, #8]
 8000f22:	f7ff fdf3 	bl	8000b0c <SD_RxDataBlock>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d021      	beq.n	8000f70 <SD_disk_read+0xb0>
      count = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	603b      	str	r3, [r7, #0]
 8000f30:	e01e      	b.n	8000f70 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	2052      	movs	r0, #82	; 0x52
 8000f36:	f7ff fe73 	bl	8000c20 <SD_SendCmd>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d117      	bne.n	8000f70 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8000f40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f44:	68b8      	ldr	r0, [r7, #8]
 8000f46:	f7ff fde1 	bl	8000b0c <SD_RxDataBlock>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d00a      	beq.n	8000f66 <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000f56:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	603b      	str	r3, [r7, #0]
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d1ed      	bne.n	8000f40 <SD_disk_read+0x80>
 8000f64:	e000      	b.n	8000f68 <SD_disk_read+0xa8>
          break;
 8000f66:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8000f68:	2100      	movs	r1, #0
 8000f6a:	204c      	movs	r0, #76	; 0x4c
 8000f6c:	f7ff fe58 	bl	8000c20 <SD_SendCmd>
    }
  }
  
  DESELECT();
 8000f70:	f7ff fcfe 	bl	8000970 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8000f74:	f7ff fd20 	bl	80009b8 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	bf14      	ite	ne
 8000f7e:	2301      	movne	r3, #1
 8000f80:	2300      	moveq	r3, #0
 8000f82:	b2db      	uxtb	r3, r3
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000000 	.word	0x20000000
 8000f90:	20000040 	.word	0x20000040

08000f94 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60b9      	str	r1, [r7, #8]
 8000f9c:	607a      	str	r2, [r7, #4]
 8000f9e:	603b      	str	r3, [r7, #0]
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d102      	bne.n	8000fb0 <SD_disk_write+0x1c>
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d101      	bne.n	8000fb4 <SD_disk_write+0x20>
    return RES_PARERR;
 8000fb0:	2304      	movs	r3, #4
 8000fb2:	e06b      	b.n	800108c <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8000fb4:	4b37      	ldr	r3, [pc, #220]	; (8001094 <SD_disk_write+0x100>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e062      	b.n	800108c <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8000fc6:	4b33      	ldr	r3, [pc, #204]	; (8001094 <SD_disk_write+0x100>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	f003 0304 	and.w	r3, r3, #4
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <SD_disk_write+0x44>
    return RES_WRPRT;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	e059      	b.n	800108c <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8000fd8:	4b2f      	ldr	r3, [pc, #188]	; (8001098 <SD_disk_write+0x104>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	f003 0304 	and.w	r3, r3, #4
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d102      	bne.n	8000fea <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	025b      	lsls	r3, r3, #9
 8000fe8:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8000fea:	f7ff fcb5 	bl	8000958 <SELECT>
  
  if (count == 1) 
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d110      	bne.n	8001016 <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000ff4:	6879      	ldr	r1, [r7, #4]
 8000ff6:	2058      	movs	r0, #88	; 0x58
 8000ff8:	f7ff fe12 	bl	8000c20 <SD_SendCmd>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d13a      	bne.n	8001078 <SD_disk_write+0xe4>
 8001002:	21fe      	movs	r1, #254	; 0xfe
 8001004:	68b8      	ldr	r0, [r7, #8]
 8001006:	f7ff fdb7 	bl	8000b78 <SD_TxDataBlock>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d033      	beq.n	8001078 <SD_disk_write+0xe4>
      count = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	e030      	b.n	8001078 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8001016:	4b20      	ldr	r3, [pc, #128]	; (8001098 <SD_disk_write+0x104>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	2b00      	cmp	r3, #0
 8001020:	d007      	beq.n	8001032 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001022:	2100      	movs	r1, #0
 8001024:	2077      	movs	r0, #119	; 0x77
 8001026:	f7ff fdfb 	bl	8000c20 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800102a:	6839      	ldr	r1, [r7, #0]
 800102c:	2057      	movs	r0, #87	; 0x57
 800102e:	f7ff fdf7 	bl	8000c20 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8001032:	6879      	ldr	r1, [r7, #4]
 8001034:	2059      	movs	r0, #89	; 0x59
 8001036:	f7ff fdf3 	bl	8000c20 <SD_SendCmd>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d11b      	bne.n	8001078 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001040:	21fc      	movs	r1, #252	; 0xfc
 8001042:	68b8      	ldr	r0, [r7, #8]
 8001044:	f7ff fd98 	bl	8000b78 <SD_TxDataBlock>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d00a      	beq.n	8001064 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001054:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	3b01      	subs	r3, #1
 800105a:	603b      	str	r3, [r7, #0]
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d1ee      	bne.n	8001040 <SD_disk_write+0xac>
 8001062:	e000      	b.n	8001066 <SD_disk_write+0xd2>
          break;
 8001064:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 8001066:	21fd      	movs	r1, #253	; 0xfd
 8001068:	2000      	movs	r0, #0
 800106a:	f7ff fd85 	bl	8000b78 <SD_TxDataBlock>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d101      	bne.n	8001078 <SD_disk_write+0xe4>
      {        
        count = 1;
 8001074:	2301      	movs	r3, #1
 8001076:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8001078:	f7ff fc7a 	bl	8000970 <DESELECT>
  SPI_RxByte();
 800107c:	f7ff fc9c 	bl	80009b8 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	bf14      	ite	ne
 8001086:	2301      	movne	r3, #1
 8001088:	2300      	moveq	r3, #0
 800108a:	b2db      	uxtb	r3, r3
}
 800108c:	4618      	mov	r0, r3
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000000 	.word	0x20000000
 8001098:	20000040 	.word	0x20000040

0800109c <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 800109c:	b590      	push	{r4, r7, lr}
 800109e:	b08b      	sub	sp, #44	; 0x2c
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	603a      	str	r2, [r7, #0]
 80010a6:	71fb      	strb	r3, [r7, #7]
 80010a8:	460b      	mov	r3, r1
 80010aa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80010b6:	2304      	movs	r3, #4
 80010b8:	e117      	b.n	80012ea <SD_disk_ioctl+0x24e>
  
  res = RES_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 80010c0:	79bb      	ldrb	r3, [r7, #6]
 80010c2:	2b05      	cmp	r3, #5
 80010c4:	d126      	bne.n	8001114 <SD_disk_ioctl+0x78>
  {
    switch (*ptr) 
 80010c6:	6a3b      	ldr	r3, [r7, #32]
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d00e      	beq.n	80010ec <SD_disk_ioctl+0x50>
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d012      	beq.n	80010f8 <SD_disk_ioctl+0x5c>
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d11a      	bne.n	800110c <SD_disk_ioctl+0x70>
    {
    case 0:
      if (SD_CheckPower())
 80010d6:	f7ff fd0f 	bl	8000af8 <SD_CheckPower>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <SD_disk_ioctl+0x48>
        SD_PowerOff();          /* Power Off */
 80010e0:	f7ff fcfe 	bl	8000ae0 <SD_PowerOff>
      res = RES_OK;
 80010e4:	2300      	movs	r3, #0
 80010e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80010ea:	e0fc      	b.n	80012e6 <SD_disk_ioctl+0x24a>
    case 1:
      SD_PowerOn();             /* Power On */
 80010ec:	f7ff fcac 	bl	8000a48 <SD_PowerOn>
      res = RES_OK;
 80010f0:	2300      	movs	r3, #0
 80010f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80010f6:	e0f6      	b.n	80012e6 <SD_disk_ioctl+0x24a>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 80010f8:	6a3b      	ldr	r3, [r7, #32]
 80010fa:	1c5c      	adds	r4, r3, #1
 80010fc:	f7ff fcfc 	bl	8000af8 <SD_CheckPower>
 8001100:	4603      	mov	r3, r0
 8001102:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8001104:	2300      	movs	r3, #0
 8001106:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800110a:	e0ec      	b.n	80012e6 <SD_disk_ioctl+0x24a>
    default:
      res = RES_PARERR;
 800110c:	2304      	movs	r3, #4
 800110e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001112:	e0e8      	b.n	80012e6 <SD_disk_ioctl+0x24a>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8001114:	4b77      	ldr	r3, [pc, #476]	; (80012f4 <SD_disk_ioctl+0x258>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <SD_disk_ioctl+0x8a>
      return RES_NOTRDY;
 8001122:	2303      	movs	r3, #3
 8001124:	e0e1      	b.n	80012ea <SD_disk_ioctl+0x24e>
    
    SELECT();
 8001126:	f7ff fc17 	bl	8000958 <SELECT>
    
    switch (ctrl) 
 800112a:	79bb      	ldrb	r3, [r7, #6]
 800112c:	2b0d      	cmp	r3, #13
 800112e:	f200 80cb 	bhi.w	80012c8 <SD_disk_ioctl+0x22c>
 8001132:	a201      	add	r2, pc, #4	; (adr r2, 8001138 <SD_disk_ioctl+0x9c>)
 8001134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001138:	08001233 	.word	0x08001233
 800113c:	08001171 	.word	0x08001171
 8001140:	08001223 	.word	0x08001223
 8001144:	080012c9 	.word	0x080012c9
 8001148:	080012c9 	.word	0x080012c9
 800114c:	080012c9 	.word	0x080012c9
 8001150:	080012c9 	.word	0x080012c9
 8001154:	080012c9 	.word	0x080012c9
 8001158:	080012c9 	.word	0x080012c9
 800115c:	080012c9 	.word	0x080012c9
 8001160:	080012c9 	.word	0x080012c9
 8001164:	08001245 	.word	0x08001245
 8001168:	08001269 	.word	0x08001269
 800116c:	0800128d 	.word	0x0800128d
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8001170:	2100      	movs	r1, #0
 8001172:	2049      	movs	r0, #73	; 0x49
 8001174:	f7ff fd54 	bl	8000c20 <SD_SendCmd>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	f040 80a8 	bne.w	80012d0 <SD_disk_ioctl+0x234>
 8001180:	f107 030c 	add.w	r3, r7, #12
 8001184:	2110      	movs	r1, #16
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff fcc0 	bl	8000b0c <SD_RxDataBlock>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	f000 809e 	beq.w	80012d0 <SD_disk_ioctl+0x234>
      {
        if ((csd[0] >> 6) == 1) 
 8001194:	7b3b      	ldrb	r3, [r7, #12]
 8001196:	099b      	lsrs	r3, r3, #6
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b01      	cmp	r3, #1
 800119c:	d10e      	bne.n	80011bc <SD_disk_ioctl+0x120>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800119e:	7d7b      	ldrb	r3, [r7, #21]
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	7d3b      	ldrb	r3, [r7, #20]
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	021b      	lsls	r3, r3, #8
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	4413      	add	r3, r2
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	3301      	adds	r3, #1
 80011b0:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80011b2:	8bfb      	ldrh	r3, [r7, #30]
 80011b4:	029a      	lsls	r2, r3, #10
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	e02e      	b.n	800121a <SD_disk_ioctl+0x17e>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80011bc:	7c7b      	ldrb	r3, [r7, #17]
 80011be:	f003 030f 	and.w	r3, r3, #15
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	7dbb      	ldrb	r3, [r7, #22]
 80011c6:	09db      	lsrs	r3, r3, #7
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	4413      	add	r3, r2
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	7d7b      	ldrb	r3, [r7, #21]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	f003 0306 	and.w	r3, r3, #6
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	4413      	add	r3, r2
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	3302      	adds	r3, #2
 80011e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80011e4:	7d3b      	ldrb	r3, [r7, #20]
 80011e6:	099b      	lsrs	r3, r3, #6
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	7cfb      	ldrb	r3, [r7, #19]
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	4413      	add	r3, r2
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	7cbb      	ldrb	r3, [r7, #18]
 80011fa:	029b      	lsls	r3, r3, #10
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001202:	b29b      	uxth	r3, r3
 8001204:	4413      	add	r3, r2
 8001206:	b29b      	uxth	r3, r3
 8001208:	3301      	adds	r3, #1
 800120a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 800120c:	8bfa      	ldrh	r2, [r7, #30]
 800120e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001212:	3b09      	subs	r3, #9
 8001214:	409a      	lsls	r2, r3
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 800121a:	2300      	movs	r3, #0
 800121c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001220:	e056      	b.n	80012d0 <SD_disk_ioctl+0x234>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001228:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800122a:	2300      	movs	r3, #0
 800122c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001230:	e055      	b.n	80012de <SD_disk_ioctl+0x242>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001232:	f7ff fbed 	bl	8000a10 <SD_ReadyWait>
 8001236:	4603      	mov	r3, r0
 8001238:	2bff      	cmp	r3, #255	; 0xff
 800123a:	d14b      	bne.n	80012d4 <SD_disk_ioctl+0x238>
        res = RES_OK;
 800123c:	2300      	movs	r3, #0
 800123e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001242:	e047      	b.n	80012d4 <SD_disk_ioctl+0x238>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001244:	2100      	movs	r1, #0
 8001246:	2049      	movs	r0, #73	; 0x49
 8001248:	f7ff fcea 	bl	8000c20 <SD_SendCmd>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d142      	bne.n	80012d8 <SD_disk_ioctl+0x23c>
 8001252:	2110      	movs	r1, #16
 8001254:	6a38      	ldr	r0, [r7, #32]
 8001256:	f7ff fc59 	bl	8000b0c <SD_RxDataBlock>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d03b      	beq.n	80012d8 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8001260:	2300      	movs	r3, #0
 8001262:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001266:	e037      	b.n	80012d8 <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001268:	2100      	movs	r1, #0
 800126a:	204a      	movs	r0, #74	; 0x4a
 800126c:	f7ff fcd8 	bl	8000c20 <SD_SendCmd>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d132      	bne.n	80012dc <SD_disk_ioctl+0x240>
 8001276:	2110      	movs	r1, #16
 8001278:	6a38      	ldr	r0, [r7, #32]
 800127a:	f7ff fc47 	bl	8000b0c <SD_RxDataBlock>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d02b      	beq.n	80012dc <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001284:	2300      	movs	r3, #0
 8001286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800128a:	e027      	b.n	80012dc <SD_disk_ioctl+0x240>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 800128c:	2100      	movs	r1, #0
 800128e:	207a      	movs	r0, #122	; 0x7a
 8001290:	f7ff fcc6 	bl	8000c20 <SD_SendCmd>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d116      	bne.n	80012c8 <SD_disk_ioctl+0x22c>
      {         
        for (n = 0; n < 4; n++)
 800129a:	2300      	movs	r3, #0
 800129c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80012a0:	e00b      	b.n	80012ba <SD_disk_ioctl+0x21e>
        {
          *ptr++ = SPI_RxByte();
 80012a2:	6a3c      	ldr	r4, [r7, #32]
 80012a4:	1c63      	adds	r3, r4, #1
 80012a6:	623b      	str	r3, [r7, #32]
 80012a8:	f7ff fb86 	bl	80009b8 <SPI_RxByte>
 80012ac:	4603      	mov	r3, r0
 80012ae:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80012b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012b4:	3301      	adds	r3, #1
 80012b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80012ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012be:	2b03      	cmp	r3, #3
 80012c0:	d9ef      	bls.n	80012a2 <SD_disk_ioctl+0x206>
        }
        
        res = RES_OK;
 80012c2:	2300      	movs	r3, #0
 80012c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 80012c8:	2304      	movs	r3, #4
 80012ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012ce:	e006      	b.n	80012de <SD_disk_ioctl+0x242>
      break;
 80012d0:	bf00      	nop
 80012d2:	e004      	b.n	80012de <SD_disk_ioctl+0x242>
      break;
 80012d4:	bf00      	nop
 80012d6:	e002      	b.n	80012de <SD_disk_ioctl+0x242>
      break;
 80012d8:	bf00      	nop
 80012da:	e000      	b.n	80012de <SD_disk_ioctl+0x242>
      break;
 80012dc:	bf00      	nop
    }
    
    DESELECT();
 80012de:	f7ff fb47 	bl	8000970 <DESELECT>
    SPI_RxByte();
 80012e2:	f7ff fb69 	bl	80009b8 <SPI_RxByte>
  }
  
  return res;
 80012e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	372c      	adds	r7, #44	; 0x2c
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd90      	pop	{r4, r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000000 	.word	0x20000000

080012f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f8:	b5b0      	push	{r4, r5, r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012fe:	f000 fb84 	bl	8001a0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001302:	f000 f917 	bl	8001534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001306:	f000 f9c1 	bl	800168c <MX_GPIO_Init>
  MX_SPI1_Init();
 800130a:	f000 f95f 	bl	80015cc <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800130e:	f000 f993 	bl	8001638 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8001312:	f002 fa89 	bl	8003828 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
	/* Wait for SD module reset */
	HAL_Delay(500);
 8001316:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800131a:	f000 fbe5 	bl	8001ae8 <HAL_Delay>


	/* Mount SD Card */
	fres = f_mount(&fs, "", 0);
 800131e:	2200      	movs	r2, #0
 8001320:	4972      	ldr	r1, [pc, #456]	; (80014ec <main+0x1f4>)
 8001322:	4873      	ldr	r0, [pc, #460]	; (80014f0 <main+0x1f8>)
 8001324:	f004 f810 	bl	8005348 <f_mount>
 8001328:	4603      	mov	r3, r0
 800132a:	461a      	mov	r2, r3
 800132c:	4b71      	ldr	r3, [pc, #452]	; (80014f4 <main+0x1fc>)
 800132e:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK)
 8001330:	4b70      	ldr	r3, [pc, #448]	; (80014f4 <main+0x1fc>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <main+0x44>
		Error_Handler();
 8001338:	f000 f9f2 	bl	8001720 <Error_Handler>

	/* Open file to write */
	fres = f_open(&fil, "test.txt", FA_CREATE_ALWAYS | FA_WRITE | FA_READ);
 800133c:	220b      	movs	r2, #11
 800133e:	496e      	ldr	r1, [pc, #440]	; (80014f8 <main+0x200>)
 8001340:	486e      	ldr	r0, [pc, #440]	; (80014fc <main+0x204>)
 8001342:	f004 f847 	bl	80053d4 <f_open>
 8001346:	4603      	mov	r3, r0
 8001348:	461a      	mov	r2, r3
 800134a:	4b6a      	ldr	r3, [pc, #424]	; (80014f4 <main+0x1fc>)
 800134c:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK)
 800134e:	4b69      	ldr	r3, [pc, #420]	; (80014f4 <main+0x1fc>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <main+0x62>
		Error_Handler();
 8001356:	f000 f9e3 	bl	8001720 <Error_Handler>

	/* Check freeSpace space */
	fres = f_getfree("", &fre_clust, &pfs);
 800135a:	4a69      	ldr	r2, [pc, #420]	; (8001500 <main+0x208>)
 800135c:	4969      	ldr	r1, [pc, #420]	; (8001504 <main+0x20c>)
 800135e:	4863      	ldr	r0, [pc, #396]	; (80014ec <main+0x1f4>)
 8001360:	f004 fd52 	bl	8005e08 <f_getfree>
 8001364:	4603      	mov	r3, r0
 8001366:	461a      	mov	r2, r3
 8001368:	4b62      	ldr	r3, [pc, #392]	; (80014f4 <main+0x1fc>)
 800136a:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK)
 800136c:	4b61      	ldr	r3, [pc, #388]	; (80014f4 <main+0x1fc>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <main+0x80>
		Error_Handler();
 8001374:	f000 f9d4 	bl	8001720 <Error_Handler>

	totalSpace = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001378:	4b61      	ldr	r3, [pc, #388]	; (8001500 <main+0x208>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	3b02      	subs	r3, #2
 8001380:	4a5f      	ldr	r2, [pc, #380]	; (8001500 <main+0x208>)
 8001382:	6812      	ldr	r2, [r2, #0]
 8001384:	8952      	ldrh	r2, [r2, #10]
 8001386:	fb02 f303 	mul.w	r3, r2, r3
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff f838 	bl	8000400 <__aeabi_ui2d>
 8001390:	f04f 0200 	mov.w	r2, #0
 8001394:	4b5c      	ldr	r3, [pc, #368]	; (8001508 <main+0x210>)
 8001396:	f7ff f8ad 	bl	80004f4 <__aeabi_dmul>
 800139a:	4603      	mov	r3, r0
 800139c:	460c      	mov	r4, r1
 800139e:	4618      	mov	r0, r3
 80013a0:	4621      	mov	r1, r4
 80013a2:	f7ff fab9 	bl	8000918 <__aeabi_d2uiz>
 80013a6:	4602      	mov	r2, r0
 80013a8:	4b58      	ldr	r3, [pc, #352]	; (800150c <main+0x214>)
 80013aa:	601a      	str	r2, [r3, #0]
	freeSpace = (uint32_t)(fre_clust * pfs->csize * 0.5);
 80013ac:	4b54      	ldr	r3, [pc, #336]	; (8001500 <main+0x208>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	895b      	ldrh	r3, [r3, #10]
 80013b2:	461a      	mov	r2, r3
 80013b4:	4b53      	ldr	r3, [pc, #332]	; (8001504 <main+0x20c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	fb03 f302 	mul.w	r3, r3, r2
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff f81f 	bl	8000400 <__aeabi_ui2d>
 80013c2:	f04f 0200 	mov.w	r2, #0
 80013c6:	4b50      	ldr	r3, [pc, #320]	; (8001508 <main+0x210>)
 80013c8:	f7ff f894 	bl	80004f4 <__aeabi_dmul>
 80013cc:	4603      	mov	r3, r0
 80013ce:	460c      	mov	r4, r1
 80013d0:	4618      	mov	r0, r3
 80013d2:	4621      	mov	r1, r4
 80013d4:	f7ff faa0 	bl	8000918 <__aeabi_d2uiz>
 80013d8:	4602      	mov	r2, r0
 80013da:	4b4d      	ldr	r3, [pc, #308]	; (8001510 <main+0x218>)
 80013dc:	601a      	str	r2, [r3, #0]

	/* free space is less than 1kb */
	if(freeSpace < 1)
 80013de:	4b4c      	ldr	r3, [pc, #304]	; (8001510 <main+0x218>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d101      	bne.n	80013ea <main+0xf2>
		Error_Handler();
 80013e6:	f000 f99b 	bl	8001720 <Error_Handler>

	buffer[0] = '1';
 80013ea:	4b4a      	ldr	r3, [pc, #296]	; (8001514 <main+0x21c>)
 80013ec:	2231      	movs	r2, #49	; 0x31
 80013ee:	701a      	strb	r2, [r3, #0]
	buffer[1] = '2';
 80013f0:	4b48      	ldr	r3, [pc, #288]	; (8001514 <main+0x21c>)
 80013f2:	2232      	movs	r2, #50	; 0x32
 80013f4:	705a      	strb	r2, [r3, #1]
	buffer[2] = '3';
 80013f6:	4b47      	ldr	r3, [pc, #284]	; (8001514 <main+0x21c>)
 80013f8:	2233      	movs	r2, #51	; 0x33
 80013fa:	709a      	strb	r2, [r3, #2]
	buffer[3] = '4';
 80013fc:	4b45      	ldr	r3, [pc, #276]	; (8001514 <main+0x21c>)
 80013fe:	2234      	movs	r2, #52	; 0x34
 8001400:	70da      	strb	r2, [r3, #3]
	buffer[4] = '5';
 8001402:	4b44      	ldr	r3, [pc, #272]	; (8001514 <main+0x21c>)
 8001404:	2235      	movs	r2, #53	; 0x35
 8001406:	711a      	strb	r2, [r3, #4]
	buffer[5] = '6';
 8001408:	4b42      	ldr	r3, [pc, #264]	; (8001514 <main+0x21c>)
 800140a:	2236      	movs	r2, #54	; 0x36
 800140c:	715a      	strb	r2, [r3, #5]
	buffer[6] = 0x0d;
 800140e:	4b41      	ldr	r3, [pc, #260]	; (8001514 <main+0x21c>)
 8001410:	220d      	movs	r2, #13
 8001412:	719a      	strb	r2, [r3, #6]
	buffer[7] = 0x0a;
 8001414:	4b3f      	ldr	r3, [pc, #252]	; (8001514 <main+0x21c>)
 8001416:	220a      	movs	r2, #10
 8001418:	71da      	strb	r2, [r3, #7]

	/*Writing data to SD card file*/
	f_write(&fil, buffer, 8, (void *)&wbytes);
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	2208      	movs	r2, #8
 8001420:	493c      	ldr	r1, [pc, #240]	; (8001514 <main+0x21c>)
 8001422:	4836      	ldr	r0, [pc, #216]	; (80014fc <main+0x204>)
 8001424:	f004 fad3 	bl	80059ce <f_write>

	/*Reading seven first bytes from file SD card to array*/
	f_read(&fil,bufferRxBuffer,7,(void *)&wbytes);
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	2207      	movs	r2, #7
 800142e:	493a      	ldr	r1, [pc, #232]	; (8001518 <main+0x220>)
 8001430:	4832      	ldr	r0, [pc, #200]	; (80014fc <main+0x204>)
 8001432:	f004 f98d 	bl	8005750 <f_read>

	HAL_UART_Transmit(&huart2, bufferRxBuffer, 7, 100);
 8001436:	2364      	movs	r3, #100	; 0x64
 8001438:	2207      	movs	r2, #7
 800143a:	4937      	ldr	r1, [pc, #220]	; (8001518 <main+0x220>)
 800143c:	4837      	ldr	r0, [pc, #220]	; (800151c <main+0x224>)
 800143e:	f001 ff87 	bl	8003350 <HAL_UART_Transmit>

	/* Writing text */
	f_puts("STM32 SD Card I/O Example via SPI\n", &fil);
 8001442:	492e      	ldr	r1, [pc, #184]	; (80014fc <main+0x204>)
 8001444:	4836      	ldr	r0, [pc, #216]	; (8001520 <main+0x228>)
 8001446:	f004 fe48 	bl	80060da <f_puts>
	f_puts("Save the world!!!\n", &fil);
 800144a:	492c      	ldr	r1, [pc, #176]	; (80014fc <main+0x204>)
 800144c:	4835      	ldr	r0, [pc, #212]	; (8001524 <main+0x22c>)
 800144e:	f004 fe44 	bl	80060da <f_puts>

	/* Close file */
	if(f_close(&fil) != FR_OK)
 8001452:	482a      	ldr	r0, [pc, #168]	; (80014fc <main+0x204>)
 8001454:	f004 fcae 	bl	8005db4 <f_close>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <main+0x16a>
		Error_Handler();
 800145e:	f000 f95f 	bl	8001720 <Error_Handler>


	/* Open file to read */
	if(f_open(&fil, "test.txt", FA_READ) != FR_OK)
 8001462:	2201      	movs	r2, #1
 8001464:	4924      	ldr	r1, [pc, #144]	; (80014f8 <main+0x200>)
 8001466:	4825      	ldr	r0, [pc, #148]	; (80014fc <main+0x204>)
 8001468:	f003 ffb4 	bl	80053d4 <f_open>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d008      	beq.n	8001484 <main+0x18c>
		Error_Handler();
 8001472:	f000 f955 	bl	8001720 <Error_Handler>

	/*Reading string line from file on SD card*/
	while(f_gets(bufferRx, sizeof(bufferRx), &fil))
 8001476:	e005      	b.n	8001484 <main+0x18c>
	{
		HAL_UART_Transmit(&huart2, bufferRx, sizeof(bufferRx), 100);
 8001478:	2364      	movs	r3, #100	; 0x64
 800147a:	2264      	movs	r2, #100	; 0x64
 800147c:	492a      	ldr	r1, [pc, #168]	; (8001528 <main+0x230>)
 800147e:	4827      	ldr	r0, [pc, #156]	; (800151c <main+0x224>)
 8001480:	f001 ff66 	bl	8003350 <HAL_UART_Transmit>
	while(f_gets(bufferRx, sizeof(bufferRx), &fil))
 8001484:	4a1d      	ldr	r2, [pc, #116]	; (80014fc <main+0x204>)
 8001486:	2164      	movs	r1, #100	; 0x64
 8001488:	4827      	ldr	r0, [pc, #156]	; (8001528 <main+0x230>)
 800148a:	f004 fd72 	bl	8005f72 <f_gets>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1f1      	bne.n	8001478 <main+0x180>
		/* SWV output */
//		printf("%s", buffer);
	}

	/* Close file */
	if(f_close(&fil) != FR_OK)
 8001494:	4819      	ldr	r0, [pc, #100]	; (80014fc <main+0x204>)
 8001496:	f004 fc8d 	bl	8005db4 <f_close>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <main+0x1ac>
		Error_Handler();
 80014a0:	f000 f93e 	bl	8001720 <Error_Handler>

	if(f_open(&fil, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE | FA_READ) == FR_OK)
 80014a4:	220b      	movs	r2, #11
 80014a6:	4921      	ldr	r1, [pc, #132]	; (800152c <main+0x234>)
 80014a8:	4814      	ldr	r0, [pc, #80]	; (80014fc <main+0x204>)
 80014aa:	f003 ff93 	bl	80053d4 <f_open>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d110      	bne.n	80014d6 <main+0x1de>
	 {
		uint8_t data[] = {"This is new line"};
 80014b4:	4b1e      	ldr	r3, [pc, #120]	; (8001530 <main+0x238>)
 80014b6:	463c      	mov	r4, r7
 80014b8:	461d      	mov	r5, r3
 80014ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014be:	682b      	ldr	r3, [r5, #0]
 80014c0:	7023      	strb	r3, [r4, #0]
		if(f_write(&fil, data, sizeof(data), (void *)&wbytes) == FR_OK);
 80014c2:	f107 0314 	add.w	r3, r7, #20
 80014c6:	4639      	mov	r1, r7
 80014c8:	2211      	movs	r2, #17
 80014ca:	480c      	ldr	r0, [pc, #48]	; (80014fc <main+0x204>)
 80014cc:	f004 fa7f 	bl	80059ce <f_write>
		{
			f_close(&fil);
 80014d0:	480a      	ldr	r0, [pc, #40]	; (80014fc <main+0x204>)
 80014d2:	f004 fc6f 	bl	8005db4 <f_close>
		}
	 }


	/* Unmount SDCARD */
	if(f_mount(NULL, "", 1) != FR_OK)
 80014d6:	2201      	movs	r2, #1
 80014d8:	4904      	ldr	r1, [pc, #16]	; (80014ec <main+0x1f4>)
 80014da:	2000      	movs	r0, #0
 80014dc:	f003 ff34 	bl	8005348 <f_mount>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <main+0x1f2>
		Error_Handler();
 80014e6:	f000 f91b 	bl	8001720 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014ea:	e7fe      	b.n	80014ea <main+0x1f2>
 80014ec:	08006248 	.word	0x08006248
 80014f0:	20000080 	.word	0x20000080
 80014f4:	20000480 	.word	0x20000480
 80014f8:	0800624c 	.word	0x0800624c
 80014fc:	20000484 	.word	0x20000484
 8001500:	200003e4 	.word	0x200003e4
 8001504:	2000007c 	.word	0x2000007c
 8001508:	3fe00000 	.word	0x3fe00000
 800150c:	200002b0 	.word	0x200002b0
 8001510:	200003e0 	.word	0x200003e0
 8001514:	2000037c 	.word	0x2000037c
 8001518:	200002b4 	.word	0x200002b4
 800151c:	20000440 	.word	0x20000440
 8001520:	08006258 	.word	0x08006258
 8001524:	0800627c 	.word	0x0800627c
 8001528:	20000318 	.word	0x20000318
 800152c:	08006290 	.word	0x08006290
 8001530:	0800629c 	.word	0x0800629c

08001534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b092      	sub	sp, #72	; 0x48
 8001538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800153a:	f107 0314 	add.w	r3, r7, #20
 800153e:	2234      	movs	r2, #52	; 0x34
 8001540:	2100      	movs	r1, #0
 8001542:	4618      	mov	r0, r3
 8001544:	f004 fe6c 	bl	8006220 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001548:	463b      	mov	r3, r7
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]
 8001552:	60da      	str	r2, [r3, #12]
 8001554:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001556:	4b1c      	ldr	r3, [pc, #112]	; (80015c8 <SystemClock_Config+0x94>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800155e:	4a1a      	ldr	r2, [pc, #104]	; (80015c8 <SystemClock_Config+0x94>)
 8001560:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001564:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001566:	2301      	movs	r3, #1
 8001568:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800156a:	2305      	movs	r3, #5
 800156c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800156e:	2302      	movs	r3, #2
 8001570:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001572:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001576:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001578:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800157c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 800157e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001582:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	4618      	mov	r0, r3
 800158a:	f000 fd59 	bl	8002040 <HAL_RCC_OscConfig>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001594:	f000 f8c4 	bl	8001720 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001598:	230f      	movs	r3, #15
 800159a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800159c:	2303      	movs	r3, #3
 800159e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015a4:	2300      	movs	r3, #0
 80015a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015a8:	2300      	movs	r3, #0
 80015aa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015ac:	463b      	mov	r3, r7
 80015ae:	2101      	movs	r1, #1
 80015b0:	4618      	mov	r0, r3
 80015b2:	f001 f875 	bl	80026a0 <HAL_RCC_ClockConfig>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80015bc:	f000 f8b0 	bl	8001720 <Error_Handler>
  }
}
 80015c0:	bf00      	nop
 80015c2:	3748      	adds	r7, #72	; 0x48
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40007000 	.word	0x40007000

080015cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015d0:	4b17      	ldr	r3, [pc, #92]	; (8001630 <MX_SPI1_Init+0x64>)
 80015d2:	4a18      	ldr	r2, [pc, #96]	; (8001634 <MX_SPI1_Init+0x68>)
 80015d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015d6:	4b16      	ldr	r3, [pc, #88]	; (8001630 <MX_SPI1_Init+0x64>)
 80015d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015de:	4b14      	ldr	r3, [pc, #80]	; (8001630 <MX_SPI1_Init+0x64>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015e4:	4b12      	ldr	r3, [pc, #72]	; (8001630 <MX_SPI1_Init+0x64>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015ea:	4b11      	ldr	r3, [pc, #68]	; (8001630 <MX_SPI1_Init+0x64>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015f0:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <MX_SPI1_Init+0x64>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015f6:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <MX_SPI1_Init+0x64>)
 80015f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015fe:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <MX_SPI1_Init+0x64>)
 8001600:	2200      	movs	r2, #0
 8001602:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001604:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <MX_SPI1_Init+0x64>)
 8001606:	2200      	movs	r2, #0
 8001608:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <MX_SPI1_Init+0x64>)
 800160c:	2200      	movs	r2, #0
 800160e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001610:	4b07      	ldr	r3, [pc, #28]	; (8001630 <MX_SPI1_Init+0x64>)
 8001612:	2200      	movs	r2, #0
 8001614:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <MX_SPI1_Init+0x64>)
 8001618:	220a      	movs	r2, #10
 800161a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800161c:	4804      	ldr	r0, [pc, #16]	; (8001630 <MX_SPI1_Init+0x64>)
 800161e:	f001 fa5d 	bl	8002adc <HAL_SPI_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001628:	f000 f87a 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}
 8001630:	200003e8 	.word	0x200003e8
 8001634:	40013000 	.word	0x40013000

08001638 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800163c:	4b11      	ldr	r3, [pc, #68]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 800163e:	4a12      	ldr	r2, [pc, #72]	; (8001688 <MX_USART2_UART_Init+0x50>)
 8001640:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001642:	4b10      	ldr	r3, [pc, #64]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 8001644:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001648:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800164a:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 800164c:	2200      	movs	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001650:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 8001652:	2200      	movs	r2, #0
 8001654:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001656:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 8001658:	2200      	movs	r2, #0
 800165a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800165c:	4b09      	ldr	r3, [pc, #36]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 800165e:	220c      	movs	r2, #12
 8001660:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001662:	4b08      	ldr	r3, [pc, #32]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 8001664:	2200      	movs	r2, #0
 8001666:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 800166a:	2200      	movs	r2, #0
 800166c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800166e:	4805      	ldr	r0, [pc, #20]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 8001670:	f001 fe21 	bl	80032b6 <HAL_UART_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800167a:	f000 f851 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000440 	.word	0x20000440
 8001688:	40004400 	.word	0x40004400

0800168c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b088      	sub	sp, #32
 8001690:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001692:	f107 030c 	add.w	r3, r7, #12
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	60da      	str	r2, [r3, #12]
 80016a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016a2:	4b1d      	ldr	r3, [pc, #116]	; (8001718 <MX_GPIO_Init+0x8c>)
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	4a1c      	ldr	r2, [pc, #112]	; (8001718 <MX_GPIO_Init+0x8c>)
 80016a8:	f043 0320 	orr.w	r3, r3, #32
 80016ac:	61d3      	str	r3, [r2, #28]
 80016ae:	4b1a      	ldr	r3, [pc, #104]	; (8001718 <MX_GPIO_Init+0x8c>)
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	f003 0320 	and.w	r3, r3, #32
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ba:	4b17      	ldr	r3, [pc, #92]	; (8001718 <MX_GPIO_Init+0x8c>)
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	4a16      	ldr	r2, [pc, #88]	; (8001718 <MX_GPIO_Init+0x8c>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	61d3      	str	r3, [r2, #28]
 80016c6:	4b14      	ldr	r3, [pc, #80]	; (8001718 <MX_GPIO_Init+0x8c>)
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d2:	4b11      	ldr	r3, [pc, #68]	; (8001718 <MX_GPIO_Init+0x8c>)
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	4a10      	ldr	r2, [pc, #64]	; (8001718 <MX_GPIO_Init+0x8c>)
 80016d8:	f043 0302 	orr.w	r3, r3, #2
 80016dc:	61d3      	str	r3, [r2, #28]
 80016de:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <MX_GPIO_Init+0x8c>)
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	603b      	str	r3, [r7, #0]
 80016e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80016ea:	2201      	movs	r2, #1
 80016ec:	2140      	movs	r1, #64	; 0x40
 80016ee:	480b      	ldr	r0, [pc, #44]	; (800171c <MX_GPIO_Init+0x90>)
 80016f0:	f000 fc8e 	bl	8002010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016f4:	2340      	movs	r3, #64	; 0x40
 80016f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f8:	2301      	movs	r3, #1
 80016fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001700:	2300      	movs	r3, #0
 8001702:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001704:	f107 030c 	add.w	r3, r7, #12
 8001708:	4619      	mov	r1, r3
 800170a:	4804      	ldr	r0, [pc, #16]	; (800171c <MX_GPIO_Init+0x90>)
 800170c:	f000 faf2 	bl	8001cf4 <HAL_GPIO_Init>

}
 8001710:	bf00      	nop
 8001712:	3720      	adds	r7, #32
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40023800 	.word	0x40023800
 800171c:	40020400 	.word	0x40020400

08001720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr

0800172c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001732:	4b14      	ldr	r3, [pc, #80]	; (8001784 <HAL_MspInit+0x58>)
 8001734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001736:	4a13      	ldr	r2, [pc, #76]	; (8001784 <HAL_MspInit+0x58>)
 8001738:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800173c:	6253      	str	r3, [r2, #36]	; 0x24
 800173e:	4b11      	ldr	r3, [pc, #68]	; (8001784 <HAL_MspInit+0x58>)
 8001740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001742:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174a:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <HAL_MspInit+0x58>)
 800174c:	6a1b      	ldr	r3, [r3, #32]
 800174e:	4a0d      	ldr	r2, [pc, #52]	; (8001784 <HAL_MspInit+0x58>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	6213      	str	r3, [r2, #32]
 8001756:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <HAL_MspInit+0x58>)
 8001758:	6a1b      	ldr	r3, [r3, #32]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001762:	4b08      	ldr	r3, [pc, #32]	; (8001784 <HAL_MspInit+0x58>)
 8001764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001766:	4a07      	ldr	r2, [pc, #28]	; (8001784 <HAL_MspInit+0x58>)
 8001768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800176c:	6253      	str	r3, [r2, #36]	; 0x24
 800176e:	4b05      	ldr	r3, [pc, #20]	; (8001784 <HAL_MspInit+0x58>)
 8001770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001776:	607b      	str	r3, [r7, #4]
 8001778:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800177a:	bf00      	nop
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr
 8001784:	40023800 	.word	0x40023800

08001788 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08a      	sub	sp, #40	; 0x28
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 0314 	add.w	r3, r7, #20
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a17      	ldr	r2, [pc, #92]	; (8001804 <HAL_SPI_MspInit+0x7c>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d127      	bne.n	80017fa <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017aa:	4b17      	ldr	r3, [pc, #92]	; (8001808 <HAL_SPI_MspInit+0x80>)
 80017ac:	6a1b      	ldr	r3, [r3, #32]
 80017ae:	4a16      	ldr	r2, [pc, #88]	; (8001808 <HAL_SPI_MspInit+0x80>)
 80017b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017b4:	6213      	str	r3, [r2, #32]
 80017b6:	4b14      	ldr	r3, [pc, #80]	; (8001808 <HAL_SPI_MspInit+0x80>)
 80017b8:	6a1b      	ldr	r3, [r3, #32]
 80017ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <HAL_SPI_MspInit+0x80>)
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	4a10      	ldr	r2, [pc, #64]	; (8001808 <HAL_SPI_MspInit+0x80>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	61d3      	str	r3, [r2, #28]
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <HAL_SPI_MspInit+0x80>)
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80017da:	23e0      	movs	r3, #224	; 0xe0
 80017dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017de:	2302      	movs	r3, #2
 80017e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e6:	2303      	movs	r3, #3
 80017e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017ea:	2305      	movs	r3, #5
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ee:	f107 0314 	add.w	r3, r7, #20
 80017f2:	4619      	mov	r1, r3
 80017f4:	4805      	ldr	r0, [pc, #20]	; (800180c <HAL_SPI_MspInit+0x84>)
 80017f6:	f000 fa7d 	bl	8001cf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017fa:	bf00      	nop
 80017fc:	3728      	adds	r7, #40	; 0x28
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40013000 	.word	0x40013000
 8001808:	40023800 	.word	0x40023800
 800180c:	40020000 	.word	0x40020000

08001810 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08a      	sub	sp, #40	; 0x28
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	f107 0314 	add.w	r3, r7, #20
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a17      	ldr	r2, [pc, #92]	; (800188c <HAL_UART_MspInit+0x7c>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d127      	bne.n	8001882 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001832:	4b17      	ldr	r3, [pc, #92]	; (8001890 <HAL_UART_MspInit+0x80>)
 8001834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001836:	4a16      	ldr	r2, [pc, #88]	; (8001890 <HAL_UART_MspInit+0x80>)
 8001838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800183c:	6253      	str	r3, [r2, #36]	; 0x24
 800183e:	4b14      	ldr	r3, [pc, #80]	; (8001890 <HAL_UART_MspInit+0x80>)
 8001840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184a:	4b11      	ldr	r3, [pc, #68]	; (8001890 <HAL_UART_MspInit+0x80>)
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	4a10      	ldr	r2, [pc, #64]	; (8001890 <HAL_UART_MspInit+0x80>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	61d3      	str	r3, [r2, #28]
 8001856:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <HAL_UART_MspInit+0x80>)
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001862:	230c      	movs	r3, #12
 8001864:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001866:	2302      	movs	r3, #2
 8001868:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186e:	2303      	movs	r3, #3
 8001870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001872:	2307      	movs	r3, #7
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001876:	f107 0314 	add.w	r3, r7, #20
 800187a:	4619      	mov	r1, r3
 800187c:	4805      	ldr	r0, [pc, #20]	; (8001894 <HAL_UART_MspInit+0x84>)
 800187e:	f000 fa39 	bl	8001cf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001882:	bf00      	nop
 8001884:	3728      	adds	r7, #40	; 0x28
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40004400 	.word	0x40004400
 8001890:	40023800 	.word	0x40023800
 8001894:	40020000 	.word	0x40020000

08001898 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 800189c:	4b0d      	ldr	r3, [pc, #52]	; (80018d4 <SDTimer_Handler+0x3c>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d006      	beq.n	80018b4 <SDTimer_Handler+0x1c>
    Timer1--;
 80018a6:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <SDTimer_Handler+0x3c>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	3b01      	subs	r3, #1
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <SDTimer_Handler+0x3c>)
 80018b2:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 80018b4:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <SDTimer_Handler+0x40>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d006      	beq.n	80018cc <SDTimer_Handler+0x34>
    Timer2--;
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <SDTimer_Handler+0x40>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	3b01      	subs	r3, #1
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	4b03      	ldr	r3, [pc, #12]	; (80018d8 <SDTimer_Handler+0x40>)
 80018ca:	701a      	strb	r2, [r3, #0]
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr
 80018d4:	20000079 	.word	0x20000079
 80018d8:	20000078 	.word	0x20000078

080018dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr

080018e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ec:	e7fe      	b.n	80018ec <HardFault_Handler+0x4>

080018ee <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f2:	e7fe      	b.n	80018f2 <MemManage_Handler+0x4>

080018f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018f8:	e7fe      	b.n	80018f8 <BusFault_Handler+0x4>

080018fa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018fe:	e7fe      	b.n	80018fe <UsageFault_Handler+0x4>

08001900 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr

0800190c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr

08001918 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr

08001924 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8001928:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <SysTick_Handler+0x30>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	b2db      	uxtb	r3, r3
 800192e:	3301      	adds	r3, #1
 8001930:	b2da      	uxtb	r2, r3
 8001932:	4b08      	ldr	r3, [pc, #32]	; (8001954 <SysTick_Handler+0x30>)
 8001934:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8001936:	4b07      	ldr	r3, [pc, #28]	; (8001954 <SysTick_Handler+0x30>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b09      	cmp	r3, #9
 800193e:	d904      	bls.n	800194a <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8001940:	4b04      	ldr	r3, [pc, #16]	; (8001954 <SysTick_Handler+0x30>)
 8001942:	2200      	movs	r2, #0
 8001944:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8001946:	f7ff ffa7 	bl	8001898 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800194a:	f000 f8b1 	bl	8001ab0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000042 	.word	0x20000042

08001958 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 800195c:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <SystemInit+0x5c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a14      	ldr	r2, [pc, #80]	; (80019b4 <SystemInit+0x5c>)
 8001962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001966:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8001968:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <SystemInit+0x5c>)
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	4911      	ldr	r1, [pc, #68]	; (80019b4 <SystemInit+0x5c>)
 800196e:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <SystemInit+0x60>)
 8001970:	4013      	ands	r3, r2
 8001972:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8001974:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <SystemInit+0x5c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a0e      	ldr	r2, [pc, #56]	; (80019b4 <SystemInit+0x5c>)
 800197a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800197e:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8001982:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <SystemInit+0x5c>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a0a      	ldr	r2, [pc, #40]	; (80019b4 <SystemInit+0x5c>)
 800198a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800198e:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8001990:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <SystemInit+0x5c>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	4a07      	ldr	r2, [pc, #28]	; (80019b4 <SystemInit+0x5c>)
 8001996:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 800199a:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 800199c:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <SystemInit+0x5c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80019a2:	4b06      	ldr	r3, [pc, #24]	; (80019bc <SystemInit+0x64>)
 80019a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019a8:	609a      	str	r2, [r3, #8]
#endif
}
 80019aa:	bf00      	nop
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	40023800 	.word	0x40023800
 80019b8:	88ffc00c 	.word	0x88ffc00c
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80019c0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80019c2:	e003      	b.n	80019cc <LoopCopyDataInit>

080019c4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80019c4:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80019c6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80019c8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80019ca:	3104      	adds	r1, #4

080019cc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80019cc:	480a      	ldr	r0, [pc, #40]	; (80019f8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80019ce:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80019d0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80019d2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80019d4:	d3f6      	bcc.n	80019c4 <CopyDataInit>
  ldr r2, =_sbss
 80019d6:	4a0a      	ldr	r2, [pc, #40]	; (8001a00 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80019d8:	e002      	b.n	80019e0 <LoopFillZerobss>

080019da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80019da:	2300      	movs	r3, #0
  str r3, [r2], #4
 80019dc:	f842 3b04 	str.w	r3, [r2], #4

080019e0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80019e0:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80019e2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80019e4:	d3f9      	bcc.n	80019da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019e6:	f7ff ffb7 	bl	8001958 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ea:	f004 fbf5 	bl	80061d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019ee:	f7ff fc83 	bl	80012f8 <main>
  bx lr
 80019f2:	4770      	bx	lr
  ldr r3, =_sidata
 80019f4:	080063a0 	.word	0x080063a0
  ldr r0, =_sdata
 80019f8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80019fc:	20000024 	.word	0x20000024
  ldr r2, =_sbss
 8001a00:	20000024 	.word	0x20000024
  ldr r3, = _ebss
 8001a04:	20000b20 	.word	0x20000b20

08001a08 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a08:	e7fe      	b.n	8001a08 <ADC1_IRQHandler>

08001a0a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a10:	2300      	movs	r3, #0
 8001a12:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a14:	2003      	movs	r0, #3
 8001a16:	f000 f939 	bl	8001c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	f000 f80e 	bl	8001a3c <HAL_InitTick>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d002      	beq.n	8001a2c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	71fb      	strb	r3, [r7, #7]
 8001a2a:	e001      	b.n	8001a30 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a2c:	f7ff fe7e 	bl	800172c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a30:	79fb      	ldrb	r3, [r7, #7]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a44:	2300      	movs	r3, #0
 8001a46:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a48:	4b16      	ldr	r3, [pc, #88]	; (8001aa4 <HAL_InitTick+0x68>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d022      	beq.n	8001a96 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a50:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <HAL_InitTick+0x6c>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <HAL_InitTick+0x68>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a64:	4618      	mov	r0, r3
 8001a66:	f000 f938 	bl	8001cda <HAL_SYSTICK_Config>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d10f      	bne.n	8001a90 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b0f      	cmp	r3, #15
 8001a74:	d809      	bhi.n	8001a8a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a76:	2200      	movs	r2, #0
 8001a78:	6879      	ldr	r1, [r7, #4]
 8001a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8001a7e:	f000 f910 	bl	8001ca2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a82:	4a0a      	ldr	r2, [pc, #40]	; (8001aac <HAL_InitTick+0x70>)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6013      	str	r3, [r2, #0]
 8001a88:	e007      	b.n	8001a9a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	73fb      	strb	r3, [r7, #15]
 8001a8e:	e004      	b.n	8001a9a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	73fb      	strb	r3, [r7, #15]
 8001a94:	e001      	b.n	8001a9a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	2000000c 	.word	0x2000000c
 8001aa8:	20000004 	.word	0x20000004
 8001aac:	20000008 	.word	0x20000008

08001ab0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab4:	4b05      	ldr	r3, [pc, #20]	; (8001acc <HAL_IncTick+0x1c>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <HAL_IncTick+0x20>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4413      	add	r3, r2
 8001abe:	4a03      	ldr	r2, [pc, #12]	; (8001acc <HAL_IncTick+0x1c>)
 8001ac0:	6013      	str	r3, [r2, #0]
}
 8001ac2:	bf00      	nop
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	200006b4 	.word	0x200006b4
 8001ad0:	2000000c 	.word	0x2000000c

08001ad4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad8:	4b02      	ldr	r3, [pc, #8]	; (8001ae4 <HAL_GetTick+0x10>)
 8001ada:	681b      	ldr	r3, [r3, #0]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr
 8001ae4:	200006b4 	.word	0x200006b4

08001ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af0:	f7ff fff0 	bl	8001ad4 <HAL_GetTick>
 8001af4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b00:	d004      	beq.n	8001b0c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b02:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <HAL_Delay+0x40>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	4413      	add	r3, r2
 8001b0a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b0c:	bf00      	nop
 8001b0e:	f7ff ffe1 	bl	8001ad4 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	68fa      	ldr	r2, [r7, #12]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d8f7      	bhi.n	8001b0e <HAL_Delay+0x26>
  {
  }
}
 8001b1e:	bf00      	nop
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	2000000c 	.word	0x2000000c

08001b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <__NVIC_SetPriorityGrouping+0x44>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b42:	68ba      	ldr	r2, [r7, #8]
 8001b44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b48:	4013      	ands	r3, r2
 8001b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b5e:	4a04      	ldr	r2, [pc, #16]	; (8001b70 <__NVIC_SetPriorityGrouping+0x44>)
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	60d3      	str	r3, [r2, #12]
}
 8001b64:	bf00      	nop
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bc80      	pop	{r7}
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b78:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <__NVIC_GetPriorityGrouping+0x18>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	0a1b      	lsrs	r3, r3, #8
 8001b7e:	f003 0307 	and.w	r3, r3, #7
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	6039      	str	r1, [r7, #0]
 8001b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	db0a      	blt.n	8001bba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	490c      	ldr	r1, [pc, #48]	; (8001bdc <__NVIC_SetPriority+0x4c>)
 8001baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bae:	0112      	lsls	r2, r2, #4
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	440b      	add	r3, r1
 8001bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bb8:	e00a      	b.n	8001bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	4908      	ldr	r1, [pc, #32]	; (8001be0 <__NVIC_SetPriority+0x50>)
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	3b04      	subs	r3, #4
 8001bc8:	0112      	lsls	r2, r2, #4
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	440b      	add	r3, r1
 8001bce:	761a      	strb	r2, [r3, #24]
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	e000e100 	.word	0xe000e100
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b089      	sub	sp, #36	; 0x24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f1c3 0307 	rsb	r3, r3, #7
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	bf28      	it	cs
 8001c02:	2304      	movcs	r3, #4
 8001c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	3304      	adds	r3, #4
 8001c0a:	2b06      	cmp	r3, #6
 8001c0c:	d902      	bls.n	8001c14 <NVIC_EncodePriority+0x30>
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3b03      	subs	r3, #3
 8001c12:	e000      	b.n	8001c16 <NVIC_EncodePriority+0x32>
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c18:	f04f 32ff 	mov.w	r2, #4294967295
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43da      	mvns	r2, r3
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	401a      	ands	r2, r3
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	fa01 f303 	lsl.w	r3, r1, r3
 8001c36:	43d9      	mvns	r1, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c3c:	4313      	orrs	r3, r2
         );
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3724      	adds	r7, #36	; 0x24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr

08001c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c58:	d301      	bcc.n	8001c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e00f      	b.n	8001c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c5e:	4a0a      	ldr	r2, [pc, #40]	; (8001c88 <SysTick_Config+0x40>)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c66:	210f      	movs	r1, #15
 8001c68:	f04f 30ff 	mov.w	r0, #4294967295
 8001c6c:	f7ff ff90 	bl	8001b90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c70:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <SysTick_Config+0x40>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c76:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <SysTick_Config+0x40>)
 8001c78:	2207      	movs	r2, #7
 8001c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	e000e010 	.word	0xe000e010

08001c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7ff ff49 	bl	8001b2c <__NVIC_SetPriorityGrouping>
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b086      	sub	sp, #24
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	4603      	mov	r3, r0
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	607a      	str	r2, [r7, #4]
 8001cae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb4:	f7ff ff5e 	bl	8001b74 <__NVIC_GetPriorityGrouping>
 8001cb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	68b9      	ldr	r1, [r7, #8]
 8001cbe:	6978      	ldr	r0, [r7, #20]
 8001cc0:	f7ff ff90 	bl	8001be4 <NVIC_EncodePriority>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cca:	4611      	mov	r1, r2
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff ff5f 	bl	8001b90 <__NVIC_SetPriority>
}
 8001cd2:	bf00      	nop
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7ff ffb0 	bl	8001c48 <SysTick_Config>
 8001ce8:	4603      	mov	r3, r0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
	...

08001cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001cf4:	b480      	push	{r7}
 8001cf6:	b087      	sub	sp, #28
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001d06:	2300      	movs	r3, #0
 8001d08:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001d0a:	e160      	b.n	8001fce <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	2101      	movs	r1, #1
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	fa01 f303 	lsl.w	r3, r1, r3
 8001d18:	4013      	ands	r3, r2
 8001d1a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f000 8152 	beq.w	8001fc8 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d003      	beq.n	8001d34 <HAL_GPIO_Init+0x40>
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b12      	cmp	r3, #18
 8001d32:	d123      	bne.n	8001d7c <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	08da      	lsrs	r2, r3, #3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3208      	adds	r2, #8
 8001d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d40:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	220f      	movs	r2, #15
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	4013      	ands	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	691a      	ldr	r2, [r3, #16]
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	08da      	lsrs	r2, r3, #3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	3208      	adds	r2, #8
 8001d76:	6939      	ldr	r1, [r7, #16]
 8001d78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	2203      	movs	r2, #3
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	4013      	ands	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 0203 	and.w	r2, r3, #3
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d00b      	beq.n	8001dd0 <HAL_GPIO_Init+0xdc>
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d007      	beq.n	8001dd0 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dc4:	2b11      	cmp	r3, #17
 8001dc6:	d003      	beq.n	8001dd0 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2b12      	cmp	r3, #18
 8001dce:	d130      	bne.n	8001e32 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	2203      	movs	r2, #3
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	4013      	ands	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	68da      	ldr	r2, [r3, #12]
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001e06:	2201      	movs	r2, #1
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	4013      	ands	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	091b      	lsrs	r3, r3, #4
 8001e1c:	f003 0201 	and.w	r2, r3, #1
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	2203      	movs	r2, #3
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	43db      	mvns	r3, r3
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	4013      	ands	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	689a      	ldr	r2, [r3, #8]
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f000 80ac 	beq.w	8001fc8 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e70:	4b5d      	ldr	r3, [pc, #372]	; (8001fe8 <HAL_GPIO_Init+0x2f4>)
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	4a5c      	ldr	r2, [pc, #368]	; (8001fe8 <HAL_GPIO_Init+0x2f4>)
 8001e76:	f043 0301 	orr.w	r3, r3, #1
 8001e7a:	6213      	str	r3, [r2, #32]
 8001e7c:	4b5a      	ldr	r3, [pc, #360]	; (8001fe8 <HAL_GPIO_Init+0x2f4>)
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	60bb      	str	r3, [r7, #8]
 8001e86:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8001e88:	4a58      	ldr	r2, [pc, #352]	; (8001fec <HAL_GPIO_Init+0x2f8>)
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	089b      	lsrs	r3, r3, #2
 8001e8e:	3302      	adds	r3, #2
 8001e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e94:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	f003 0303 	and.w	r3, r3, #3
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	220f      	movs	r2, #15
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a50      	ldr	r2, [pc, #320]	; (8001ff0 <HAL_GPIO_Init+0x2fc>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d025      	beq.n	8001f00 <HAL_GPIO_Init+0x20c>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a4f      	ldr	r2, [pc, #316]	; (8001ff4 <HAL_GPIO_Init+0x300>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d01f      	beq.n	8001efc <HAL_GPIO_Init+0x208>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a4e      	ldr	r2, [pc, #312]	; (8001ff8 <HAL_GPIO_Init+0x304>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d019      	beq.n	8001ef8 <HAL_GPIO_Init+0x204>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a4d      	ldr	r2, [pc, #308]	; (8001ffc <HAL_GPIO_Init+0x308>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d013      	beq.n	8001ef4 <HAL_GPIO_Init+0x200>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a4c      	ldr	r2, [pc, #304]	; (8002000 <HAL_GPIO_Init+0x30c>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d00d      	beq.n	8001ef0 <HAL_GPIO_Init+0x1fc>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a4b      	ldr	r2, [pc, #300]	; (8002004 <HAL_GPIO_Init+0x310>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d007      	beq.n	8001eec <HAL_GPIO_Init+0x1f8>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a4a      	ldr	r2, [pc, #296]	; (8002008 <HAL_GPIO_Init+0x314>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d101      	bne.n	8001ee8 <HAL_GPIO_Init+0x1f4>
 8001ee4:	2306      	movs	r3, #6
 8001ee6:	e00c      	b.n	8001f02 <HAL_GPIO_Init+0x20e>
 8001ee8:	2307      	movs	r3, #7
 8001eea:	e00a      	b.n	8001f02 <HAL_GPIO_Init+0x20e>
 8001eec:	2305      	movs	r3, #5
 8001eee:	e008      	b.n	8001f02 <HAL_GPIO_Init+0x20e>
 8001ef0:	2304      	movs	r3, #4
 8001ef2:	e006      	b.n	8001f02 <HAL_GPIO_Init+0x20e>
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e004      	b.n	8001f02 <HAL_GPIO_Init+0x20e>
 8001ef8:	2302      	movs	r3, #2
 8001efa:	e002      	b.n	8001f02 <HAL_GPIO_Init+0x20e>
 8001efc:	2301      	movs	r3, #1
 8001efe:	e000      	b.n	8001f02 <HAL_GPIO_Init+0x20e>
 8001f00:	2300      	movs	r3, #0
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	f002 0203 	and.w	r2, r2, #3
 8001f08:	0092      	lsls	r2, r2, #2
 8001f0a:	4093      	lsls	r3, r2
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f12:	4936      	ldr	r1, [pc, #216]	; (8001fec <HAL_GPIO_Init+0x2f8>)
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	089b      	lsrs	r3, r3, #2
 8001f18:	3302      	adds	r3, #2
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f20:	4b3a      	ldr	r3, [pc, #232]	; (800200c <HAL_GPIO_Init+0x318>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent); 
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f44:	4a31      	ldr	r2, [pc, #196]	; (800200c <HAL_GPIO_Init+0x318>)
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f4a:	4b30      	ldr	r3, [pc, #192]	; (800200c <HAL_GPIO_Init+0x318>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	43db      	mvns	r3, r3
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	4013      	ands	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent); 
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f6e:	4a27      	ldr	r2, [pc, #156]	; (800200c <HAL_GPIO_Init+0x318>)
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f74:	4b25      	ldr	r3, [pc, #148]	; (800200c <HAL_GPIO_Init+0x318>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	4013      	ands	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent); 
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f98:	4a1c      	ldr	r2, [pc, #112]	; (800200c <HAL_GPIO_Init+0x318>)
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f9e:	4b1b      	ldr	r3, [pc, #108]	; (800200c <HAL_GPIO_Init+0x318>)
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	4013      	ands	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent); 
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001fc2:	4a12      	ldr	r2, [pc, #72]	; (800200c <HAL_GPIO_Init+0x318>)
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f47f ae97 	bne.w	8001d0c <HAL_GPIO_Init+0x18>
  } 
}
 8001fde:	bf00      	nop
 8001fe0:	371c      	adds	r7, #28
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	40010000 	.word	0x40010000
 8001ff0:	40020000 	.word	0x40020000
 8001ff4:	40020400 	.word	0x40020400
 8001ff8:	40020800 	.word	0x40020800
 8001ffc:	40020c00 	.word	0x40020c00
 8002000:	40021000 	.word	0x40021000
 8002004:	40021400 	.word	0x40021400
 8002008:	40021800 	.word	0x40021800
 800200c:	40010400 	.word	0x40010400

08002010 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	460b      	mov	r3, r1
 800201a:	807b      	strh	r3, [r7, #2]
 800201c:	4613      	mov	r3, r2
 800201e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002020:	787b      	ldrb	r3, [r7, #1]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002026:	887a      	ldrh	r2, [r7, #2]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800202c:	e003      	b.n	8002036 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800202e:	887b      	ldrh	r3, [r7, #2]
 8002030:	041a      	lsls	r2, r3, #16
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	619a      	str	r2, [r3, #24]
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr

08002040 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b088      	sub	sp, #32
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e31d      	b.n	800268e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002052:	4b94      	ldr	r3, [pc, #592]	; (80022a4 <HAL_RCC_OscConfig+0x264>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 030c 	and.w	r3, r3, #12
 800205a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800205c:	4b91      	ldr	r3, [pc, #580]	; (80022a4 <HAL_RCC_OscConfig+0x264>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002064:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d07b      	beq.n	800216a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	2b08      	cmp	r3, #8
 8002076:	d006      	beq.n	8002086 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	2b0c      	cmp	r3, #12
 800207c:	d10f      	bne.n	800209e <HAL_RCC_OscConfig+0x5e>
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002084:	d10b      	bne.n	800209e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002086:	4b87      	ldr	r3, [pc, #540]	; (80022a4 <HAL_RCC_OscConfig+0x264>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d06a      	beq.n	8002168 <HAL_RCC_OscConfig+0x128>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d166      	bne.n	8002168 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e2f7      	b.n	800268e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d106      	bne.n	80020b4 <HAL_RCC_OscConfig+0x74>
 80020a6:	4b7f      	ldr	r3, [pc, #508]	; (80022a4 <HAL_RCC_OscConfig+0x264>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a7e      	ldr	r2, [pc, #504]	; (80022a4 <HAL_RCC_OscConfig+0x264>)
 80020ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	e02d      	b.n	8002110 <HAL_RCC_OscConfig+0xd0>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d10c      	bne.n	80020d6 <HAL_RCC_OscConfig+0x96>
 80020bc:	4b79      	ldr	r3, [pc, #484]	; (80022a4 <HAL_RCC_OscConfig+0x264>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a78      	ldr	r2, [pc, #480]	; (80022a4 <HAL_RCC_OscConfig+0x264>)
 80020c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020c6:	6013      	str	r3, [r2, #0]
 80020c8:	4b76      	ldr	r3, [pc, #472]	; (80022a4 <HAL_RCC_OscConfig+0x264>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a75      	ldr	r2, [pc, #468]	; (80022a4 <HAL_RCC_OscConfig+0x264>)
 80020ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020d2:	6013      	str	r3, [r2, #0]
 80020d4:	e01c      	b.n	8002110 <HAL_RCC_OscConfig+0xd0>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b05      	cmp	r3, #5
 80020dc:	d10c      	bne.n	80020f8 <HAL_RCC_OscConfig+0xb8>
 80020de:	4b71      	ldr	r3, [pc, #452]	; (80022a4 <HAL_RCC_OscConfig+0x264>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a70      	ldr	r2, [pc, #448]	; (80022a4 <HAL_RCC_OscConfig+0x264>)
 80020e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020e8:	6013      	str	r3, [r2, #0]
 80020ea:	4b6e      	ldr	r3, [pc, #440]	; (80022a4 <HAL_RCC_OscConfig+0x264>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a6d      	ldr	r2, [pc, #436]	; (80022a4 <HAL_RCC_OscConfig+0x264>)
 80020f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f4:	6013      	str	r3, [r2, #0]
 80020f6:	e00b      	b.n	8002110 <HAL_RCC_OscConfig+0xd0>
 80020f8:	4b6a      	ldr	r3, [pc, #424]	; (80022a4 <HAL_RCC_OscConfig+0x264>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a69      	ldr	r2, [pc, #420]	; (80022a4 <HAL_RCC_OscConfig+0x264>)
 80020fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002102:	6013      	str	r3, [r2, #0]
 8002104:	4b67      	ldr	r3, [pc, #412]	; (80022a4 <HAL_RCC_OscConfig+0x264>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a66      	ldr	r2, [pc, #408]	; (80022a4 <HAL_RCC_OscConfig+0x264>)
 800210a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800210e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d013      	beq.n	8002140 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002118:	f7ff fcdc 	bl	8001ad4 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002120:	f7ff fcd8 	bl	8001ad4 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b64      	cmp	r3, #100	; 0x64
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e2ad      	b.n	800268e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002132:	4b5c      	ldr	r3, [pc, #368]	; (80022a4 <HAL_RCC_OscConfig+0x264>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d0f0      	beq.n	8002120 <HAL_RCC_OscConfig+0xe0>
 800213e:	e014      	b.n	800216a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002140:	f7ff fcc8 	bl	8001ad4 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002148:	f7ff fcc4 	bl	8001ad4 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b64      	cmp	r3, #100	; 0x64
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e299      	b.n	800268e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800215a:	4b52      	ldr	r3, [pc, #328]	; (80022a4 <HAL_RCC_OscConfig+0x264>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f0      	bne.n	8002148 <HAL_RCC_OscConfig+0x108>
 8002166:	e000      	b.n	800216a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002168:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d05a      	beq.n	800222c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	2b04      	cmp	r3, #4
 800217a:	d005      	beq.n	8002188 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	2b0c      	cmp	r3, #12
 8002180:	d119      	bne.n	80021b6 <HAL_RCC_OscConfig+0x176>
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d116      	bne.n	80021b6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002188:	4b46      	ldr	r3, [pc, #280]	; (80022a4 <HAL_RCC_OscConfig+0x264>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d005      	beq.n	80021a0 <HAL_RCC_OscConfig+0x160>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d001      	beq.n	80021a0 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e276      	b.n	800268e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a0:	4b40      	ldr	r3, [pc, #256]	; (80022a4 <HAL_RCC_OscConfig+0x264>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	021b      	lsls	r3, r3, #8
 80021ae:	493d      	ldr	r1, [pc, #244]	; (80022a4 <HAL_RCC_OscConfig+0x264>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021b4:	e03a      	b.n	800222c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d020      	beq.n	8002200 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021be:	4b3a      	ldr	r3, [pc, #232]	; (80022a8 <HAL_RCC_OscConfig+0x268>)
 80021c0:	2201      	movs	r2, #1
 80021c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c4:	f7ff fc86 	bl	8001ad4 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021cc:	f7ff fc82 	bl	8001ad4 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e257      	b.n	800268e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021de:	4b31      	ldr	r3, [pc, #196]	; (80022a4 <HAL_RCC_OscConfig+0x264>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d0f0      	beq.n	80021cc <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ea:	4b2e      	ldr	r3, [pc, #184]	; (80022a4 <HAL_RCC_OscConfig+0x264>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	021b      	lsls	r3, r3, #8
 80021f8:	492a      	ldr	r1, [pc, #168]	; (80022a4 <HAL_RCC_OscConfig+0x264>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	604b      	str	r3, [r1, #4]
 80021fe:	e015      	b.n	800222c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002200:	4b29      	ldr	r3, [pc, #164]	; (80022a8 <HAL_RCC_OscConfig+0x268>)
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002206:	f7ff fc65 	bl	8001ad4 <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800220c:	e008      	b.n	8002220 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800220e:	f7ff fc61 	bl	8001ad4 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e236      	b.n	800268e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002220:	4b20      	ldr	r3, [pc, #128]	; (80022a4 <HAL_RCC_OscConfig+0x264>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1f0      	bne.n	800220e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0310 	and.w	r3, r3, #16
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 80b8 	beq.w	80023aa <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d170      	bne.n	8002322 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002240:	4b18      	ldr	r3, [pc, #96]	; (80022a4 <HAL_RCC_OscConfig+0x264>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002248:	2b00      	cmp	r3, #0
 800224a:	d005      	beq.n	8002258 <HAL_RCC_OscConfig+0x218>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e21a      	b.n	800268e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a1a      	ldr	r2, [r3, #32]
 800225c:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <HAL_RCC_OscConfig+0x264>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002264:	429a      	cmp	r2, r3
 8002266:	d921      	bls.n	80022ac <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	4618      	mov	r0, r3
 800226e:	f000 fbd5 	bl	8002a1c <RCC_SetFlashLatencyFromMSIRange>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e208      	b.n	800268e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800227c:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <HAL_RCC_OscConfig+0x264>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	4906      	ldr	r1, [pc, #24]	; (80022a4 <HAL_RCC_OscConfig+0x264>)
 800228a:	4313      	orrs	r3, r2
 800228c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800228e:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <HAL_RCC_OscConfig+0x264>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	061b      	lsls	r3, r3, #24
 800229c:	4901      	ldr	r1, [pc, #4]	; (80022a4 <HAL_RCC_OscConfig+0x264>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	604b      	str	r3, [r1, #4]
 80022a2:	e020      	b.n	80022e6 <HAL_RCC_OscConfig+0x2a6>
 80022a4:	40023800 	.word	0x40023800
 80022a8:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022ac:	4ba4      	ldr	r3, [pc, #656]	; (8002540 <HAL_RCC_OscConfig+0x500>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	49a1      	ldr	r1, [pc, #644]	; (8002540 <HAL_RCC_OscConfig+0x500>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022be:	4ba0      	ldr	r3, [pc, #640]	; (8002540 <HAL_RCC_OscConfig+0x500>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	061b      	lsls	r3, r3, #24
 80022cc:	499c      	ldr	r1, [pc, #624]	; (8002540 <HAL_RCC_OscConfig+0x500>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f000 fba0 	bl	8002a1c <RCC_SetFlashLatencyFromMSIRange>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e1d3      	b.n	800268e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	0b5b      	lsrs	r3, r3, #13
 80022ec:	3301      	adds	r3, #1
 80022ee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80022f6:	4a92      	ldr	r2, [pc, #584]	; (8002540 <HAL_RCC_OscConfig+0x500>)
 80022f8:	6892      	ldr	r2, [r2, #8]
 80022fa:	0912      	lsrs	r2, r2, #4
 80022fc:	f002 020f 	and.w	r2, r2, #15
 8002300:	4990      	ldr	r1, [pc, #576]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 8002302:	5c8a      	ldrb	r2, [r1, r2]
 8002304:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002306:	4a90      	ldr	r2, [pc, #576]	; (8002548 <HAL_RCC_OscConfig+0x508>)
 8002308:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800230a:	4b90      	ldr	r3, [pc, #576]	; (800254c <HAL_RCC_OscConfig+0x50c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff fb94 	bl	8001a3c <HAL_InitTick>
 8002314:	4603      	mov	r3, r0
 8002316:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002318:	7bfb      	ldrb	r3, [r7, #15]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d045      	beq.n	80023aa <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800231e:	7bfb      	ldrb	r3, [r7, #15]
 8002320:	e1b5      	b.n	800268e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d029      	beq.n	800237e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800232a:	4b89      	ldr	r3, [pc, #548]	; (8002550 <HAL_RCC_OscConfig+0x510>)
 800232c:	2201      	movs	r2, #1
 800232e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002330:	f7ff fbd0 	bl	8001ad4 <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002338:	f7ff fbcc 	bl	8001ad4 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e1a1      	b.n	800268e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800234a:	4b7d      	ldr	r3, [pc, #500]	; (8002540 <HAL_RCC_OscConfig+0x500>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0f0      	beq.n	8002338 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002356:	4b7a      	ldr	r3, [pc, #488]	; (8002540 <HAL_RCC_OscConfig+0x500>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	4977      	ldr	r1, [pc, #476]	; (8002540 <HAL_RCC_OscConfig+0x500>)
 8002364:	4313      	orrs	r3, r2
 8002366:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002368:	4b75      	ldr	r3, [pc, #468]	; (8002540 <HAL_RCC_OscConfig+0x500>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	061b      	lsls	r3, r3, #24
 8002376:	4972      	ldr	r1, [pc, #456]	; (8002540 <HAL_RCC_OscConfig+0x500>)
 8002378:	4313      	orrs	r3, r2
 800237a:	604b      	str	r3, [r1, #4]
 800237c:	e015      	b.n	80023aa <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800237e:	4b74      	ldr	r3, [pc, #464]	; (8002550 <HAL_RCC_OscConfig+0x510>)
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002384:	f7ff fba6 	bl	8001ad4 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800238c:	f7ff fba2 	bl	8001ad4 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e177      	b.n	800268e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800239e:	4b68      	ldr	r3, [pc, #416]	; (8002540 <HAL_RCC_OscConfig+0x500>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f0      	bne.n	800238c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0308 	and.w	r3, r3, #8
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d030      	beq.n	8002418 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d016      	beq.n	80023ec <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023be:	4b65      	ldr	r3, [pc, #404]	; (8002554 <HAL_RCC_OscConfig+0x514>)
 80023c0:	2201      	movs	r2, #1
 80023c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c4:	f7ff fb86 	bl	8001ad4 <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023cc:	f7ff fb82 	bl	8001ad4 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e157      	b.n	800268e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80023de:	4b58      	ldr	r3, [pc, #352]	; (8002540 <HAL_RCC_OscConfig+0x500>)
 80023e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d0f0      	beq.n	80023cc <HAL_RCC_OscConfig+0x38c>
 80023ea:	e015      	b.n	8002418 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ec:	4b59      	ldr	r3, [pc, #356]	; (8002554 <HAL_RCC_OscConfig+0x514>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f2:	f7ff fb6f 	bl	8001ad4 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023fa:	f7ff fb6b 	bl	8001ad4 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e140      	b.n	800268e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800240c:	4b4c      	ldr	r3, [pc, #304]	; (8002540 <HAL_RCC_OscConfig+0x500>)
 800240e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1f0      	bne.n	80023fa <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0304 	and.w	r3, r3, #4
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 80b5 	beq.w	8002590 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002426:	2300      	movs	r3, #0
 8002428:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800242a:	4b45      	ldr	r3, [pc, #276]	; (8002540 <HAL_RCC_OscConfig+0x500>)
 800242c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10d      	bne.n	8002452 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002436:	4b42      	ldr	r3, [pc, #264]	; (8002540 <HAL_RCC_OscConfig+0x500>)
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	4a41      	ldr	r2, [pc, #260]	; (8002540 <HAL_RCC_OscConfig+0x500>)
 800243c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002440:	6253      	str	r3, [r2, #36]	; 0x24
 8002442:	4b3f      	ldr	r3, [pc, #252]	; (8002540 <HAL_RCC_OscConfig+0x500>)
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244a:	60bb      	str	r3, [r7, #8]
 800244c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800244e:	2301      	movs	r3, #1
 8002450:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002452:	4b41      	ldr	r3, [pc, #260]	; (8002558 <HAL_RCC_OscConfig+0x518>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245a:	2b00      	cmp	r3, #0
 800245c:	d118      	bne.n	8002490 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800245e:	4b3e      	ldr	r3, [pc, #248]	; (8002558 <HAL_RCC_OscConfig+0x518>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a3d      	ldr	r2, [pc, #244]	; (8002558 <HAL_RCC_OscConfig+0x518>)
 8002464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002468:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800246a:	f7ff fb33 	bl	8001ad4 <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002472:	f7ff fb2f 	bl	8001ad4 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b64      	cmp	r3, #100	; 0x64
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e104      	b.n	800268e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002484:	4b34      	ldr	r3, [pc, #208]	; (8002558 <HAL_RCC_OscConfig+0x518>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0f0      	beq.n	8002472 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d106      	bne.n	80024a6 <HAL_RCC_OscConfig+0x466>
 8002498:	4b29      	ldr	r3, [pc, #164]	; (8002540 <HAL_RCC_OscConfig+0x500>)
 800249a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800249c:	4a28      	ldr	r2, [pc, #160]	; (8002540 <HAL_RCC_OscConfig+0x500>)
 800249e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a2:	6353      	str	r3, [r2, #52]	; 0x34
 80024a4:	e02d      	b.n	8002502 <HAL_RCC_OscConfig+0x4c2>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d10c      	bne.n	80024c8 <HAL_RCC_OscConfig+0x488>
 80024ae:	4b24      	ldr	r3, [pc, #144]	; (8002540 <HAL_RCC_OscConfig+0x500>)
 80024b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b2:	4a23      	ldr	r2, [pc, #140]	; (8002540 <HAL_RCC_OscConfig+0x500>)
 80024b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024b8:	6353      	str	r3, [r2, #52]	; 0x34
 80024ba:	4b21      	ldr	r3, [pc, #132]	; (8002540 <HAL_RCC_OscConfig+0x500>)
 80024bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024be:	4a20      	ldr	r2, [pc, #128]	; (8002540 <HAL_RCC_OscConfig+0x500>)
 80024c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80024c4:	6353      	str	r3, [r2, #52]	; 0x34
 80024c6:	e01c      	b.n	8002502 <HAL_RCC_OscConfig+0x4c2>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	2b05      	cmp	r3, #5
 80024ce:	d10c      	bne.n	80024ea <HAL_RCC_OscConfig+0x4aa>
 80024d0:	4b1b      	ldr	r3, [pc, #108]	; (8002540 <HAL_RCC_OscConfig+0x500>)
 80024d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024d4:	4a1a      	ldr	r2, [pc, #104]	; (8002540 <HAL_RCC_OscConfig+0x500>)
 80024d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024da:	6353      	str	r3, [r2, #52]	; 0x34
 80024dc:	4b18      	ldr	r3, [pc, #96]	; (8002540 <HAL_RCC_OscConfig+0x500>)
 80024de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024e0:	4a17      	ldr	r2, [pc, #92]	; (8002540 <HAL_RCC_OscConfig+0x500>)
 80024e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e6:	6353      	str	r3, [r2, #52]	; 0x34
 80024e8:	e00b      	b.n	8002502 <HAL_RCC_OscConfig+0x4c2>
 80024ea:	4b15      	ldr	r3, [pc, #84]	; (8002540 <HAL_RCC_OscConfig+0x500>)
 80024ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ee:	4a14      	ldr	r2, [pc, #80]	; (8002540 <HAL_RCC_OscConfig+0x500>)
 80024f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024f4:	6353      	str	r3, [r2, #52]	; 0x34
 80024f6:	4b12      	ldr	r3, [pc, #72]	; (8002540 <HAL_RCC_OscConfig+0x500>)
 80024f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024fa:	4a11      	ldr	r2, [pc, #68]	; (8002540 <HAL_RCC_OscConfig+0x500>)
 80024fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002500:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d015      	beq.n	8002536 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800250a:	f7ff fae3 	bl	8001ad4 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002510:	e00a      	b.n	8002528 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002512:	f7ff fadf 	bl	8001ad4 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002520:	4293      	cmp	r3, r2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e0b2      	b.n	800268e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002528:	4b05      	ldr	r3, [pc, #20]	; (8002540 <HAL_RCC_OscConfig+0x500>)
 800252a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800252c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0ee      	beq.n	8002512 <HAL_RCC_OscConfig+0x4d2>
 8002534:	e023      	b.n	800257e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002536:	f7ff facd 	bl	8001ad4 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800253c:	e019      	b.n	8002572 <HAL_RCC_OscConfig+0x532>
 800253e:	bf00      	nop
 8002540:	40023800 	.word	0x40023800
 8002544:	08006300 	.word	0x08006300
 8002548:	20000004 	.word	0x20000004
 800254c:	20000008 	.word	0x20000008
 8002550:	42470020 	.word	0x42470020
 8002554:	42470680 	.word	0x42470680
 8002558:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800255c:	f7ff faba 	bl	8001ad4 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	f241 3288 	movw	r2, #5000	; 0x1388
 800256a:	4293      	cmp	r3, r2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e08d      	b.n	800268e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002572:	4b49      	ldr	r3, [pc, #292]	; (8002698 <HAL_RCC_OscConfig+0x658>)
 8002574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002576:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1ee      	bne.n	800255c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800257e:	7ffb      	ldrb	r3, [r7, #31]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d105      	bne.n	8002590 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002584:	4b44      	ldr	r3, [pc, #272]	; (8002698 <HAL_RCC_OscConfig+0x658>)
 8002586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002588:	4a43      	ldr	r2, [pc, #268]	; (8002698 <HAL_RCC_OscConfig+0x658>)
 800258a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800258e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	2b00      	cmp	r3, #0
 8002596:	d079      	beq.n	800268c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	2b0c      	cmp	r3, #12
 800259c:	d056      	beq.n	800264c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d13b      	bne.n	800261e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a6:	4b3d      	ldr	r3, [pc, #244]	; (800269c <HAL_RCC_OscConfig+0x65c>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ac:	f7ff fa92 	bl	8001ad4 <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025b4:	f7ff fa8e 	bl	8001ad4 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e063      	b.n	800268e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80025c6:	4b34      	ldr	r3, [pc, #208]	; (8002698 <HAL_RCC_OscConfig+0x658>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1f0      	bne.n	80025b4 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025d2:	4b31      	ldr	r3, [pc, #196]	; (8002698 <HAL_RCC_OscConfig+0x658>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e2:	4319      	orrs	r1, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e8:	430b      	orrs	r3, r1
 80025ea:	492b      	ldr	r1, [pc, #172]	; (8002698 <HAL_RCC_OscConfig+0x658>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025f0:	4b2a      	ldr	r3, [pc, #168]	; (800269c <HAL_RCC_OscConfig+0x65c>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f6:	f7ff fa6d 	bl	8001ad4 <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025fe:	f7ff fa69 	bl	8001ad4 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e03e      	b.n	800268e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002610:	4b21      	ldr	r3, [pc, #132]	; (8002698 <HAL_RCC_OscConfig+0x658>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0f0      	beq.n	80025fe <HAL_RCC_OscConfig+0x5be>
 800261c:	e036      	b.n	800268c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800261e:	4b1f      	ldr	r3, [pc, #124]	; (800269c <HAL_RCC_OscConfig+0x65c>)
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002624:	f7ff fa56 	bl	8001ad4 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800262c:	f7ff fa52 	bl	8001ad4 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e027      	b.n	800268e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800263e:	4b16      	ldr	r3, [pc, #88]	; (8002698 <HAL_RCC_OscConfig+0x658>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1f0      	bne.n	800262c <HAL_RCC_OscConfig+0x5ec>
 800264a:	e01f      	b.n	800268c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	2b01      	cmp	r3, #1
 8002652:	d101      	bne.n	8002658 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e01a      	b.n	800268e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002658:	4b0f      	ldr	r3, [pc, #60]	; (8002698 <HAL_RCC_OscConfig+0x658>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002668:	429a      	cmp	r2, r3
 800266a:	d10d      	bne.n	8002688 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002676:	429a      	cmp	r2, r3
 8002678:	d106      	bne.n	8002688 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002684:	429a      	cmp	r2, r3
 8002686:	d001      	beq.n	800268c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e000      	b.n	800268e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3720      	adds	r7, #32
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40023800 	.word	0x40023800
 800269c:	42470060 	.word	0x42470060

080026a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e11a      	b.n	80028ea <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026b4:	4b8f      	ldr	r3, [pc, #572]	; (80028f4 <HAL_RCC_ClockConfig+0x254>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d919      	bls.n	80026f6 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d105      	bne.n	80026d4 <HAL_RCC_ClockConfig+0x34>
 80026c8:	4b8a      	ldr	r3, [pc, #552]	; (80028f4 <HAL_RCC_ClockConfig+0x254>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a89      	ldr	r2, [pc, #548]	; (80028f4 <HAL_RCC_ClockConfig+0x254>)
 80026ce:	f043 0304 	orr.w	r3, r3, #4
 80026d2:	6013      	str	r3, [r2, #0]
 80026d4:	4b87      	ldr	r3, [pc, #540]	; (80028f4 <HAL_RCC_ClockConfig+0x254>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f023 0201 	bic.w	r2, r3, #1
 80026dc:	4985      	ldr	r1, [pc, #532]	; (80028f4 <HAL_RCC_ClockConfig+0x254>)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e4:	4b83      	ldr	r3, [pc, #524]	; (80028f4 <HAL_RCC_ClockConfig+0x254>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d001      	beq.n	80026f6 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e0f9      	b.n	80028ea <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d008      	beq.n	8002714 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002702:	4b7d      	ldr	r3, [pc, #500]	; (80028f8 <HAL_RCC_ClockConfig+0x258>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	497a      	ldr	r1, [pc, #488]	; (80028f8 <HAL_RCC_ClockConfig+0x258>)
 8002710:	4313      	orrs	r3, r2
 8002712:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b00      	cmp	r3, #0
 800271e:	f000 808e 	beq.w	800283e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2b02      	cmp	r3, #2
 8002728:	d107      	bne.n	800273a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800272a:	4b73      	ldr	r3, [pc, #460]	; (80028f8 <HAL_RCC_ClockConfig+0x258>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d121      	bne.n	800277a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e0d7      	b.n	80028ea <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b03      	cmp	r3, #3
 8002740:	d107      	bne.n	8002752 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002742:	4b6d      	ldr	r3, [pc, #436]	; (80028f8 <HAL_RCC_ClockConfig+0x258>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d115      	bne.n	800277a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e0cb      	b.n	80028ea <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d107      	bne.n	800276a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800275a:	4b67      	ldr	r3, [pc, #412]	; (80028f8 <HAL_RCC_ClockConfig+0x258>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d109      	bne.n	800277a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e0bf      	b.n	80028ea <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800276a:	4b63      	ldr	r3, [pc, #396]	; (80028f8 <HAL_RCC_ClockConfig+0x258>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e0b7      	b.n	80028ea <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800277a:	4b5f      	ldr	r3, [pc, #380]	; (80028f8 <HAL_RCC_ClockConfig+0x258>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f023 0203 	bic.w	r2, r3, #3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	495c      	ldr	r1, [pc, #368]	; (80028f8 <HAL_RCC_ClockConfig+0x258>)
 8002788:	4313      	orrs	r3, r2
 800278a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800278c:	f7ff f9a2 	bl	8001ad4 <HAL_GetTick>
 8002790:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b02      	cmp	r3, #2
 8002798:	d112      	bne.n	80027c0 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800279a:	e00a      	b.n	80027b2 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800279c:	f7ff f99a 	bl	8001ad4 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e09b      	b.n	80028ea <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80027b2:	4b51      	ldr	r3, [pc, #324]	; (80028f8 <HAL_RCC_ClockConfig+0x258>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 030c 	and.w	r3, r3, #12
 80027ba:	2b08      	cmp	r3, #8
 80027bc:	d1ee      	bne.n	800279c <HAL_RCC_ClockConfig+0xfc>
 80027be:	e03e      	b.n	800283e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	2b03      	cmp	r3, #3
 80027c6:	d112      	bne.n	80027ee <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027c8:	e00a      	b.n	80027e0 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ca:	f7ff f983 	bl	8001ad4 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d8:	4293      	cmp	r3, r2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e084      	b.n	80028ea <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027e0:	4b45      	ldr	r3, [pc, #276]	; (80028f8 <HAL_RCC_ClockConfig+0x258>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f003 030c 	and.w	r3, r3, #12
 80027e8:	2b0c      	cmp	r3, #12
 80027ea:	d1ee      	bne.n	80027ca <HAL_RCC_ClockConfig+0x12a>
 80027ec:	e027      	b.n	800283e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d11d      	bne.n	8002832 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80027f6:	e00a      	b.n	800280e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f8:	f7ff f96c 	bl	8001ad4 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	f241 3288 	movw	r2, #5000	; 0x1388
 8002806:	4293      	cmp	r3, r2
 8002808:	d901      	bls.n	800280e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e06d      	b.n	80028ea <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800280e:	4b3a      	ldr	r3, [pc, #232]	; (80028f8 <HAL_RCC_ClockConfig+0x258>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 030c 	and.w	r3, r3, #12
 8002816:	2b04      	cmp	r3, #4
 8002818:	d1ee      	bne.n	80027f8 <HAL_RCC_ClockConfig+0x158>
 800281a:	e010      	b.n	800283e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800281c:	f7ff f95a 	bl	8001ad4 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	f241 3288 	movw	r2, #5000	; 0x1388
 800282a:	4293      	cmp	r3, r2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e05b      	b.n	80028ea <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002832:	4b31      	ldr	r3, [pc, #196]	; (80028f8 <HAL_RCC_ClockConfig+0x258>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 030c 	and.w	r3, r3, #12
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1ee      	bne.n	800281c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800283e:	4b2d      	ldr	r3, [pc, #180]	; (80028f4 <HAL_RCC_ClockConfig+0x254>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	429a      	cmp	r2, r3
 800284a:	d219      	bcs.n	8002880 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d105      	bne.n	800285e <HAL_RCC_ClockConfig+0x1be>
 8002852:	4b28      	ldr	r3, [pc, #160]	; (80028f4 <HAL_RCC_ClockConfig+0x254>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a27      	ldr	r2, [pc, #156]	; (80028f4 <HAL_RCC_ClockConfig+0x254>)
 8002858:	f043 0304 	orr.w	r3, r3, #4
 800285c:	6013      	str	r3, [r2, #0]
 800285e:	4b25      	ldr	r3, [pc, #148]	; (80028f4 <HAL_RCC_ClockConfig+0x254>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f023 0201 	bic.w	r2, r3, #1
 8002866:	4923      	ldr	r1, [pc, #140]	; (80028f4 <HAL_RCC_ClockConfig+0x254>)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	4313      	orrs	r3, r2
 800286c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800286e:	4b21      	ldr	r3, [pc, #132]	; (80028f4 <HAL_RCC_ClockConfig+0x254>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	429a      	cmp	r2, r3
 800287a:	d001      	beq.n	8002880 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e034      	b.n	80028ea <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	2b00      	cmp	r3, #0
 800288a:	d008      	beq.n	800289e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800288c:	4b1a      	ldr	r3, [pc, #104]	; (80028f8 <HAL_RCC_ClockConfig+0x258>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	4917      	ldr	r1, [pc, #92]	; (80028f8 <HAL_RCC_ClockConfig+0x258>)
 800289a:	4313      	orrs	r3, r2
 800289c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0308 	and.w	r3, r3, #8
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d009      	beq.n	80028be <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028aa:	4b13      	ldr	r3, [pc, #76]	; (80028f8 <HAL_RCC_ClockConfig+0x258>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	490f      	ldr	r1, [pc, #60]	; (80028f8 <HAL_RCC_ClockConfig+0x258>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028be:	f000 f823 	bl	8002908 <HAL_RCC_GetSysClockFreq>
 80028c2:	4601      	mov	r1, r0
 80028c4:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <HAL_RCC_ClockConfig+0x258>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	091b      	lsrs	r3, r3, #4
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	4a0b      	ldr	r2, [pc, #44]	; (80028fc <HAL_RCC_ClockConfig+0x25c>)
 80028d0:	5cd3      	ldrb	r3, [r2, r3]
 80028d2:	fa21 f303 	lsr.w	r3, r1, r3
 80028d6:	4a0a      	ldr	r2, [pc, #40]	; (8002900 <HAL_RCC_ClockConfig+0x260>)
 80028d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80028da:	4b0a      	ldr	r3, [pc, #40]	; (8002904 <HAL_RCC_ClockConfig+0x264>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff f8ac 	bl	8001a3c <HAL_InitTick>
 80028e4:	4603      	mov	r3, r0
 80028e6:	72fb      	strb	r3, [r7, #11]

  return status;
 80028e8:	7afb      	ldrb	r3, [r7, #11]
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40023c00 	.word	0x40023c00
 80028f8:	40023800 	.word	0x40023800
 80028fc:	08006300 	.word	0x08006300
 8002900:	20000004 	.word	0x20000004
 8002904:	20000008 	.word	0x20000008

08002908 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002908:	b480      	push	{r7}
 800290a:	b087      	sub	sp, #28
 800290c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800290e:	4b26      	ldr	r3, [pc, #152]	; (80029a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f003 030c 	and.w	r3, r3, #12
 800291a:	2b08      	cmp	r3, #8
 800291c:	d006      	beq.n	800292c <HAL_RCC_GetSysClockFreq+0x24>
 800291e:	2b0c      	cmp	r3, #12
 8002920:	d007      	beq.n	8002932 <HAL_RCC_GetSysClockFreq+0x2a>
 8002922:	2b04      	cmp	r3, #4
 8002924:	d12c      	bne.n	8002980 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002926:	4b21      	ldr	r3, [pc, #132]	; (80029ac <HAL_RCC_GetSysClockFreq+0xa4>)
 8002928:	613b      	str	r3, [r7, #16]
      break;
 800292a:	e037      	b.n	800299c <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800292c:	4b20      	ldr	r3, [pc, #128]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xa8>)
 800292e:	613b      	str	r3, [r7, #16]
      break;
 8002930:	e034      	b.n	800299c <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	0c9b      	lsrs	r3, r3, #18
 8002936:	f003 030f 	and.w	r3, r3, #15
 800293a:	4a1e      	ldr	r2, [pc, #120]	; (80029b4 <HAL_RCC_GetSysClockFreq+0xac>)
 800293c:	5cd3      	ldrb	r3, [r2, r3]
 800293e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	0d9b      	lsrs	r3, r3, #22
 8002944:	f003 0303 	and.w	r3, r3, #3
 8002948:	3301      	adds	r3, #1
 800294a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800294c:	4b16      	ldr	r3, [pc, #88]	; (80029a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d008      	beq.n	800296a <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	4a15      	ldr	r2, [pc, #84]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xa8>)
 800295c:	fb02 f203 	mul.w	r2, r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	fbb2 f3f3 	udiv	r3, r2, r3
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	e007      	b.n	800297a <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	4a0f      	ldr	r2, [pc, #60]	; (80029ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800296e:	fb02 f203 	mul.w	r2, r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	fbb2 f3f3 	udiv	r3, r2, r3
 8002978:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	613b      	str	r3, [r7, #16]
      break;
 800297e:	e00d      	b.n	800299c <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002980:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	0b5b      	lsrs	r3, r3, #13
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	3301      	adds	r3, #1
 8002990:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	613b      	str	r3, [r7, #16]
      break;
 800299a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800299c:	693b      	ldr	r3, [r7, #16]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	371c      	adds	r7, #28
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr
 80029a8:	40023800 	.word	0x40023800
 80029ac:	00f42400 	.word	0x00f42400
 80029b0:	007a1200 	.word	0x007a1200
 80029b4:	080062f4 	.word	0x080062f4

080029b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029bc:	4b02      	ldr	r3, [pc, #8]	; (80029c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80029be:	681b      	ldr	r3, [r3, #0]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr
 80029c8:	20000004 	.word	0x20000004

080029cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029d0:	f7ff fff2 	bl	80029b8 <HAL_RCC_GetHCLKFreq>
 80029d4:	4601      	mov	r1, r0
 80029d6:	4b05      	ldr	r3, [pc, #20]	; (80029ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	0a1b      	lsrs	r3, r3, #8
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	4a03      	ldr	r2, [pc, #12]	; (80029f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029e2:	5cd3      	ldrb	r3, [r2, r3]
 80029e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40023800 	.word	0x40023800
 80029f0:	08006310 	.word	0x08006310

080029f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029f8:	f7ff ffde 	bl	80029b8 <HAL_RCC_GetHCLKFreq>
 80029fc:	4601      	mov	r1, r0
 80029fe:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	0adb      	lsrs	r3, r3, #11
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	4a03      	ldr	r2, [pc, #12]	; (8002a18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a0a:	5cd3      	ldrb	r3, [r2, r3]
 8002a0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40023800 	.word	0x40023800
 8002a18:	08006310 	.word	0x08006310

08002a1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b087      	sub	sp, #28
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a24:	2300      	movs	r3, #0
 8002a26:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002a28:	4b29      	ldr	r3, [pc, #164]	; (8002ad0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d12c      	bne.n	8002a8e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a34:	4b26      	ldr	r3, [pc, #152]	; (8002ad0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d005      	beq.n	8002a4c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002a40:	4b24      	ldr	r3, [pc, #144]	; (8002ad4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002a48:	617b      	str	r3, [r7, #20]
 8002a4a:	e016      	b.n	8002a7a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a4c:	4b20      	ldr	r3, [pc, #128]	; (8002ad0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a50:	4a1f      	ldr	r2, [pc, #124]	; (8002ad0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a56:	6253      	str	r3, [r2, #36]	; 0x24
 8002a58:	4b1d      	ldr	r3, [pc, #116]	; (8002ad0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002a64:	4b1b      	ldr	r3, [pc, #108]	; (8002ad4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002a6c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a6e:	4b18      	ldr	r3, [pc, #96]	; (8002ad0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	4a17      	ldr	r2, [pc, #92]	; (8002ad0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002a74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a78:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002a80:	d105      	bne.n	8002a8e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002a88:	d101      	bne.n	8002a8e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d105      	bne.n	8002aa0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002a94:	4b10      	ldr	r3, [pc, #64]	; (8002ad8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a0f      	ldr	r2, [pc, #60]	; (8002ad8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a9a:	f043 0304 	orr.w	r3, r3, #4
 8002a9e:	6013      	str	r3, [r2, #0]
 8002aa0:	4b0d      	ldr	r3, [pc, #52]	; (8002ad8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f023 0201 	bic.w	r2, r3, #1
 8002aa8:	490b      	ldr	r1, [pc, #44]	; (8002ad8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ab0:	4b09      	ldr	r3, [pc, #36]	; (8002ad8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d001      	beq.n	8002ac2 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e000      	b.n	8002ac4 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	371c      	adds	r7, #28
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bc80      	pop	{r7}
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	40007000 	.word	0x40007000
 8002ad8:	40023c00 	.word	0x40023c00

08002adc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e056      	b.n	8002b9c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d106      	bne.n	8002b0e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f7fe fe3d 	bl	8001788 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2202      	movs	r2, #2
 8002b12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b24:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	431a      	orrs	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	431a      	orrs	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	69db      	ldr	r3, [r3, #28]
 8002b50:	431a      	orrs	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	ea42 0103 	orr.w	r1, r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	430a      	orrs	r2, r1
 8002b64:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	0c1b      	lsrs	r3, r3, #16
 8002b6c:	f003 0104 	and.w	r1, r3, #4
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	69da      	ldr	r2, [r3, #28]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b8a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b088      	sub	sp, #32
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	603b      	str	r3, [r7, #0]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d101      	bne.n	8002bc6 <HAL_SPI_Transmit+0x22>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e11e      	b.n	8002e04 <HAL_SPI_Transmit+0x260>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bce:	f7fe ff81 	bl	8001ad4 <HAL_GetTick>
 8002bd2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002bd4:	88fb      	ldrh	r3, [r7, #6]
 8002bd6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d002      	beq.n	8002bea <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002be4:	2302      	movs	r3, #2
 8002be6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002be8:	e103      	b.n	8002df2 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d002      	beq.n	8002bf6 <HAL_SPI_Transmit+0x52>
 8002bf0:	88fb      	ldrh	r3, [r7, #6]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d102      	bne.n	8002bfc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002bfa:	e0fa      	b.n	8002df2 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2203      	movs	r2, #3
 8002c00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	88fa      	ldrh	r2, [r7, #6]
 8002c14:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	88fa      	ldrh	r2, [r7, #6]
 8002c1a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c42:	d107      	bne.n	8002c54 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c52:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5e:	2b40      	cmp	r3, #64	; 0x40
 8002c60:	d007      	beq.n	8002c72 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c7a:	d14b      	bne.n	8002d14 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d002      	beq.n	8002c8a <HAL_SPI_Transmit+0xe6>
 8002c84:	8afb      	ldrh	r3, [r7, #22]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d13e      	bne.n	8002d08 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	881a      	ldrh	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	1c9a      	adds	r2, r3, #2
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002cae:	e02b      	b.n	8002d08 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d112      	bne.n	8002ce4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	881a      	ldrh	r2, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	1c9a      	adds	r2, r3, #2
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	86da      	strh	r2, [r3, #54]	; 0x36
 8002ce2:	e011      	b.n	8002d08 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ce4:	f7fe fef6 	bl	8001ad4 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d803      	bhi.n	8002cfc <HAL_SPI_Transmit+0x158>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cfa:	d102      	bne.n	8002d02 <HAL_SPI_Transmit+0x15e>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d102      	bne.n	8002d08 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d06:	e074      	b.n	8002df2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1ce      	bne.n	8002cb0 <HAL_SPI_Transmit+0x10c>
 8002d12:	e04c      	b.n	8002dae <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d002      	beq.n	8002d22 <HAL_SPI_Transmit+0x17e>
 8002d1c:	8afb      	ldrh	r3, [r7, #22]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d140      	bne.n	8002da4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	330c      	adds	r3, #12
 8002d2c:	7812      	ldrb	r2, [r2, #0]
 8002d2e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d34:	1c5a      	adds	r2, r3, #1
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	3b01      	subs	r3, #1
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002d48:	e02c      	b.n	8002da4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d113      	bne.n	8002d80 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	330c      	adds	r3, #12
 8002d62:	7812      	ldrb	r2, [r2, #0]
 8002d64:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6a:	1c5a      	adds	r2, r3, #1
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	3b01      	subs	r3, #1
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d7e:	e011      	b.n	8002da4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d80:	f7fe fea8 	bl	8001ad4 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d803      	bhi.n	8002d98 <HAL_SPI_Transmit+0x1f4>
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d96:	d102      	bne.n	8002d9e <HAL_SPI_Transmit+0x1fa>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d102      	bne.n	8002da4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002da2:	e026      	b.n	8002df2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1cd      	bne.n	8002d4a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	6839      	ldr	r1, [r7, #0]
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f000 fa43 	bl	800323e <SPI_EndRxTxTransaction>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d002      	beq.n	8002dc4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2220      	movs	r2, #32
 8002dc2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10a      	bne.n	8002de2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002dcc:	2300      	movs	r3, #0
 8002dce:	613b      	str	r3, [r7, #16]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	613b      	str	r3, [r7, #16]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	613b      	str	r3, [r7, #16]
 8002de0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d002      	beq.n	8002df0 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	77fb      	strb	r3, [r7, #31]
 8002dee:	e000      	b.n	8002df2 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002df0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e02:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3720      	adds	r7, #32
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b08c      	sub	sp, #48	; 0x30
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
 8002e18:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d101      	bne.n	8002e32 <HAL_SPI_TransmitReceive+0x26>
 8002e2e:	2302      	movs	r3, #2
 8002e30:	e18a      	b.n	8003148 <HAL_SPI_TransmitReceive+0x33c>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e3a:	f7fe fe4b 	bl	8001ad4 <HAL_GetTick>
 8002e3e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002e50:	887b      	ldrh	r3, [r7, #2]
 8002e52:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d00f      	beq.n	8002e7c <HAL_SPI_TransmitReceive+0x70>
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e62:	d107      	bne.n	8002e74 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d103      	bne.n	8002e74 <HAL_SPI_TransmitReceive+0x68>
 8002e6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d003      	beq.n	8002e7c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002e74:	2302      	movs	r3, #2
 8002e76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e7a:	e15b      	b.n	8003134 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d005      	beq.n	8002e8e <HAL_SPI_TransmitReceive+0x82>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d002      	beq.n	8002e8e <HAL_SPI_TransmitReceive+0x82>
 8002e88:	887b      	ldrh	r3, [r7, #2]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d103      	bne.n	8002e96 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e94:	e14e      	b.n	8003134 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d003      	beq.n	8002eaa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2205      	movs	r2, #5
 8002ea6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	887a      	ldrh	r2, [r7, #2]
 8002eba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	887a      	ldrh	r2, [r7, #2]
 8002ec0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	68ba      	ldr	r2, [r7, #8]
 8002ec6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	887a      	ldrh	r2, [r7, #2]
 8002ecc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	887a      	ldrh	r2, [r7, #2]
 8002ed2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eea:	2b40      	cmp	r3, #64	; 0x40
 8002eec:	d007      	beq.n	8002efe <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002efc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f06:	d178      	bne.n	8002ffa <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d002      	beq.n	8002f16 <HAL_SPI_TransmitReceive+0x10a>
 8002f10:	8b7b      	ldrh	r3, [r7, #26]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d166      	bne.n	8002fe4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	881a      	ldrh	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	1c9a      	adds	r2, r3, #2
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	3b01      	subs	r3, #1
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f3a:	e053      	b.n	8002fe4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d11b      	bne.n	8002f82 <HAL_SPI_TransmitReceive+0x176>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d016      	beq.n	8002f82 <HAL_SPI_TransmitReceive+0x176>
 8002f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d113      	bne.n	8002f82 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	881a      	ldrh	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	1c9a      	adds	r2, r3, #2
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	3b01      	subs	r3, #1
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d119      	bne.n	8002fc4 <HAL_SPI_TransmitReceive+0x1b8>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d014      	beq.n	8002fc4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68da      	ldr	r2, [r3, #12]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa4:	b292      	uxth	r2, r2
 8002fa6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fac:	1c9a      	adds	r2, r3, #2
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002fc4:	f7fe fd86 	bl	8001ad4 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d807      	bhi.n	8002fe4 <HAL_SPI_TransmitReceive+0x1d8>
 8002fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fda:	d003      	beq.n	8002fe4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002fe2:	e0a7      	b.n	8003134 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1a6      	bne.n	8002f3c <HAL_SPI_TransmitReceive+0x130>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1a1      	bne.n	8002f3c <HAL_SPI_TransmitReceive+0x130>
 8002ff8:	e07c      	b.n	80030f4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d002      	beq.n	8003008 <HAL_SPI_TransmitReceive+0x1fc>
 8003002:	8b7b      	ldrh	r3, [r7, #26]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d16b      	bne.n	80030e0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	330c      	adds	r3, #12
 8003012:	7812      	ldrb	r2, [r2, #0]
 8003014:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301a:	1c5a      	adds	r2, r3, #1
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003024:	b29b      	uxth	r3, r3
 8003026:	3b01      	subs	r3, #1
 8003028:	b29a      	uxth	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800302e:	e057      	b.n	80030e0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b02      	cmp	r3, #2
 800303c:	d11c      	bne.n	8003078 <HAL_SPI_TransmitReceive+0x26c>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003042:	b29b      	uxth	r3, r3
 8003044:	2b00      	cmp	r3, #0
 8003046:	d017      	beq.n	8003078 <HAL_SPI_TransmitReceive+0x26c>
 8003048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800304a:	2b01      	cmp	r3, #1
 800304c:	d114      	bne.n	8003078 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	330c      	adds	r3, #12
 8003058:	7812      	ldrb	r2, [r2, #0]
 800305a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003060:	1c5a      	adds	r2, r3, #1
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800306a:	b29b      	uxth	r3, r3
 800306c:	3b01      	subs	r3, #1
 800306e:	b29a      	uxth	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003074:	2300      	movs	r3, #0
 8003076:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b01      	cmp	r3, #1
 8003084:	d119      	bne.n	80030ba <HAL_SPI_TransmitReceive+0x2ae>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800308a:	b29b      	uxth	r3, r3
 800308c:	2b00      	cmp	r3, #0
 800308e:	d014      	beq.n	80030ba <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68da      	ldr	r2, [r3, #12]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309a:	b2d2      	uxtb	r2, r2
 800309c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a2:	1c5a      	adds	r2, r3, #1
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	3b01      	subs	r3, #1
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80030b6:	2301      	movs	r3, #1
 80030b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80030ba:	f7fe fd0b 	bl	8001ad4 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d803      	bhi.n	80030d2 <HAL_SPI_TransmitReceive+0x2c6>
 80030ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d0:	d102      	bne.n	80030d8 <HAL_SPI_TransmitReceive+0x2cc>
 80030d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d103      	bne.n	80030e0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80030de:	e029      	b.n	8003134 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1a2      	bne.n	8003030 <HAL_SPI_TransmitReceive+0x224>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d19d      	bne.n	8003030 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f000 f8a0 	bl	800323e <SPI_EndRxTxTransaction>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d006      	beq.n	8003112 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2220      	movs	r2, #32
 800310e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003110:	e010      	b.n	8003134 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10b      	bne.n	8003132 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800311a:	2300      	movs	r3, #0
 800311c:	617b      	str	r3, [r7, #20]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	617b      	str	r3, [r7, #20]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	617b      	str	r3, [r7, #20]
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	e000      	b.n	8003134 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003132:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003144:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003148:	4618      	mov	r0, r3
 800314a:	3730      	adds	r7, #48	; 0x30
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800315e:	b2db      	uxtb	r3, r3
}
 8003160:	4618      	mov	r0, r3
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	bc80      	pop	{r7}
 8003168:	4770      	bx	lr

0800316a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b084      	sub	sp, #16
 800316e:	af00      	add	r7, sp, #0
 8003170:	60f8      	str	r0, [r7, #12]
 8003172:	60b9      	str	r1, [r7, #8]
 8003174:	603b      	str	r3, [r7, #0]
 8003176:	4613      	mov	r3, r2
 8003178:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800317a:	e04c      	b.n	8003216 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003182:	d048      	beq.n	8003216 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003184:	f7fe fca6 	bl	8001ad4 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	429a      	cmp	r2, r3
 8003192:	d902      	bls.n	800319a <SPI_WaitFlagStateUntilTimeout+0x30>
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d13d      	bne.n	8003216 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80031a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031b2:	d111      	bne.n	80031d8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031bc:	d004      	beq.n	80031c8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031c6:	d107      	bne.n	80031d8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031e0:	d10f      	bne.n	8003202 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003200:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e00f      	b.n	8003236 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	4013      	ands	r3, r2
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	429a      	cmp	r2, r3
 8003224:	bf0c      	ite	eq
 8003226:	2301      	moveq	r3, #1
 8003228:	2300      	movne	r3, #0
 800322a:	b2db      	uxtb	r3, r3
 800322c:	461a      	mov	r2, r3
 800322e:	79fb      	ldrb	r3, [r7, #7]
 8003230:	429a      	cmp	r2, r3
 8003232:	d1a3      	bne.n	800317c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b086      	sub	sp, #24
 8003242:	af02      	add	r7, sp, #8
 8003244:	60f8      	str	r0, [r7, #12]
 8003246:	60b9      	str	r1, [r7, #8]
 8003248:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003252:	d112      	bne.n	800327a <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	2200      	movs	r2, #0
 800325c:	2180      	movs	r1, #128	; 0x80
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f7ff ff83 	bl	800316a <SPI_WaitFlagStateUntilTimeout>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d020      	beq.n	80032ac <SPI_EndRxTxTransaction+0x6e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800326e:	f043 0220 	orr.w	r2, r3, #32
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e019      	b.n	80032ae <SPI_EndRxTxTransaction+0x70>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b05      	cmp	r3, #5
 8003284:	d112      	bne.n	80032ac <SPI_EndRxTxTransaction+0x6e>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	2200      	movs	r2, #0
 800328e:	2101      	movs	r1, #1
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f7ff ff6a 	bl	800316a <SPI_WaitFlagStateUntilTimeout>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d007      	beq.n	80032ac <SPI_EndRxTxTransaction+0x6e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a0:	f043 0220 	orr.w	r2, r3, #32
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e000      	b.n	80032ae <SPI_EndRxTxTransaction+0x70>
      }
    }
  }
  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b082      	sub	sp, #8
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e03f      	b.n	8003348 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d106      	bne.n	80032e2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f7fe fa97 	bl	8001810 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2224      	movs	r2, #36	; 0x24
 80032e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68da      	ldr	r2, [r3, #12]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032f8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f90c 	bl	8003518 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	691a      	ldr	r2, [r3, #16]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800330e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	695a      	ldr	r2, [r3, #20]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800331e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68da      	ldr	r2, [r3, #12]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800332e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2220      	movs	r2, #32
 800333a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2220      	movs	r2, #32
 8003342:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b088      	sub	sp, #32
 8003354:	af02      	add	r7, sp, #8
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	603b      	str	r3, [r7, #0]
 800335c:	4613      	mov	r3, r2
 800335e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b20      	cmp	r3, #32
 800336e:	f040 8083 	bne.w	8003478 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d002      	beq.n	800337e <HAL_UART_Transmit+0x2e>
 8003378:	88fb      	ldrh	r3, [r7, #6]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e07b      	b.n	800347a <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003388:	2b01      	cmp	r3, #1
 800338a:	d101      	bne.n	8003390 <HAL_UART_Transmit+0x40>
 800338c:	2302      	movs	r3, #2
 800338e:	e074      	b.n	800347a <HAL_UART_Transmit+0x12a>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2221      	movs	r2, #33	; 0x21
 80033a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80033a6:	f7fe fb95 	bl	8001ad4 <HAL_GetTick>
 80033aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	88fa      	ldrh	r2, [r7, #6]
 80033b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	88fa      	ldrh	r2, [r7, #6]
 80033b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80033b8:	e042      	b.n	8003440 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033be:	b29b      	uxth	r3, r3
 80033c0:	3b01      	subs	r3, #1
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033d0:	d122      	bne.n	8003418 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	2200      	movs	r2, #0
 80033da:	2180      	movs	r1, #128	; 0x80
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f000 f850 	bl	8003482 <UART_WaitOnFlagUntilTimeout>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e046      	b.n	800347a <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	881b      	ldrh	r3, [r3, #0]
 80033f4:	461a      	mov	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033fe:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d103      	bne.n	8003410 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	3302      	adds	r3, #2
 800340c:	60bb      	str	r3, [r7, #8]
 800340e:	e017      	b.n	8003440 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	3301      	adds	r3, #1
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	e013      	b.n	8003440 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	9300      	str	r3, [sp, #0]
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	2200      	movs	r2, #0
 8003420:	2180      	movs	r1, #128	; 0x80
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f000 f82d 	bl	8003482 <UART_WaitOnFlagUntilTimeout>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e023      	b.n	800347a <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	1c5a      	adds	r2, r3, #1
 8003436:	60ba      	str	r2, [r7, #8]
 8003438:	781a      	ldrb	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003444:	b29b      	uxth	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1b7      	bne.n	80033ba <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	2200      	movs	r2, #0
 8003452:	2140      	movs	r1, #64	; 0x40
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f000 f814 	bl	8003482 <UART_WaitOnFlagUntilTimeout>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e00a      	b.n	800347a <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2220      	movs	r2, #32
 8003468:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003474:	2300      	movs	r3, #0
 8003476:	e000      	b.n	800347a <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003478:	2302      	movs	r3, #2
  }
}
 800347a:	4618      	mov	r0, r3
 800347c:	3718      	adds	r7, #24
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b084      	sub	sp, #16
 8003486:	af00      	add	r7, sp, #0
 8003488:	60f8      	str	r0, [r7, #12]
 800348a:	60b9      	str	r1, [r7, #8]
 800348c:	603b      	str	r3, [r7, #0]
 800348e:	4613      	mov	r3, r2
 8003490:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003492:	e02c      	b.n	80034ee <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800349a:	d028      	beq.n	80034ee <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d007      	beq.n	80034b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80034a2:	f7fe fb17 	bl	8001ad4 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d21d      	bcs.n	80034ee <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68da      	ldr	r2, [r3, #12]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80034c0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	695a      	ldr	r2, [r3, #20]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0201 	bic.w	r2, r2, #1
 80034d0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2220      	movs	r2, #32
 80034d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2220      	movs	r2, #32
 80034de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e00f      	b.n	800350e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	4013      	ands	r3, r2
 80034f8:	68ba      	ldr	r2, [r7, #8]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	bf0c      	ite	eq
 80034fe:	2301      	moveq	r3, #1
 8003500:	2300      	movne	r3, #0
 8003502:	b2db      	uxtb	r3, r3
 8003504:	461a      	mov	r2, r3
 8003506:	79fb      	ldrb	r3, [r7, #7]
 8003508:	429a      	cmp	r2, r3
 800350a:	d0c3      	beq.n	8003494 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
	...

08003518 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68da      	ldr	r2, [r3, #12]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689a      	ldr	r2, [r3, #8]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	431a      	orrs	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	431a      	orrs	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	4313      	orrs	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003558:	f023 030c 	bic.w	r3, r3, #12
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	6812      	ldr	r2, [r2, #0]
 8003560:	68f9      	ldr	r1, [r7, #12]
 8003562:	430b      	orrs	r3, r1
 8003564:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	699a      	ldr	r2, [r3, #24]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	69db      	ldr	r3, [r3, #28]
 8003580:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003584:	f040 80a5 	bne.w	80036d2 <UART_SetConfig+0x1ba>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4aa4      	ldr	r2, [pc, #656]	; (8003820 <UART_SetConfig+0x308>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d14f      	bne.n	8003632 <UART_SetConfig+0x11a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003592:	f7ff fa2f 	bl	80029f4 <HAL_RCC_GetPCLK2Freq>
 8003596:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003598:	68ba      	ldr	r2, [r7, #8]
 800359a:	4613      	mov	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	009a      	lsls	r2, r3, #2
 80035a2:	441a      	add	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ae:	4a9d      	ldr	r2, [pc, #628]	; (8003824 <UART_SetConfig+0x30c>)
 80035b0:	fba2 2303 	umull	r2, r3, r2, r3
 80035b4:	095b      	lsrs	r3, r3, #5
 80035b6:	0119      	lsls	r1, r3, #4
 80035b8:	68ba      	ldr	r2, [r7, #8]
 80035ba:	4613      	mov	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	4413      	add	r3, r2
 80035c0:	009a      	lsls	r2, r3, #2
 80035c2:	441a      	add	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80035ce:	4b95      	ldr	r3, [pc, #596]	; (8003824 <UART_SetConfig+0x30c>)
 80035d0:	fba3 0302 	umull	r0, r3, r3, r2
 80035d4:	095b      	lsrs	r3, r3, #5
 80035d6:	2064      	movs	r0, #100	; 0x64
 80035d8:	fb00 f303 	mul.w	r3, r0, r3
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	3332      	adds	r3, #50	; 0x32
 80035e2:	4a90      	ldr	r2, [pc, #576]	; (8003824 <UART_SetConfig+0x30c>)
 80035e4:	fba2 2303 	umull	r2, r3, r2, r3
 80035e8:	095b      	lsrs	r3, r3, #5
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035f0:	4419      	add	r1, r3
 80035f2:	68ba      	ldr	r2, [r7, #8]
 80035f4:	4613      	mov	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4413      	add	r3, r2
 80035fa:	009a      	lsls	r2, r3, #2
 80035fc:	441a      	add	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	fbb2 f2f3 	udiv	r2, r2, r3
 8003608:	4b86      	ldr	r3, [pc, #536]	; (8003824 <UART_SetConfig+0x30c>)
 800360a:	fba3 0302 	umull	r0, r3, r3, r2
 800360e:	095b      	lsrs	r3, r3, #5
 8003610:	2064      	movs	r0, #100	; 0x64
 8003612:	fb00 f303 	mul.w	r3, r0, r3
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	3332      	adds	r3, #50	; 0x32
 800361c:	4a81      	ldr	r2, [pc, #516]	; (8003824 <UART_SetConfig+0x30c>)
 800361e:	fba2 2303 	umull	r2, r3, r2, r3
 8003622:	095b      	lsrs	r3, r3, #5
 8003624:	f003 0207 	and.w	r2, r3, #7
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	440a      	add	r2, r1
 800362e:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003630:	e0f1      	b.n	8003816 <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003632:	f7ff f9cb 	bl	80029cc <HAL_RCC_GetPCLK1Freq>
 8003636:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	4613      	mov	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4413      	add	r3, r2
 8003640:	009a      	lsls	r2, r3, #2
 8003642:	441a      	add	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	fbb2 f3f3 	udiv	r3, r2, r3
 800364e:	4a75      	ldr	r2, [pc, #468]	; (8003824 <UART_SetConfig+0x30c>)
 8003650:	fba2 2303 	umull	r2, r3, r2, r3
 8003654:	095b      	lsrs	r3, r3, #5
 8003656:	0119      	lsls	r1, r3, #4
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	4613      	mov	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	4413      	add	r3, r2
 8003660:	009a      	lsls	r2, r3, #2
 8003662:	441a      	add	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	fbb2 f2f3 	udiv	r2, r2, r3
 800366e:	4b6d      	ldr	r3, [pc, #436]	; (8003824 <UART_SetConfig+0x30c>)
 8003670:	fba3 0302 	umull	r0, r3, r3, r2
 8003674:	095b      	lsrs	r3, r3, #5
 8003676:	2064      	movs	r0, #100	; 0x64
 8003678:	fb00 f303 	mul.w	r3, r0, r3
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	3332      	adds	r3, #50	; 0x32
 8003682:	4a68      	ldr	r2, [pc, #416]	; (8003824 <UART_SetConfig+0x30c>)
 8003684:	fba2 2303 	umull	r2, r3, r2, r3
 8003688:	095b      	lsrs	r3, r3, #5
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003690:	4419      	add	r1, r3
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	4613      	mov	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	4413      	add	r3, r2
 800369a:	009a      	lsls	r2, r3, #2
 800369c:	441a      	add	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80036a8:	4b5e      	ldr	r3, [pc, #376]	; (8003824 <UART_SetConfig+0x30c>)
 80036aa:	fba3 0302 	umull	r0, r3, r3, r2
 80036ae:	095b      	lsrs	r3, r3, #5
 80036b0:	2064      	movs	r0, #100	; 0x64
 80036b2:	fb00 f303 	mul.w	r3, r0, r3
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	3332      	adds	r3, #50	; 0x32
 80036bc:	4a59      	ldr	r2, [pc, #356]	; (8003824 <UART_SetConfig+0x30c>)
 80036be:	fba2 2303 	umull	r2, r3, r2, r3
 80036c2:	095b      	lsrs	r3, r3, #5
 80036c4:	f003 0207 	and.w	r2, r3, #7
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	440a      	add	r2, r1
 80036ce:	609a      	str	r2, [r3, #8]
}
 80036d0:	e0a1      	b.n	8003816 <UART_SetConfig+0x2fe>
    if((huart->Instance == USART1))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a52      	ldr	r2, [pc, #328]	; (8003820 <UART_SetConfig+0x308>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d14e      	bne.n	800377a <UART_SetConfig+0x262>
      pclk = HAL_RCC_GetPCLK2Freq();
 80036dc:	f7ff f98a 	bl	80029f4 <HAL_RCC_GetPCLK2Freq>
 80036e0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	4613      	mov	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	4413      	add	r3, r2
 80036ea:	009a      	lsls	r2, r3, #2
 80036ec:	441a      	add	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f8:	4a4a      	ldr	r2, [pc, #296]	; (8003824 <UART_SetConfig+0x30c>)
 80036fa:	fba2 2303 	umull	r2, r3, r2, r3
 80036fe:	095b      	lsrs	r3, r3, #5
 8003700:	0119      	lsls	r1, r3, #4
 8003702:	68ba      	ldr	r2, [r7, #8]
 8003704:	4613      	mov	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4413      	add	r3, r2
 800370a:	009a      	lsls	r2, r3, #2
 800370c:	441a      	add	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	fbb2 f2f3 	udiv	r2, r2, r3
 8003718:	4b42      	ldr	r3, [pc, #264]	; (8003824 <UART_SetConfig+0x30c>)
 800371a:	fba3 0302 	umull	r0, r3, r3, r2
 800371e:	095b      	lsrs	r3, r3, #5
 8003720:	2064      	movs	r0, #100	; 0x64
 8003722:	fb00 f303 	mul.w	r3, r0, r3
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	011b      	lsls	r3, r3, #4
 800372a:	3332      	adds	r3, #50	; 0x32
 800372c:	4a3d      	ldr	r2, [pc, #244]	; (8003824 <UART_SetConfig+0x30c>)
 800372e:	fba2 2303 	umull	r2, r3, r2, r3
 8003732:	095b      	lsrs	r3, r3, #5
 8003734:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003738:	4419      	add	r1, r3
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	4613      	mov	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4413      	add	r3, r2
 8003742:	009a      	lsls	r2, r3, #2
 8003744:	441a      	add	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003750:	4b34      	ldr	r3, [pc, #208]	; (8003824 <UART_SetConfig+0x30c>)
 8003752:	fba3 0302 	umull	r0, r3, r3, r2
 8003756:	095b      	lsrs	r3, r3, #5
 8003758:	2064      	movs	r0, #100	; 0x64
 800375a:	fb00 f303 	mul.w	r3, r0, r3
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	011b      	lsls	r3, r3, #4
 8003762:	3332      	adds	r3, #50	; 0x32
 8003764:	4a2f      	ldr	r2, [pc, #188]	; (8003824 <UART_SetConfig+0x30c>)
 8003766:	fba2 2303 	umull	r2, r3, r2, r3
 800376a:	095b      	lsrs	r3, r3, #5
 800376c:	f003 020f 	and.w	r2, r3, #15
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	440a      	add	r2, r1
 8003776:	609a      	str	r2, [r3, #8]
}
 8003778:	e04d      	b.n	8003816 <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 800377a:	f7ff f927 	bl	80029cc <HAL_RCC_GetPCLK1Freq>
 800377e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	4613      	mov	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4413      	add	r3, r2
 8003788:	009a      	lsls	r2, r3, #2
 800378a:	441a      	add	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	fbb2 f3f3 	udiv	r3, r2, r3
 8003796:	4a23      	ldr	r2, [pc, #140]	; (8003824 <UART_SetConfig+0x30c>)
 8003798:	fba2 2303 	umull	r2, r3, r2, r3
 800379c:	095b      	lsrs	r3, r3, #5
 800379e:	0119      	lsls	r1, r3, #4
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	4613      	mov	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	4413      	add	r3, r2
 80037a8:	009a      	lsls	r2, r3, #2
 80037aa:	441a      	add	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80037b6:	4b1b      	ldr	r3, [pc, #108]	; (8003824 <UART_SetConfig+0x30c>)
 80037b8:	fba3 0302 	umull	r0, r3, r3, r2
 80037bc:	095b      	lsrs	r3, r3, #5
 80037be:	2064      	movs	r0, #100	; 0x64
 80037c0:	fb00 f303 	mul.w	r3, r0, r3
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	011b      	lsls	r3, r3, #4
 80037c8:	3332      	adds	r3, #50	; 0x32
 80037ca:	4a16      	ldr	r2, [pc, #88]	; (8003824 <UART_SetConfig+0x30c>)
 80037cc:	fba2 2303 	umull	r2, r3, r2, r3
 80037d0:	095b      	lsrs	r3, r3, #5
 80037d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037d6:	4419      	add	r1, r3
 80037d8:	68ba      	ldr	r2, [r7, #8]
 80037da:	4613      	mov	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4413      	add	r3, r2
 80037e0:	009a      	lsls	r2, r3, #2
 80037e2:	441a      	add	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80037ee:	4b0d      	ldr	r3, [pc, #52]	; (8003824 <UART_SetConfig+0x30c>)
 80037f0:	fba3 0302 	umull	r0, r3, r3, r2
 80037f4:	095b      	lsrs	r3, r3, #5
 80037f6:	2064      	movs	r0, #100	; 0x64
 80037f8:	fb00 f303 	mul.w	r3, r0, r3
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	3332      	adds	r3, #50	; 0x32
 8003802:	4a08      	ldr	r2, [pc, #32]	; (8003824 <UART_SetConfig+0x30c>)
 8003804:	fba2 2303 	umull	r2, r3, r2, r3
 8003808:	095b      	lsrs	r3, r3, #5
 800380a:	f003 020f 	and.w	r2, r3, #15
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	440a      	add	r2, r1
 8003814:	609a      	str	r2, [r3, #8]
}
 8003816:	bf00      	nop
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	40013800 	.word	0x40013800
 8003824:	51eb851f 	.word	0x51eb851f

08003828 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800382c:	4904      	ldr	r1, [pc, #16]	; (8003840 <MX_FATFS_Init+0x18>)
 800382e:	4805      	ldr	r0, [pc, #20]	; (8003844 <MX_FATFS_Init+0x1c>)
 8003830:	f002 fcc2 	bl	80061b8 <FATFS_LinkDriver>
 8003834:	4603      	mov	r3, r0
 8003836:	461a      	mov	r2, r3
 8003838:	4b03      	ldr	r3, [pc, #12]	; (8003848 <MX_FATFS_Init+0x20>)
 800383a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800383c:	bf00      	nop
 800383e:	bd80      	pop	{r7, pc}
 8003840:	200006b8 	.word	0x200006b8
 8003844:	20000010 	.word	0x20000010
 8003848:	200006bc 	.word	0x200006bc

0800384c <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003850:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8003852:	4618      	mov	r0, r3
 8003854:	46bd      	mov	sp, r7
 8003856:	bc80      	pop	{r7}
 8003858:	4770      	bx	lr

0800385a <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b082      	sub	sp, #8
 800385e:	af00      	add	r7, sp, #0
 8003860:	4603      	mov	r3, r0
 8003862:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8003864:	79fb      	ldrb	r3, [r7, #7]
 8003866:	4618      	mov	r0, r3
 8003868:	f7fd fa2c 	bl	8000cc4 <SD_disk_initialize>
 800386c:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800386e:	4618      	mov	r0, r3
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b082      	sub	sp, #8
 800387a:	af00      	add	r7, sp, #0
 800387c:	4603      	mov	r3, r0
 800387e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8003880:	79fb      	ldrb	r3, [r7, #7]
 8003882:	4618      	mov	r0, r3
 8003884:	f7fd fb08 	bl	8000e98 <SD_disk_status>
 8003888:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800388a:	4618      	mov	r0, r3
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b084      	sub	sp, #16
 8003896:	af00      	add	r7, sp, #0
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
 800389c:	603b      	str	r3, [r7, #0]
 800389e:	4603      	mov	r3, r0
 80038a0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 80038a2:	7bf8      	ldrb	r0, [r7, #15]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	68b9      	ldr	r1, [r7, #8]
 80038aa:	f7fd fb09 	bl	8000ec0 <SD_disk_read>
 80038ae:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60b9      	str	r1, [r7, #8]
 80038c0:	607a      	str	r2, [r7, #4]
 80038c2:	603b      	str	r3, [r7, #0]
 80038c4:	4603      	mov	r3, r0
 80038c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 80038c8:	7bf8      	ldrb	r0, [r7, #15]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	68b9      	ldr	r1, [r7, #8]
 80038d0:	f7fd fb60 	bl	8000f94 <SD_disk_write>
 80038d4:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b082      	sub	sp, #8
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	4603      	mov	r3, r0
 80038e6:	603a      	str	r2, [r7, #0]
 80038e8:	71fb      	strb	r3, [r7, #7]
 80038ea:	460b      	mov	r3, r1
 80038ec:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 80038ee:	79b9      	ldrb	r1, [r7, #6]
 80038f0:	79fb      	ldrb	r3, [r7, #7]
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7fd fbd1 	bl	800109c <SD_disk_ioctl>
 80038fa:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3708      	adds	r7, #8
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	4603      	mov	r3, r0
 800390c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800390e:	79fb      	ldrb	r3, [r7, #7]
 8003910:	4a08      	ldr	r2, [pc, #32]	; (8003934 <disk_status+0x30>)
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4413      	add	r3, r2
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	79fa      	ldrb	r2, [r7, #7]
 800391c:	4905      	ldr	r1, [pc, #20]	; (8003934 <disk_status+0x30>)
 800391e:	440a      	add	r2, r1
 8003920:	7a12      	ldrb	r2, [r2, #8]
 8003922:	4610      	mov	r0, r2
 8003924:	4798      	blx	r3
 8003926:	4603      	mov	r3, r0
 8003928:	73fb      	strb	r3, [r7, #15]
  return stat;
 800392a:	7bfb      	ldrb	r3, [r7, #15]
}
 800392c:	4618      	mov	r0, r3
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	2000006c 	.word	0x2000006c

08003938 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	4603      	mov	r3, r0
 8003940:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003942:	2300      	movs	r3, #0
 8003944:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003946:	79fb      	ldrb	r3, [r7, #7]
 8003948:	4a0d      	ldr	r2, [pc, #52]	; (8003980 <disk_initialize+0x48>)
 800394a:	5cd3      	ldrb	r3, [r2, r3]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d111      	bne.n	8003974 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003950:	79fb      	ldrb	r3, [r7, #7]
 8003952:	4a0b      	ldr	r2, [pc, #44]	; (8003980 <disk_initialize+0x48>)
 8003954:	2101      	movs	r1, #1
 8003956:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003958:	79fb      	ldrb	r3, [r7, #7]
 800395a:	4a09      	ldr	r2, [pc, #36]	; (8003980 <disk_initialize+0x48>)
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	4413      	add	r3, r2
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	79fa      	ldrb	r2, [r7, #7]
 8003966:	4906      	ldr	r1, [pc, #24]	; (8003980 <disk_initialize+0x48>)
 8003968:	440a      	add	r2, r1
 800396a:	7a12      	ldrb	r2, [r2, #8]
 800396c:	4610      	mov	r0, r2
 800396e:	4798      	blx	r3
 8003970:	4603      	mov	r3, r0
 8003972:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003974:	7bfb      	ldrb	r3, [r7, #15]
}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	2000006c 	.word	0x2000006c

08003984 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003984:	b590      	push	{r4, r7, lr}
 8003986:	b087      	sub	sp, #28
 8003988:	af00      	add	r7, sp, #0
 800398a:	60b9      	str	r1, [r7, #8]
 800398c:	607a      	str	r2, [r7, #4]
 800398e:	603b      	str	r3, [r7, #0]
 8003990:	4603      	mov	r3, r0
 8003992:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003994:	7bfb      	ldrb	r3, [r7, #15]
 8003996:	4a0a      	ldr	r2, [pc, #40]	; (80039c0 <disk_read+0x3c>)
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4413      	add	r3, r2
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	689c      	ldr	r4, [r3, #8]
 80039a0:	7bfb      	ldrb	r3, [r7, #15]
 80039a2:	4a07      	ldr	r2, [pc, #28]	; (80039c0 <disk_read+0x3c>)
 80039a4:	4413      	add	r3, r2
 80039a6:	7a18      	ldrb	r0, [r3, #8]
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	68b9      	ldr	r1, [r7, #8]
 80039ae:	47a0      	blx	r4
 80039b0:	4603      	mov	r3, r0
 80039b2:	75fb      	strb	r3, [r7, #23]
  return res;
 80039b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	371c      	adds	r7, #28
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd90      	pop	{r4, r7, pc}
 80039be:	bf00      	nop
 80039c0:	2000006c 	.word	0x2000006c

080039c4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80039c4:	b590      	push	{r4, r7, lr}
 80039c6:	b087      	sub	sp, #28
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60b9      	str	r1, [r7, #8]
 80039cc:	607a      	str	r2, [r7, #4]
 80039ce:	603b      	str	r3, [r7, #0]
 80039d0:	4603      	mov	r3, r0
 80039d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80039d4:	7bfb      	ldrb	r3, [r7, #15]
 80039d6:	4a0a      	ldr	r2, [pc, #40]	; (8003a00 <disk_write+0x3c>)
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4413      	add	r3, r2
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	68dc      	ldr	r4, [r3, #12]
 80039e0:	7bfb      	ldrb	r3, [r7, #15]
 80039e2:	4a07      	ldr	r2, [pc, #28]	; (8003a00 <disk_write+0x3c>)
 80039e4:	4413      	add	r3, r2
 80039e6:	7a18      	ldrb	r0, [r3, #8]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	68b9      	ldr	r1, [r7, #8]
 80039ee:	47a0      	blx	r4
 80039f0:	4603      	mov	r3, r0
 80039f2:	75fb      	strb	r3, [r7, #23]
  return res;
 80039f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	371c      	adds	r7, #28
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd90      	pop	{r4, r7, pc}
 80039fe:	bf00      	nop
 8003a00:	2000006c 	.word	0x2000006c

08003a04 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	603a      	str	r2, [r7, #0]
 8003a0e:	71fb      	strb	r3, [r7, #7]
 8003a10:	460b      	mov	r3, r1
 8003a12:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003a14:	79fb      	ldrb	r3, [r7, #7]
 8003a16:	4a09      	ldr	r2, [pc, #36]	; (8003a3c <disk_ioctl+0x38>)
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4413      	add	r3, r2
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	79fa      	ldrb	r2, [r7, #7]
 8003a22:	4906      	ldr	r1, [pc, #24]	; (8003a3c <disk_ioctl+0x38>)
 8003a24:	440a      	add	r2, r1
 8003a26:	7a10      	ldrb	r0, [r2, #8]
 8003a28:	79b9      	ldrb	r1, [r7, #6]
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	4798      	blx	r3
 8003a2e:	4603      	mov	r3, r0
 8003a30:	73fb      	strb	r3, [r7, #15]
  return res;
 8003a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	2000006c 	.word	0x2000006c

08003a40 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003a50:	89fb      	ldrh	r3, [r7, #14]
 8003a52:	021b      	lsls	r3, r3, #8
 8003a54:	b21a      	sxth	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	b21b      	sxth	r3, r3
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	b21b      	sxth	r3, r3
 8003a60:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003a62:	89fb      	ldrh	r3, [r7, #14]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3714      	adds	r7, #20
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bc80      	pop	{r7}
 8003a6c:	4770      	bx	lr

08003a6e <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b085      	sub	sp, #20
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3303      	adds	r3, #3
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	021b      	lsls	r3, r3, #8
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	3202      	adds	r2, #2
 8003a86:	7812      	ldrb	r2, [r2, #0]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	021b      	lsls	r3, r3, #8
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	3201      	adds	r2, #1
 8003a94:	7812      	ldrb	r2, [r2, #0]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	021b      	lsls	r3, r3, #8
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	7812      	ldrb	r2, [r2, #0]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	60fb      	str	r3, [r7, #12]
	return rv;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3714      	adds	r7, #20
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bc80      	pop	{r7}
 8003ab0:	4770      	bx	lr

08003ab2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	b083      	sub	sp, #12
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
 8003aba:	460b      	mov	r3, r1
 8003abc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	1c5a      	adds	r2, r3, #1
 8003ac2:	607a      	str	r2, [r7, #4]
 8003ac4:	887a      	ldrh	r2, [r7, #2]
 8003ac6:	b2d2      	uxtb	r2, r2
 8003ac8:	701a      	strb	r2, [r3, #0]
 8003aca:	887b      	ldrh	r3, [r7, #2]
 8003acc:	0a1b      	lsrs	r3, r3, #8
 8003ace:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	1c5a      	adds	r2, r3, #1
 8003ad4:	607a      	str	r2, [r7, #4]
 8003ad6:	887a      	ldrh	r2, [r7, #2]
 8003ad8:	b2d2      	uxtb	r2, r2
 8003ada:	701a      	strb	r2, [r3, #0]
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bc80      	pop	{r7}
 8003ae4:	4770      	bx	lr

08003ae6 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
 8003aee:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	1c5a      	adds	r2, r3, #1
 8003af4:	607a      	str	r2, [r7, #4]
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	b2d2      	uxtb	r2, r2
 8003afa:	701a      	strb	r2, [r3, #0]
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	0a1b      	lsrs	r3, r3, #8
 8003b00:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	1c5a      	adds	r2, r3, #1
 8003b06:	607a      	str	r2, [r7, #4]
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	b2d2      	uxtb	r2, r2
 8003b0c:	701a      	strb	r2, [r3, #0]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	0a1b      	lsrs	r3, r3, #8
 8003b12:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	1c5a      	adds	r2, r3, #1
 8003b18:	607a      	str	r2, [r7, #4]
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	b2d2      	uxtb	r2, r2
 8003b1e:	701a      	strb	r2, [r3, #0]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	0a1b      	lsrs	r3, r3, #8
 8003b24:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	1c5a      	adds	r2, r3, #1
 8003b2a:	607a      	str	r2, [r7, #4]
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	701a      	strb	r2, [r3, #0]
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bc80      	pop	{r7}
 8003b3a:	4770      	bx	lr

08003b3c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003b3c:	b480      	push	{r7}
 8003b3e:	b087      	sub	sp, #28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00d      	beq.n	8003b72 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	1c53      	adds	r3, r2, #1
 8003b5a:	613b      	str	r3, [r7, #16]
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	1c59      	adds	r1, r3, #1
 8003b60:	6179      	str	r1, [r7, #20]
 8003b62:	7812      	ldrb	r2, [r2, #0]
 8003b64:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	607b      	str	r3, [r7, #4]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1f1      	bne.n	8003b56 <mem_cpy+0x1a>
	}
}
 8003b72:	bf00      	nop
 8003b74:	371c      	adds	r7, #28
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bc80      	pop	{r7}
 8003b7a:	4770      	bx	lr

08003b7c <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003b7c:	b480      	push	{r7}
 8003b7e:	b087      	sub	sp, #28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	617a      	str	r2, [r7, #20]
 8003b92:	68ba      	ldr	r2, [r7, #8]
 8003b94:	b2d2      	uxtb	r2, r2
 8003b96:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	607b      	str	r3, [r7, #4]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1f3      	bne.n	8003b8c <mem_set+0x10>
}
 8003ba4:	bf00      	nop
 8003ba6:	371c      	adds	r7, #28
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bc80      	pop	{r7}
 8003bac:	4770      	bx	lr

08003bae <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003bae:	b480      	push	{r7}
 8003bb0:	b089      	sub	sp, #36	; 0x24
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	60f8      	str	r0, [r7, #12]
 8003bb6:	60b9      	str	r1, [r7, #8]
 8003bb8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	61fb      	str	r3, [r7, #28]
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	1c5a      	adds	r2, r3, #1
 8003bca:	61fa      	str	r2, [r7, #28]
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	4619      	mov	r1, r3
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	1c5a      	adds	r2, r3, #1
 8003bd4:	61ba      	str	r2, [r7, #24]
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	1acb      	subs	r3, r1, r3
 8003bda:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	3b01      	subs	r3, #1
 8003be0:	607b      	str	r3, [r7, #4]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d002      	beq.n	8003bee <mem_cmp+0x40>
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d0eb      	beq.n	8003bc6 <mem_cmp+0x18>

	return r;
 8003bee:	697b      	ldr	r3, [r7, #20]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3724      	adds	r7, #36	; 0x24
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bc80      	pop	{r7}
 8003bf8:	4770      	bx	lr

08003bfa <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003bfa:	b480      	push	{r7}
 8003bfc:	b083      	sub	sp, #12
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
 8003c02:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003c04:	e002      	b.n	8003c0c <chk_chr+0x12>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	607b      	str	r3, [r7, #4]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d005      	beq.n	8003c20 <chk_chr+0x26>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d1f2      	bne.n	8003c06 <chk_chr+0xc>
	return *str;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	781b      	ldrb	r3, [r3, #0]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bc80      	pop	{r7}
 8003c2c:	4770      	bx	lr
	...

08003c30 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60bb      	str	r3, [r7, #8]
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	60fb      	str	r3, [r7, #12]
 8003c42:	e029      	b.n	8003c98 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8003c44:	4a26      	ldr	r2, [pc, #152]	; (8003ce0 <chk_lock+0xb0>)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	011b      	lsls	r3, r3, #4
 8003c4a:	4413      	add	r3, r2
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d01d      	beq.n	8003c8e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003c52:	4a23      	ldr	r2, [pc, #140]	; (8003ce0 <chk_lock+0xb0>)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	011b      	lsls	r3, r3, #4
 8003c58:	4413      	add	r3, r2
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d116      	bne.n	8003c92 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8003c64:	4a1e      	ldr	r2, [pc, #120]	; (8003ce0 <chk_lock+0xb0>)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	4413      	add	r3, r2
 8003c6c:	3304      	adds	r3, #4
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d10c      	bne.n	8003c92 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003c78:	4a19      	ldr	r2, [pc, #100]	; (8003ce0 <chk_lock+0xb0>)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	011b      	lsls	r3, r3, #4
 8003c7e:	4413      	add	r3, r2
 8003c80:	3308      	adds	r3, #8
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d102      	bne.n	8003c92 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003c8c:	e007      	b.n	8003c9e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	3301      	adds	r3, #1
 8003c96:	60fb      	str	r3, [r7, #12]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d9d2      	bls.n	8003c44 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d109      	bne.n	8003cb8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d102      	bne.n	8003cb0 <chk_lock+0x80>
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d101      	bne.n	8003cb4 <chk_lock+0x84>
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	e010      	b.n	8003cd6 <chk_lock+0xa6>
 8003cb4:	2312      	movs	r3, #18
 8003cb6:	e00e      	b.n	8003cd6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d108      	bne.n	8003cd0 <chk_lock+0xa0>
 8003cbe:	4a08      	ldr	r2, [pc, #32]	; (8003ce0 <chk_lock+0xb0>)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	011b      	lsls	r3, r3, #4
 8003cc4:	4413      	add	r3, r2
 8003cc6:	330c      	adds	r3, #12
 8003cc8:	881b      	ldrh	r3, [r3, #0]
 8003cca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cce:	d101      	bne.n	8003cd4 <chk_lock+0xa4>
 8003cd0:	2310      	movs	r3, #16
 8003cd2:	e000      	b.n	8003cd6 <chk_lock+0xa6>
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3714      	adds	r7, #20
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bc80      	pop	{r7}
 8003cde:	4770      	bx	lr
 8003ce0:	2000004c 	.word	0x2000004c

08003ce4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003cea:	2300      	movs	r3, #0
 8003cec:	607b      	str	r3, [r7, #4]
 8003cee:	e002      	b.n	8003cf6 <enq_lock+0x12>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	607b      	str	r3, [r7, #4]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d806      	bhi.n	8003d0a <enq_lock+0x26>
 8003cfc:	4a08      	ldr	r2, [pc, #32]	; (8003d20 <enq_lock+0x3c>)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	011b      	lsls	r3, r3, #4
 8003d02:	4413      	add	r3, r2
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1f2      	bne.n	8003cf0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	bf14      	ite	ne
 8003d10:	2301      	movne	r3, #1
 8003d12:	2300      	moveq	r3, #0
 8003d14:	b2db      	uxtb	r3, r3
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bc80      	pop	{r7}
 8003d1e:	4770      	bx	lr
 8003d20:	2000004c 	.word	0x2000004c

08003d24 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003d2e:	2300      	movs	r3, #0
 8003d30:	60fb      	str	r3, [r7, #12]
 8003d32:	e01f      	b.n	8003d74 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003d34:	4a41      	ldr	r2, [pc, #260]	; (8003e3c <inc_lock+0x118>)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	011b      	lsls	r3, r3, #4
 8003d3a:	4413      	add	r3, r2
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d113      	bne.n	8003d6e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8003d46:	4a3d      	ldr	r2, [pc, #244]	; (8003e3c <inc_lock+0x118>)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	011b      	lsls	r3, r3, #4
 8003d4c:	4413      	add	r3, r2
 8003d4e:	3304      	adds	r3, #4
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d109      	bne.n	8003d6e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8003d5a:	4a38      	ldr	r2, [pc, #224]	; (8003e3c <inc_lock+0x118>)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	011b      	lsls	r3, r3, #4
 8003d60:	4413      	add	r3, r2
 8003d62:	3308      	adds	r3, #8
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d006      	beq.n	8003d7c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	3301      	adds	r3, #1
 8003d72:	60fb      	str	r3, [r7, #12]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d9dc      	bls.n	8003d34 <inc_lock+0x10>
 8003d7a:	e000      	b.n	8003d7e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8003d7c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d132      	bne.n	8003dea <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003d84:	2300      	movs	r3, #0
 8003d86:	60fb      	str	r3, [r7, #12]
 8003d88:	e002      	b.n	8003d90 <inc_lock+0x6c>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d806      	bhi.n	8003da4 <inc_lock+0x80>
 8003d96:	4a29      	ldr	r2, [pc, #164]	; (8003e3c <inc_lock+0x118>)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	011b      	lsls	r3, r3, #4
 8003d9c:	4413      	add	r3, r2
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1f2      	bne.n	8003d8a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d101      	bne.n	8003dae <inc_lock+0x8a>
 8003daa:	2300      	movs	r3, #0
 8003dac:	e040      	b.n	8003e30 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	4922      	ldr	r1, [pc, #136]	; (8003e3c <inc_lock+0x118>)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	011b      	lsls	r3, r3, #4
 8003db8:	440b      	add	r3, r1
 8003dba:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	491e      	ldr	r1, [pc, #120]	; (8003e3c <inc_lock+0x118>)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	440b      	add	r3, r1
 8003dc8:	3304      	adds	r3, #4
 8003dca:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	695a      	ldr	r2, [r3, #20]
 8003dd0:	491a      	ldr	r1, [pc, #104]	; (8003e3c <inc_lock+0x118>)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	011b      	lsls	r3, r3, #4
 8003dd6:	440b      	add	r3, r1
 8003dd8:	3308      	adds	r3, #8
 8003dda:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8003ddc:	4a17      	ldr	r2, [pc, #92]	; (8003e3c <inc_lock+0x118>)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	4413      	add	r3, r2
 8003de4:	330c      	adds	r3, #12
 8003de6:	2200      	movs	r2, #0
 8003de8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d009      	beq.n	8003e04 <inc_lock+0xe0>
 8003df0:	4a12      	ldr	r2, [pc, #72]	; (8003e3c <inc_lock+0x118>)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	011b      	lsls	r3, r3, #4
 8003df6:	4413      	add	r3, r2
 8003df8:	330c      	adds	r3, #12
 8003dfa:	881b      	ldrh	r3, [r3, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <inc_lock+0xe0>
 8003e00:	2300      	movs	r3, #0
 8003e02:	e015      	b.n	8003e30 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d108      	bne.n	8003e1c <inc_lock+0xf8>
 8003e0a:	4a0c      	ldr	r2, [pc, #48]	; (8003e3c <inc_lock+0x118>)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	011b      	lsls	r3, r3, #4
 8003e10:	4413      	add	r3, r2
 8003e12:	330c      	adds	r3, #12
 8003e14:	881b      	ldrh	r3, [r3, #0]
 8003e16:	3301      	adds	r3, #1
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	e001      	b.n	8003e20 <inc_lock+0xfc>
 8003e1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e20:	4906      	ldr	r1, [pc, #24]	; (8003e3c <inc_lock+0x118>)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	011b      	lsls	r3, r3, #4
 8003e26:	440b      	add	r3, r1
 8003e28:	330c      	adds	r3, #12
 8003e2a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	3301      	adds	r3, #1
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3714      	adds	r7, #20
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bc80      	pop	{r7}
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	2000004c 	.word	0x2000004c

08003e40 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	607b      	str	r3, [r7, #4]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d825      	bhi.n	8003ea0 <dec_lock+0x60>
		n = Files[i].ctr;
 8003e54:	4a16      	ldr	r2, [pc, #88]	; (8003eb0 <dec_lock+0x70>)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	011b      	lsls	r3, r3, #4
 8003e5a:	4413      	add	r3, r2
 8003e5c:	330c      	adds	r3, #12
 8003e5e:	881b      	ldrh	r3, [r3, #0]
 8003e60:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003e62:	89fb      	ldrh	r3, [r7, #14]
 8003e64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e68:	d101      	bne.n	8003e6e <dec_lock+0x2e>
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8003e6e:	89fb      	ldrh	r3, [r7, #14]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d002      	beq.n	8003e7a <dec_lock+0x3a>
 8003e74:	89fb      	ldrh	r3, [r7, #14]
 8003e76:	3b01      	subs	r3, #1
 8003e78:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003e7a:	4a0d      	ldr	r2, [pc, #52]	; (8003eb0 <dec_lock+0x70>)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	011b      	lsls	r3, r3, #4
 8003e80:	4413      	add	r3, r2
 8003e82:	330c      	adds	r3, #12
 8003e84:	89fa      	ldrh	r2, [r7, #14]
 8003e86:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003e88:	89fb      	ldrh	r3, [r7, #14]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d105      	bne.n	8003e9a <dec_lock+0x5a>
 8003e8e:	4a08      	ldr	r2, [pc, #32]	; (8003eb0 <dec_lock+0x70>)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	011b      	lsls	r3, r3, #4
 8003e94:	4413      	add	r3, r2
 8003e96:	2200      	movs	r2, #0
 8003e98:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	737b      	strb	r3, [r7, #13]
 8003e9e:	e001      	b.n	8003ea4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003ea4:	7b7b      	ldrb	r3, [r7, #13]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bc80      	pop	{r7}
 8003eae:	4770      	bx	lr
 8003eb0:	2000004c 	.word	0x2000004c

08003eb4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	60fb      	str	r3, [r7, #12]
 8003ec0:	e010      	b.n	8003ee4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003ec2:	4a0c      	ldr	r2, [pc, #48]	; (8003ef4 <clear_lock+0x40>)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	011b      	lsls	r3, r3, #4
 8003ec8:	4413      	add	r3, r2
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d105      	bne.n	8003ede <clear_lock+0x2a>
 8003ed2:	4a08      	ldr	r2, [pc, #32]	; (8003ef4 <clear_lock+0x40>)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	4413      	add	r3, r2
 8003eda:	2200      	movs	r2, #0
 8003edc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	60fb      	str	r3, [r7, #12]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d9eb      	bls.n	8003ec2 <clear_lock+0xe>
	}
}
 8003eea:	bf00      	nop
 8003eec:	3714      	adds	r7, #20
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bc80      	pop	{r7}
 8003ef2:	4770      	bx	lr
 8003ef4:	2000004c 	.word	0x2000004c

08003ef8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003f00:	2300      	movs	r3, #0
 8003f02:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	78db      	ldrb	r3, [r3, #3]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d034      	beq.n	8003f76 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f10:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	7858      	ldrb	r0, [r3, #1]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	f7ff fd50 	bl	80039c4 <disk_write>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d002      	beq.n	8003f30 <sync_window+0x38>
			res = FR_DISK_ERR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	73fb      	strb	r3, [r7, #15]
 8003f2e:	e022      	b.n	8003f76 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	1ad2      	subs	r2, r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d217      	bcs.n	8003f76 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	789b      	ldrb	r3, [r3, #2]
 8003f4a:	613b      	str	r3, [r7, #16]
 8003f4c:	e010      	b.n	8003f70 <sync_window+0x78>
					wsect += fs->fsize;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	4413      	add	r3, r2
 8003f56:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	7858      	ldrb	r0, [r3, #1]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003f62:	2301      	movs	r3, #1
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	f7ff fd2d 	bl	80039c4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	613b      	str	r3, [r7, #16]
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d8eb      	bhi.n	8003f4e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8003f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3718      	adds	r7, #24
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d01b      	beq.n	8003fd0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f7ff ffad 	bl	8003ef8 <sync_window>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003fa2:	7bfb      	ldrb	r3, [r7, #15]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d113      	bne.n	8003fd0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	7858      	ldrb	r0, [r3, #1]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	f7ff fce5 	bl	8003984 <disk_read>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d004      	beq.n	8003fca <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8003fc4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	683a      	ldr	r2, [r7, #0]
 8003fce:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8003fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
	...

08003fdc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f7ff ff87 	bl	8003ef8 <sync_window>
 8003fea:	4603      	mov	r3, r0
 8003fec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003fee:	7bfb      	ldrb	r3, [r7, #15]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d158      	bne.n	80040a6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	2b03      	cmp	r3, #3
 8003ffa:	d148      	bne.n	800408e <sync_fs+0xb2>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	791b      	ldrb	r3, [r3, #4]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d144      	bne.n	800408e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3330      	adds	r3, #48	; 0x30
 8004008:	f44f 7200 	mov.w	r2, #512	; 0x200
 800400c:	2100      	movs	r1, #0
 800400e:	4618      	mov	r0, r3
 8004010:	f7ff fdb4 	bl	8003b7c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3330      	adds	r3, #48	; 0x30
 8004018:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800401c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004020:	4618      	mov	r0, r3
 8004022:	f7ff fd46 	bl	8003ab2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	3330      	adds	r3, #48	; 0x30
 800402a:	4921      	ldr	r1, [pc, #132]	; (80040b0 <sync_fs+0xd4>)
 800402c:	4618      	mov	r0, r3
 800402e:	f7ff fd5a 	bl	8003ae6 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	3330      	adds	r3, #48	; 0x30
 8004036:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800403a:	491e      	ldr	r1, [pc, #120]	; (80040b4 <sync_fs+0xd8>)
 800403c:	4618      	mov	r0, r3
 800403e:	f7ff fd52 	bl	8003ae6 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	3330      	adds	r3, #48	; 0x30
 8004046:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	4619      	mov	r1, r3
 8004050:	4610      	mov	r0, r2
 8004052:	f7ff fd48 	bl	8003ae6 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	3330      	adds	r3, #48	; 0x30
 800405a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	4619      	mov	r1, r3
 8004064:	4610      	mov	r0, r2
 8004066:	f7ff fd3e 	bl	8003ae6 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	69db      	ldr	r3, [r3, #28]
 800406e:	1c5a      	adds	r2, r3, #1
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	7858      	ldrb	r0, [r3, #1]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004082:	2301      	movs	r3, #1
 8004084:	f7ff fc9e 	bl	80039c4 <disk_write>
			fs->fsi_flag = 0;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	785b      	ldrb	r3, [r3, #1]
 8004092:	2200      	movs	r2, #0
 8004094:	2100      	movs	r1, #0
 8004096:	4618      	mov	r0, r3
 8004098:	f7ff fcb4 	bl	8003a04 <disk_ioctl>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <sync_fs+0xca>
 80040a2:	2301      	movs	r3, #1
 80040a4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80040a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	41615252 	.word	0x41615252
 80040b4:	61417272 	.word	0x61417272

080040b8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	3b02      	subs	r3, #2
 80040c6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	3b02      	subs	r3, #2
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d301      	bcc.n	80040d8 <clust2sect+0x20>
 80040d4:	2300      	movs	r3, #0
 80040d6:	e008      	b.n	80040ea <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	895b      	ldrh	r3, [r3, #10]
 80040dc:	461a      	mov	r2, r3
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	fb03 f202 	mul.w	r2, r3, r2
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e8:	4413      	add	r3, r2
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bc80      	pop	{r7}
 80040f2:	4770      	bx	lr

080040f4 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d904      	bls.n	8004114 <get_fat+0x20>
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	429a      	cmp	r2, r3
 8004112:	d302      	bcc.n	800411a <get_fat+0x26>
		val = 1;	/* Internal error */
 8004114:	2301      	movs	r3, #1
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	e08c      	b.n	8004234 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800411a:	f04f 33ff 	mov.w	r3, #4294967295
 800411e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	2b02      	cmp	r3, #2
 8004126:	d045      	beq.n	80041b4 <get_fat+0xc0>
 8004128:	2b03      	cmp	r3, #3
 800412a:	d05d      	beq.n	80041e8 <get_fat+0xf4>
 800412c:	2b01      	cmp	r3, #1
 800412e:	d177      	bne.n	8004220 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	60fb      	str	r3, [r7, #12]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	085b      	lsrs	r3, r3, #1
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	4413      	add	r3, r2
 800413c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	6a1a      	ldr	r2, [r3, #32]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	0a5b      	lsrs	r3, r3, #9
 8004146:	4413      	add	r3, r2
 8004148:	4619      	mov	r1, r3
 800414a:	6938      	ldr	r0, [r7, #16]
 800414c:	f7ff ff18 	bl	8003f80 <move_window>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d167      	bne.n	8004226 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	1c5a      	adds	r2, r3, #1
 800415a:	60fa      	str	r2, [r7, #12]
 800415c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	4413      	add	r3, r2
 8004164:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004168:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	6a1a      	ldr	r2, [r3, #32]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	0a5b      	lsrs	r3, r3, #9
 8004172:	4413      	add	r3, r2
 8004174:	4619      	mov	r1, r3
 8004176:	6938      	ldr	r0, [r7, #16]
 8004178:	f7ff ff02 	bl	8003f80 <move_window>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d153      	bne.n	800422a <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	4413      	add	r3, r2
 800418c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004190:	021b      	lsls	r3, r3, #8
 8004192:	461a      	mov	r2, r3
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	4313      	orrs	r3, r2
 8004198:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d002      	beq.n	80041aa <get_fat+0xb6>
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	091b      	lsrs	r3, r3, #4
 80041a8:	e002      	b.n	80041b0 <get_fat+0xbc>
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041b0:	617b      	str	r3, [r7, #20]
			break;
 80041b2:	e03f      	b.n	8004234 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	6a1a      	ldr	r2, [r3, #32]
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	0a1b      	lsrs	r3, r3, #8
 80041bc:	4413      	add	r3, r2
 80041be:	4619      	mov	r1, r3
 80041c0:	6938      	ldr	r0, [r7, #16]
 80041c2:	f7ff fedd 	bl	8003f80 <move_window>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d130      	bne.n	800422e <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80041da:	4413      	add	r3, r2
 80041dc:	4618      	mov	r0, r3
 80041de:	f7ff fc2f 	bl	8003a40 <ld_word>
 80041e2:	4603      	mov	r3, r0
 80041e4:	617b      	str	r3, [r7, #20]
			break;
 80041e6:	e025      	b.n	8004234 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	6a1a      	ldr	r2, [r3, #32]
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	09db      	lsrs	r3, r3, #7
 80041f0:	4413      	add	r3, r2
 80041f2:	4619      	mov	r1, r3
 80041f4:	6938      	ldr	r0, [r7, #16]
 80041f6:	f7ff fec3 	bl	8003f80 <move_window>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d118      	bne.n	8004232 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800420e:	4413      	add	r3, r2
 8004210:	4618      	mov	r0, r3
 8004212:	f7ff fc2c 	bl	8003a6e <ld_dword>
 8004216:	4603      	mov	r3, r0
 8004218:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800421c:	617b      	str	r3, [r7, #20]
			break;
 800421e:	e009      	b.n	8004234 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004220:	2301      	movs	r3, #1
 8004222:	617b      	str	r3, [r7, #20]
 8004224:	e006      	b.n	8004234 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004226:	bf00      	nop
 8004228:	e004      	b.n	8004234 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800422a:	bf00      	nop
 800422c:	e002      	b.n	8004234 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800422e:	bf00      	nop
 8004230:	e000      	b.n	8004234 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004232:	bf00      	nop
		}
	}

	return val;
 8004234:	697b      	ldr	r3, [r7, #20]
}
 8004236:	4618      	mov	r0, r3
 8004238:	3718      	adds	r7, #24
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800423e:	b590      	push	{r4, r7, lr}
 8004240:	b089      	sub	sp, #36	; 0x24
 8004242:	af00      	add	r7, sp, #0
 8004244:	60f8      	str	r0, [r7, #12]
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800424a:	2302      	movs	r3, #2
 800424c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	2b01      	cmp	r3, #1
 8004252:	f240 80d6 	bls.w	8004402 <put_fat+0x1c4>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	429a      	cmp	r2, r3
 800425e:	f080 80d0 	bcs.w	8004402 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	2b02      	cmp	r3, #2
 8004268:	d073      	beq.n	8004352 <put_fat+0x114>
 800426a:	2b03      	cmp	r3, #3
 800426c:	f000 8091 	beq.w	8004392 <put_fat+0x154>
 8004270:	2b01      	cmp	r3, #1
 8004272:	f040 80c6 	bne.w	8004402 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	61bb      	str	r3, [r7, #24]
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	085b      	lsrs	r3, r3, #1
 800427e:	69ba      	ldr	r2, [r7, #24]
 8004280:	4413      	add	r3, r2
 8004282:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6a1a      	ldr	r2, [r3, #32]
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	0a5b      	lsrs	r3, r3, #9
 800428c:	4413      	add	r3, r2
 800428e:	4619      	mov	r1, r3
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f7ff fe75 	bl	8003f80 <move_window>
 8004296:	4603      	mov	r3, r0
 8004298:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800429a:	7ffb      	ldrb	r3, [r7, #31]
 800429c:	2b00      	cmp	r3, #0
 800429e:	f040 80a9 	bne.w	80043f4 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	1c59      	adds	r1, r3, #1
 80042ac:	61b9      	str	r1, [r7, #24]
 80042ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042b2:	4413      	add	r3, r2
 80042b4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00d      	beq.n	80042dc <put_fat+0x9e>
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	b25b      	sxtb	r3, r3
 80042c6:	f003 030f 	and.w	r3, r3, #15
 80042ca:	b25a      	sxtb	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	011b      	lsls	r3, r3, #4
 80042d2:	b25b      	sxtb	r3, r3
 80042d4:	4313      	orrs	r3, r2
 80042d6:	b25b      	sxtb	r3, r3
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	e001      	b.n	80042e0 <put_fat+0xa2>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2201      	movs	r2, #1
 80042e8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6a1a      	ldr	r2, [r3, #32]
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	0a5b      	lsrs	r3, r3, #9
 80042f2:	4413      	add	r3, r2
 80042f4:	4619      	mov	r1, r3
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f7ff fe42 	bl	8003f80 <move_window>
 80042fc:	4603      	mov	r3, r0
 80042fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004300:	7ffb      	ldrb	r3, [r7, #31]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d178      	bne.n	80043f8 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004312:	4413      	add	r3, r2
 8004314:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b00      	cmp	r3, #0
 800431e:	d003      	beq.n	8004328 <put_fat+0xea>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	091b      	lsrs	r3, r3, #4
 8004324:	b2db      	uxtb	r3, r3
 8004326:	e00e      	b.n	8004346 <put_fat+0x108>
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	b25b      	sxtb	r3, r3
 800432e:	f023 030f 	bic.w	r3, r3, #15
 8004332:	b25a      	sxtb	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	0a1b      	lsrs	r3, r3, #8
 8004338:	b25b      	sxtb	r3, r3
 800433a:	f003 030f 	and.w	r3, r3, #15
 800433e:	b25b      	sxtb	r3, r3
 8004340:	4313      	orrs	r3, r2
 8004342:	b25b      	sxtb	r3, r3
 8004344:	b2db      	uxtb	r3, r3
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2201      	movs	r2, #1
 800434e:	70da      	strb	r2, [r3, #3]
			break;
 8004350:	e057      	b.n	8004402 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6a1a      	ldr	r2, [r3, #32]
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	0a1b      	lsrs	r3, r3, #8
 800435a:	4413      	add	r3, r2
 800435c:	4619      	mov	r1, r3
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f7ff fe0e 	bl	8003f80 <move_window>
 8004364:	4603      	mov	r3, r0
 8004366:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004368:	7ffb      	ldrb	r3, [r7, #31]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d146      	bne.n	80043fc <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800437c:	4413      	add	r3, r2
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	b292      	uxth	r2, r2
 8004382:	4611      	mov	r1, r2
 8004384:	4618      	mov	r0, r3
 8004386:	f7ff fb94 	bl	8003ab2 <st_word>
			fs->wflag = 1;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2201      	movs	r2, #1
 800438e:	70da      	strb	r2, [r3, #3]
			break;
 8004390:	e037      	b.n	8004402 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6a1a      	ldr	r2, [r3, #32]
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	09db      	lsrs	r3, r3, #7
 800439a:	4413      	add	r3, r2
 800439c:	4619      	mov	r1, r3
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f7ff fdee 	bl	8003f80 <move_window>
 80043a4:	4603      	mov	r3, r0
 80043a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80043a8:	7ffb      	ldrb	r3, [r7, #31]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d128      	bne.n	8004400 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80043c2:	4413      	add	r3, r2
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7ff fb52 	bl	8003a6e <ld_dword>
 80043ca:	4603      	mov	r3, r0
 80043cc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80043d0:	4323      	orrs	r3, r4
 80043d2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80043e2:	4413      	add	r3, r2
 80043e4:	6879      	ldr	r1, [r7, #4]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7ff fb7d 	bl	8003ae6 <st_dword>
			fs->wflag = 1;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2201      	movs	r2, #1
 80043f0:	70da      	strb	r2, [r3, #3]
			break;
 80043f2:	e006      	b.n	8004402 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80043f4:	bf00      	nop
 80043f6:	e004      	b.n	8004402 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80043f8:	bf00      	nop
 80043fa:	e002      	b.n	8004402 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80043fc:	bf00      	nop
 80043fe:	e000      	b.n	8004402 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8004400:	bf00      	nop
		}
	}
	return res;
 8004402:	7ffb      	ldrb	r3, [r7, #31]
}
 8004404:	4618      	mov	r0, r3
 8004406:	3724      	adds	r7, #36	; 0x24
 8004408:	46bd      	mov	sp, r7
 800440a:	bd90      	pop	{r4, r7, pc}

0800440c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b088      	sub	sp, #32
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004418:	2300      	movs	r3, #0
 800441a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d904      	bls.n	8004432 <remove_chain+0x26>
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	429a      	cmp	r2, r3
 8004430:	d301      	bcc.n	8004436 <remove_chain+0x2a>
 8004432:	2302      	movs	r3, #2
 8004434:	e04b      	b.n	80044ce <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00c      	beq.n	8004456 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800443c:	f04f 32ff 	mov.w	r2, #4294967295
 8004440:	6879      	ldr	r1, [r7, #4]
 8004442:	69b8      	ldr	r0, [r7, #24]
 8004444:	f7ff fefb 	bl	800423e <put_fat>
 8004448:	4603      	mov	r3, r0
 800444a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800444c:	7ffb      	ldrb	r3, [r7, #31]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <remove_chain+0x4a>
 8004452:	7ffb      	ldrb	r3, [r7, #31]
 8004454:	e03b      	b.n	80044ce <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004456:	68b9      	ldr	r1, [r7, #8]
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f7ff fe4b 	bl	80040f4 <get_fat>
 800445e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d031      	beq.n	80044ca <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d101      	bne.n	8004470 <remove_chain+0x64>
 800446c:	2302      	movs	r3, #2
 800446e:	e02e      	b.n	80044ce <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004476:	d101      	bne.n	800447c <remove_chain+0x70>
 8004478:	2301      	movs	r3, #1
 800447a:	e028      	b.n	80044ce <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800447c:	2200      	movs	r2, #0
 800447e:	68b9      	ldr	r1, [r7, #8]
 8004480:	69b8      	ldr	r0, [r7, #24]
 8004482:	f7ff fedc 	bl	800423e <put_fat>
 8004486:	4603      	mov	r3, r0
 8004488:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800448a:	7ffb      	ldrb	r3, [r7, #31]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d001      	beq.n	8004494 <remove_chain+0x88>
 8004490:	7ffb      	ldrb	r3, [r7, #31]
 8004492:	e01c      	b.n	80044ce <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	691a      	ldr	r2, [r3, #16]
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	3b02      	subs	r3, #2
 800449e:	429a      	cmp	r2, r3
 80044a0:	d20b      	bcs.n	80044ba <remove_chain+0xae>
			fs->free_clst++;
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	1c5a      	adds	r2, r3, #1
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	791b      	ldrb	r3, [r3, #4]
 80044b0:	f043 0301 	orr.w	r3, r3, #1
 80044b4:	b2da      	uxtb	r2, r3
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d3c6      	bcc.n	8004456 <remove_chain+0x4a>
 80044c8:	e000      	b.n	80044cc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80044ca:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3720      	adds	r7, #32
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b088      	sub	sp, #32
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
 80044de:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10d      	bne.n	8004508 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d004      	beq.n	8004502 <create_chain+0x2c>
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d31b      	bcc.n	800453a <create_chain+0x64>
 8004502:	2301      	movs	r3, #1
 8004504:	61bb      	str	r3, [r7, #24]
 8004506:	e018      	b.n	800453a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004508:	6839      	ldr	r1, [r7, #0]
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f7ff fdf2 	bl	80040f4 <get_fat>
 8004510:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d801      	bhi.n	800451c <create_chain+0x46>
 8004518:	2301      	movs	r3, #1
 800451a:	e070      	b.n	80045fe <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004522:	d101      	bne.n	8004528 <create_chain+0x52>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	e06a      	b.n	80045fe <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	695b      	ldr	r3, [r3, #20]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	429a      	cmp	r2, r3
 8004530:	d201      	bcs.n	8004536 <create_chain+0x60>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	e063      	b.n	80045fe <create_chain+0x128>
		scl = clst;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	3301      	adds	r3, #1
 8004542:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	69fa      	ldr	r2, [r7, #28]
 800454a:	429a      	cmp	r2, r3
 800454c:	d307      	bcc.n	800455e <create_chain+0x88>
				ncl = 2;
 800454e:	2302      	movs	r3, #2
 8004550:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004552:	69fa      	ldr	r2, [r7, #28]
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	429a      	cmp	r2, r3
 8004558:	d901      	bls.n	800455e <create_chain+0x88>
 800455a:	2300      	movs	r3, #0
 800455c:	e04f      	b.n	80045fe <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800455e:	69f9      	ldr	r1, [r7, #28]
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f7ff fdc7 	bl	80040f4 <get_fat>
 8004566:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00e      	beq.n	800458c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d003      	beq.n	800457c <create_chain+0xa6>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800457a:	d101      	bne.n	8004580 <create_chain+0xaa>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	e03e      	b.n	80045fe <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004580:	69fa      	ldr	r2, [r7, #28]
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	429a      	cmp	r2, r3
 8004586:	d1da      	bne.n	800453e <create_chain+0x68>
 8004588:	2300      	movs	r3, #0
 800458a:	e038      	b.n	80045fe <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800458c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800458e:	f04f 32ff 	mov.w	r2, #4294967295
 8004592:	69f9      	ldr	r1, [r7, #28]
 8004594:	6938      	ldr	r0, [r7, #16]
 8004596:	f7ff fe52 	bl	800423e <put_fat>
 800459a:	4603      	mov	r3, r0
 800459c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800459e:	7dfb      	ldrb	r3, [r7, #23]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d109      	bne.n	80045b8 <create_chain+0xe2>
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d006      	beq.n	80045b8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80045aa:	69fa      	ldr	r2, [r7, #28]
 80045ac:	6839      	ldr	r1, [r7, #0]
 80045ae:	6938      	ldr	r0, [r7, #16]
 80045b0:	f7ff fe45 	bl	800423e <put_fat>
 80045b4:	4603      	mov	r3, r0
 80045b6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80045b8:	7dfb      	ldrb	r3, [r7, #23]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d116      	bne.n	80045ec <create_chain+0x116>
		fs->last_clst = ncl;
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	69fa      	ldr	r2, [r7, #28]
 80045c2:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	691a      	ldr	r2, [r3, #16]
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	3b02      	subs	r3, #2
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d804      	bhi.n	80045dc <create_chain+0x106>
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	1e5a      	subs	r2, r3, #1
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	791b      	ldrb	r3, [r3, #4]
 80045e0:	f043 0301 	orr.w	r3, r3, #1
 80045e4:	b2da      	uxtb	r2, r3
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	711a      	strb	r2, [r3, #4]
 80045ea:	e007      	b.n	80045fc <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80045ec:	7dfb      	ldrb	r3, [r7, #23]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d102      	bne.n	80045f8 <create_chain+0x122>
 80045f2:	f04f 33ff 	mov.w	r3, #4294967295
 80045f6:	e000      	b.n	80045fa <create_chain+0x124>
 80045f8:	2301      	movs	r3, #1
 80045fa:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80045fc:	69fb      	ldr	r3, [r7, #28]
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3720      	adds	r7, #32
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004606:	b480      	push	{r7}
 8004608:	b087      	sub	sp, #28
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
 800460e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461a:	3304      	adds	r3, #4
 800461c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	0a5b      	lsrs	r3, r3, #9
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	8952      	ldrh	r2, [r2, #10]
 8004626:	fbb3 f3f2 	udiv	r3, r3, r2
 800462a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	1d1a      	adds	r2, r3, #4
 8004630:	613a      	str	r2, [r7, #16]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d101      	bne.n	8004640 <clmt_clust+0x3a>
 800463c:	2300      	movs	r3, #0
 800463e:	e010      	b.n	8004662 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	429a      	cmp	r2, r3
 8004646:	d307      	bcc.n	8004658 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	617b      	str	r3, [r7, #20]
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	3304      	adds	r3, #4
 8004654:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004656:	e7e9      	b.n	800462c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8004658:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	4413      	add	r3, r2
}
 8004662:	4618      	mov	r0, r3
 8004664:	371c      	adds	r7, #28
 8004666:	46bd      	mov	sp, r7
 8004668:	bc80      	pop	{r7}
 800466a:	4770      	bx	lr

0800466c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004682:	d204      	bcs.n	800468e <dir_sdi+0x22>
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	f003 031f 	and.w	r3, r3, #31
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <dir_sdi+0x26>
		return FR_INT_ERR;
 800468e:	2302      	movs	r3, #2
 8004690:	e063      	b.n	800475a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	683a      	ldr	r2, [r7, #0]
 8004696:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d106      	bne.n	80046b2 <dir_sdi+0x46>
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d902      	bls.n	80046b2 <dir_sdi+0x46>
		clst = fs->dirbase;
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10c      	bne.n	80046d2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	095b      	lsrs	r3, r3, #5
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	8912      	ldrh	r2, [r2, #8]
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d301      	bcc.n	80046c8 <dir_sdi+0x5c>
 80046c4:	2302      	movs	r3, #2
 80046c6:	e048      	b.n	800475a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	61da      	str	r2, [r3, #28]
 80046d0:	e029      	b.n	8004726 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	895b      	ldrh	r3, [r3, #10]
 80046d6:	025b      	lsls	r3, r3, #9
 80046d8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80046da:	e019      	b.n	8004710 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6979      	ldr	r1, [r7, #20]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7ff fd07 	bl	80040f4 <get_fat>
 80046e6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ee:	d101      	bne.n	80046f4 <dir_sdi+0x88>
 80046f0:	2301      	movs	r3, #1
 80046f2:	e032      	b.n	800475a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d904      	bls.n	8004704 <dir_sdi+0x98>
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	429a      	cmp	r2, r3
 8004702:	d301      	bcc.n	8004708 <dir_sdi+0x9c>
 8004704:	2302      	movs	r3, #2
 8004706:	e028      	b.n	800475a <dir_sdi+0xee>
			ofs -= csz;
 8004708:	683a      	ldr	r2, [r7, #0]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	429a      	cmp	r2, r3
 8004716:	d2e1      	bcs.n	80046dc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8004718:	6979      	ldr	r1, [r7, #20]
 800471a:	6938      	ldr	r0, [r7, #16]
 800471c:	f7ff fccc 	bl	80040b8 <clust2sect>
 8004720:	4602      	mov	r2, r0
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	69db      	ldr	r3, [r3, #28]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d101      	bne.n	8004738 <dir_sdi+0xcc>
 8004734:	2302      	movs	r3, #2
 8004736:	e010      	b.n	800475a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	69da      	ldr	r2, [r3, #28]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	0a5b      	lsrs	r3, r3, #9
 8004740:	441a      	add	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004752:	441a      	add	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3718      	adds	r7, #24
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b086      	sub	sp, #24
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
 800476a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	3320      	adds	r3, #32
 8004778:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <dir_next+0x28>
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004788:	d301      	bcc.n	800478e <dir_next+0x2c>
 800478a:	2304      	movs	r3, #4
 800478c:	e0aa      	b.n	80048e4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004794:	2b00      	cmp	r3, #0
 8004796:	f040 8098 	bne.w	80048ca <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	1c5a      	adds	r2, r3, #1
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10b      	bne.n	80047c4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	095b      	lsrs	r3, r3, #5
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	8912      	ldrh	r2, [r2, #8]
 80047b4:	4293      	cmp	r3, r2
 80047b6:	f0c0 8088 	bcc.w	80048ca <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	61da      	str	r2, [r3, #28]
 80047c0:	2304      	movs	r3, #4
 80047c2:	e08f      	b.n	80048e4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	0a5b      	lsrs	r3, r3, #9
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	8952      	ldrh	r2, [r2, #10]
 80047cc:	3a01      	subs	r2, #1
 80047ce:	4013      	ands	r3, r2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d17a      	bne.n	80048ca <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	4619      	mov	r1, r3
 80047dc:	4610      	mov	r0, r2
 80047de:	f7ff fc89 	bl	80040f4 <get_fat>
 80047e2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d801      	bhi.n	80047ee <dir_next+0x8c>
 80047ea:	2302      	movs	r3, #2
 80047ec:	e07a      	b.n	80048e4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f4:	d101      	bne.n	80047fa <dir_next+0x98>
 80047f6:	2301      	movs	r3, #1
 80047f8:	e074      	b.n	80048e4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	429a      	cmp	r2, r3
 8004802:	d358      	bcc.n	80048b6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d104      	bne.n	8004814 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	61da      	str	r2, [r3, #28]
 8004810:	2304      	movs	r3, #4
 8004812:	e067      	b.n	80048e4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	4619      	mov	r1, r3
 800481c:	4610      	mov	r0, r2
 800481e:	f7ff fe5a 	bl	80044d6 <create_chain>
 8004822:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <dir_next+0xcc>
 800482a:	2307      	movs	r3, #7
 800482c:	e05a      	b.n	80048e4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d101      	bne.n	8004838 <dir_next+0xd6>
 8004834:	2302      	movs	r3, #2
 8004836:	e055      	b.n	80048e4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483e:	d101      	bne.n	8004844 <dir_next+0xe2>
 8004840:	2301      	movs	r3, #1
 8004842:	e04f      	b.n	80048e4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f7ff fb57 	bl	8003ef8 <sync_window>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d001      	beq.n	8004854 <dir_next+0xf2>
 8004850:	2301      	movs	r3, #1
 8004852:	e047      	b.n	80048e4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	3330      	adds	r3, #48	; 0x30
 8004858:	f44f 7200 	mov.w	r2, #512	; 0x200
 800485c:	2100      	movs	r1, #0
 800485e:	4618      	mov	r0, r3
 8004860:	f7ff f98c 	bl	8003b7c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004864:	2300      	movs	r3, #0
 8004866:	613b      	str	r3, [r7, #16]
 8004868:	6979      	ldr	r1, [r7, #20]
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f7ff fc24 	bl	80040b8 <clust2sect>
 8004870:	4602      	mov	r2, r0
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	62da      	str	r2, [r3, #44]	; 0x2c
 8004876:	e012      	b.n	800489e <dir_next+0x13c>
						fs->wflag = 1;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2201      	movs	r2, #1
 800487c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f7ff fb3a 	bl	8003ef8 <sync_window>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <dir_next+0x12c>
 800488a:	2301      	movs	r3, #1
 800488c:	e02a      	b.n	80048e4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	3301      	adds	r3, #1
 8004892:	613b      	str	r3, [r7, #16]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004898:	1c5a      	adds	r2, r3, #1
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	62da      	str	r2, [r3, #44]	; 0x2c
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	895b      	ldrh	r3, [r3, #10]
 80048a2:	461a      	mov	r2, r3
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d3e6      	bcc.n	8004878 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad2      	subs	r2, r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80048bc:	6979      	ldr	r1, [r7, #20]
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f7ff fbfa 	bl	80040b8 <clust2sect>
 80048c4:	4602      	mov	r2, r0
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68ba      	ldr	r2, [r7, #8]
 80048ce:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048dc:	441a      	add	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3718      	adds	r7, #24
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b086      	sub	sp, #24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80048fc:	2100      	movs	r1, #0
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f7ff feb4 	bl	800466c <dir_sdi>
 8004904:	4603      	mov	r3, r0
 8004906:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004908:	7dfb      	ldrb	r3, [r7, #23]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d12b      	bne.n	8004966 <dir_alloc+0x7a>
		n = 0;
 800490e:	2300      	movs	r3, #0
 8004910:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	69db      	ldr	r3, [r3, #28]
 8004916:	4619      	mov	r1, r3
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f7ff fb31 	bl	8003f80 <move_window>
 800491e:	4603      	mov	r3, r0
 8004920:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004922:	7dfb      	ldrb	r3, [r7, #23]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d11d      	bne.n	8004964 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a1b      	ldr	r3, [r3, #32]
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	2be5      	cmp	r3, #229	; 0xe5
 8004930:	d004      	beq.n	800493c <dir_alloc+0x50>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d107      	bne.n	800494c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	3301      	adds	r3, #1
 8004940:	613b      	str	r3, [r7, #16]
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	429a      	cmp	r2, r3
 8004948:	d102      	bne.n	8004950 <dir_alloc+0x64>
 800494a:	e00c      	b.n	8004966 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800494c:	2300      	movs	r3, #0
 800494e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004950:	2101      	movs	r1, #1
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7ff ff05 	bl	8004762 <dir_next>
 8004958:	4603      	mov	r3, r0
 800495a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800495c:	7dfb      	ldrb	r3, [r7, #23]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d0d7      	beq.n	8004912 <dir_alloc+0x26>
 8004962:	e000      	b.n	8004966 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004964:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004966:	7dfb      	ldrb	r3, [r7, #23]
 8004968:	2b04      	cmp	r3, #4
 800496a:	d101      	bne.n	8004970 <dir_alloc+0x84>
 800496c:	2307      	movs	r3, #7
 800496e:	75fb      	strb	r3, [r7, #23]
	return res;
 8004970:	7dfb      	ldrb	r3, [r7, #23]
}
 8004972:	4618      	mov	r0, r3
 8004974:	3718      	adds	r7, #24
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b084      	sub	sp, #16
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
 8004982:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	331a      	adds	r3, #26
 8004988:	4618      	mov	r0, r3
 800498a:	f7ff f859 	bl	8003a40 <ld_word>
 800498e:	4603      	mov	r3, r0
 8004990:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	2b03      	cmp	r3, #3
 8004998:	d109      	bne.n	80049ae <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	3314      	adds	r3, #20
 800499e:	4618      	mov	r0, r3
 80049a0:	f7ff f84e 	bl	8003a40 <ld_word>
 80049a4:	4603      	mov	r3, r0
 80049a6:	041b      	lsls	r3, r3, #16
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80049ae:	68fb      	ldr	r3, [r7, #12]
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	331a      	adds	r3, #26
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	b292      	uxth	r2, r2
 80049cc:	4611      	mov	r1, r2
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7ff f86f 	bl	8003ab2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	2b03      	cmp	r3, #3
 80049da:	d109      	bne.n	80049f0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	f103 0214 	add.w	r2, r3, #20
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	0c1b      	lsrs	r3, r3, #16
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	4619      	mov	r1, r3
 80049ea:	4610      	mov	r0, r2
 80049ec:	f7ff f861 	bl	8003ab2 <st_word>
	}
}
 80049f0:	bf00      	nop
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004a06:	2100      	movs	r1, #0
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f7ff fe2f 	bl	800466c <dir_sdi>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004a12:	7dfb      	ldrb	r3, [r7, #23]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d001      	beq.n	8004a1c <dir_find+0x24>
 8004a18:	7dfb      	ldrb	r3, [r7, #23]
 8004a1a:	e03e      	b.n	8004a9a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	69db      	ldr	r3, [r3, #28]
 8004a20:	4619      	mov	r1, r3
 8004a22:	6938      	ldr	r0, [r7, #16]
 8004a24:	f7ff faac 	bl	8003f80 <move_window>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004a2c:	7dfb      	ldrb	r3, [r7, #23]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d12f      	bne.n	8004a92 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004a3a:	7bfb      	ldrb	r3, [r7, #15]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d102      	bne.n	8004a46 <dir_find+0x4e>
 8004a40:	2304      	movs	r3, #4
 8004a42:	75fb      	strb	r3, [r7, #23]
 8004a44:	e028      	b.n	8004a98 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	330b      	adds	r3, #11
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a52:	b2da      	uxtb	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a1b      	ldr	r3, [r3, #32]
 8004a5c:	330b      	adds	r3, #11
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	f003 0308 	and.w	r3, r3, #8
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10a      	bne.n	8004a7e <dir_find+0x86>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a18      	ldr	r0, [r3, #32]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	3324      	adds	r3, #36	; 0x24
 8004a70:	220b      	movs	r2, #11
 8004a72:	4619      	mov	r1, r3
 8004a74:	f7ff f89b 	bl	8003bae <mem_cmp>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00b      	beq.n	8004a96 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8004a7e:	2100      	movs	r1, #0
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7ff fe6e 	bl	8004762 <dir_next>
 8004a86:	4603      	mov	r3, r0
 8004a88:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004a8a:	7dfb      	ldrb	r3, [r7, #23]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d0c5      	beq.n	8004a1c <dir_find+0x24>
 8004a90:	e002      	b.n	8004a98 <dir_find+0xa0>
		if (res != FR_OK) break;
 8004a92:	bf00      	nop
 8004a94:	e000      	b.n	8004a98 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004a96:	bf00      	nop

	return res;
 8004a98:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3718      	adds	r7, #24
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b084      	sub	sp, #16
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8004ab0:	2101      	movs	r1, #1
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7ff ff1a 	bl	80048ec <dir_alloc>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8004abc:	7bfb      	ldrb	r3, [r7, #15]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d11c      	bne.n	8004afc <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	69db      	ldr	r3, [r3, #28]
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	68b8      	ldr	r0, [r7, #8]
 8004aca:	f7ff fa59 	bl	8003f80 <move_window>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004ad2:	7bfb      	ldrb	r3, [r7, #15]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d111      	bne.n	8004afc <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a1b      	ldr	r3, [r3, #32]
 8004adc:	2220      	movs	r2, #32
 8004ade:	2100      	movs	r1, #0
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7ff f84b 	bl	8003b7c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a18      	ldr	r0, [r3, #32]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	3324      	adds	r3, #36	; 0x24
 8004aee:	220b      	movs	r2, #11
 8004af0:	4619      	mov	r1, r3
 8004af2:	f7ff f823 	bl	8003b3c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	2201      	movs	r2, #1
 8004afa:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8004afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
	...

08004b08 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b088      	sub	sp, #32
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	60fb      	str	r3, [r7, #12]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	3324      	adds	r3, #36	; 0x24
 8004b1c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8004b1e:	220b      	movs	r2, #11
 8004b20:	2120      	movs	r1, #32
 8004b22:	68b8      	ldr	r0, [r7, #8]
 8004b24:	f7ff f82a 	bl	8003b7c <mem_set>
	si = i = 0; ni = 8;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	613b      	str	r3, [r7, #16]
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	617b      	str	r3, [r7, #20]
 8004b30:	2308      	movs	r3, #8
 8004b32:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	1c5a      	adds	r2, r3, #1
 8004b38:	617a      	str	r2, [r7, #20]
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004b42:	7ffb      	ldrb	r3, [r7, #31]
 8004b44:	2b20      	cmp	r3, #32
 8004b46:	d94e      	bls.n	8004be6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8004b48:	7ffb      	ldrb	r3, [r7, #31]
 8004b4a:	2b2f      	cmp	r3, #47	; 0x2f
 8004b4c:	d006      	beq.n	8004b5c <create_name+0x54>
 8004b4e:	7ffb      	ldrb	r3, [r7, #31]
 8004b50:	2b5c      	cmp	r3, #92	; 0x5c
 8004b52:	d110      	bne.n	8004b76 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004b54:	e002      	b.n	8004b5c <create_name+0x54>
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	3301      	adds	r3, #1
 8004b5a:	617b      	str	r3, [r7, #20]
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	4413      	add	r3, r2
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	2b2f      	cmp	r3, #47	; 0x2f
 8004b66:	d0f6      	beq.n	8004b56 <create_name+0x4e>
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	2b5c      	cmp	r3, #92	; 0x5c
 8004b72:	d0f0      	beq.n	8004b56 <create_name+0x4e>
			break;
 8004b74:	e038      	b.n	8004be8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8004b76:	7ffb      	ldrb	r3, [r7, #31]
 8004b78:	2b2e      	cmp	r3, #46	; 0x2e
 8004b7a:	d003      	beq.n	8004b84 <create_name+0x7c>
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d30c      	bcc.n	8004b9e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	2b0b      	cmp	r3, #11
 8004b88:	d002      	beq.n	8004b90 <create_name+0x88>
 8004b8a:	7ffb      	ldrb	r3, [r7, #31]
 8004b8c:	2b2e      	cmp	r3, #46	; 0x2e
 8004b8e:	d001      	beq.n	8004b94 <create_name+0x8c>
 8004b90:	2306      	movs	r3, #6
 8004b92:	e044      	b.n	8004c1e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8004b94:	2308      	movs	r3, #8
 8004b96:	613b      	str	r3, [r7, #16]
 8004b98:	230b      	movs	r3, #11
 8004b9a:	61bb      	str	r3, [r7, #24]
			continue;
 8004b9c:	e022      	b.n	8004be4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8004b9e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	da04      	bge.n	8004bb0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004ba6:	7ffb      	ldrb	r3, [r7, #31]
 8004ba8:	3b80      	subs	r3, #128	; 0x80
 8004baa:	4a1f      	ldr	r2, [pc, #124]	; (8004c28 <create_name+0x120>)
 8004bac:	5cd3      	ldrb	r3, [r2, r3]
 8004bae:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8004bb0:	7ffb      	ldrb	r3, [r7, #31]
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	481d      	ldr	r0, [pc, #116]	; (8004c2c <create_name+0x124>)
 8004bb6:	f7ff f820 	bl	8003bfa <chk_chr>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d001      	beq.n	8004bc4 <create_name+0xbc>
 8004bc0:	2306      	movs	r3, #6
 8004bc2:	e02c      	b.n	8004c1e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8004bc4:	7ffb      	ldrb	r3, [r7, #31]
 8004bc6:	2b60      	cmp	r3, #96	; 0x60
 8004bc8:	d905      	bls.n	8004bd6 <create_name+0xce>
 8004bca:	7ffb      	ldrb	r3, [r7, #31]
 8004bcc:	2b7a      	cmp	r3, #122	; 0x7a
 8004bce:	d802      	bhi.n	8004bd6 <create_name+0xce>
 8004bd0:	7ffb      	ldrb	r3, [r7, #31]
 8004bd2:	3b20      	subs	r3, #32
 8004bd4:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	1c5a      	adds	r2, r3, #1
 8004bda:	613a      	str	r2, [r7, #16]
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	4413      	add	r3, r2
 8004be0:	7ffa      	ldrb	r2, [r7, #31]
 8004be2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8004be4:	e7a6      	b.n	8004b34 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004be6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	441a      	add	r2, r3
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <create_name+0xf4>
 8004bf8:	2306      	movs	r3, #6
 8004bfa:	e010      	b.n	8004c1e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	2be5      	cmp	r3, #229	; 0xe5
 8004c02:	d102      	bne.n	8004c0a <create_name+0x102>
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	2205      	movs	r2, #5
 8004c08:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004c0a:	7ffb      	ldrb	r3, [r7, #31]
 8004c0c:	2b20      	cmp	r3, #32
 8004c0e:	d801      	bhi.n	8004c14 <create_name+0x10c>
 8004c10:	2204      	movs	r2, #4
 8004c12:	e000      	b.n	8004c16 <create_name+0x10e>
 8004c14:	2200      	movs	r2, #0
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	330b      	adds	r3, #11
 8004c1a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8004c1c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3720      	adds	r7, #32
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	08006318 	.word	0x08006318
 8004c2c:	080062b0 	.word	0x080062b0

08004c30 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004c44:	e002      	b.n	8004c4c <follow_path+0x1c>
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	3301      	adds	r3, #1
 8004c4a:	603b      	str	r3, [r7, #0]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	2b2f      	cmp	r3, #47	; 0x2f
 8004c52:	d0f8      	beq.n	8004c46 <follow_path+0x16>
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	2b5c      	cmp	r3, #92	; 0x5c
 8004c5a:	d0f4      	beq.n	8004c46 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	2b1f      	cmp	r3, #31
 8004c68:	d80a      	bhi.n	8004c80 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2280      	movs	r2, #128	; 0x80
 8004c6e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8004c72:	2100      	movs	r1, #0
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f7ff fcf9 	bl	800466c <dir_sdi>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	75fb      	strb	r3, [r7, #23]
 8004c7e:	e043      	b.n	8004d08 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004c80:	463b      	mov	r3, r7
 8004c82:	4619      	mov	r1, r3
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f7ff ff3f 	bl	8004b08 <create_name>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004c8e:	7dfb      	ldrb	r3, [r7, #23]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d134      	bne.n	8004cfe <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f7ff feaf 	bl	80049f8 <dir_find>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004ca4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8004ca6:	7dfb      	ldrb	r3, [r7, #23]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00a      	beq.n	8004cc2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004cac:	7dfb      	ldrb	r3, [r7, #23]
 8004cae:	2b04      	cmp	r3, #4
 8004cb0:	d127      	bne.n	8004d02 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004cb2:	7afb      	ldrb	r3, [r7, #11]
 8004cb4:	f003 0304 	and.w	r3, r3, #4
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d122      	bne.n	8004d02 <follow_path+0xd2>
 8004cbc:	2305      	movs	r3, #5
 8004cbe:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8004cc0:	e01f      	b.n	8004d02 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004cc2:	7afb      	ldrb	r3, [r7, #11]
 8004cc4:	f003 0304 	and.w	r3, r3, #4
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d11c      	bne.n	8004d06 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	799b      	ldrb	r3, [r3, #6]
 8004cd0:	f003 0310 	and.w	r3, r3, #16
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d102      	bne.n	8004cde <follow_path+0xae>
				res = FR_NO_PATH; break;
 8004cd8:	2305      	movs	r3, #5
 8004cda:	75fb      	strb	r3, [r7, #23]
 8004cdc:	e014      	b.n	8004d08 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cec:	4413      	add	r3, r2
 8004cee:	4619      	mov	r1, r3
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f7ff fe42 	bl	800497a <ld_clust>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004cfc:	e7c0      	b.n	8004c80 <follow_path+0x50>
			if (res != FR_OK) break;
 8004cfe:	bf00      	nop
 8004d00:	e002      	b.n	8004d08 <follow_path+0xd8>
				break;
 8004d02:	bf00      	nop
 8004d04:	e000      	b.n	8004d08 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004d06:	bf00      	nop
			}
		}
	}

	return res;
 8004d08:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3718      	adds	r7, #24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004d12:	b480      	push	{r7}
 8004d14:	b087      	sub	sp, #28
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d1e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d031      	beq.n	8004d8c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	617b      	str	r3, [r7, #20]
 8004d2e:	e002      	b.n	8004d36 <get_ldnumber+0x24>
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	3301      	adds	r3, #1
 8004d34:	617b      	str	r3, [r7, #20]
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	2b20      	cmp	r3, #32
 8004d3c:	d903      	bls.n	8004d46 <get_ldnumber+0x34>
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	2b3a      	cmp	r3, #58	; 0x3a
 8004d44:	d1f4      	bne.n	8004d30 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	2b3a      	cmp	r3, #58	; 0x3a
 8004d4c:	d11c      	bne.n	8004d88 <get_ldnumber+0x76>
			tp = *path;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	1c5a      	adds	r2, r3, #1
 8004d58:	60fa      	str	r2, [r7, #12]
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	3b30      	subs	r3, #48	; 0x30
 8004d5e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	2b09      	cmp	r3, #9
 8004d64:	d80e      	bhi.n	8004d84 <get_ldnumber+0x72>
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d10a      	bne.n	8004d84 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d107      	bne.n	8004d84 <get_ldnumber+0x72>
					vol = (int)i;
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	617b      	str	r3, [r7, #20]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	e002      	b.n	8004d8e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004d88:	2300      	movs	r3, #0
 8004d8a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004d8c:	693b      	ldr	r3, [r7, #16]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	371c      	adds	r7, #28
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bc80      	pop	{r7}
 8004d96:	4770      	bx	lr

08004d98 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	70da      	strb	r2, [r3, #3]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f04f 32ff 	mov.w	r2, #4294967295
 8004dae:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004db0:	6839      	ldr	r1, [r7, #0]
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7ff f8e4 	bl	8003f80 <move_window>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d001      	beq.n	8004dc2 <check_fs+0x2a>
 8004dbe:	2304      	movs	r3, #4
 8004dc0:	e038      	b.n	8004e34 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	3330      	adds	r3, #48	; 0x30
 8004dc6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7fe fe38 	bl	8003a40 <ld_word>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d001      	beq.n	8004de0 <check_fs+0x48>
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e029      	b.n	8004e34 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004de6:	2be9      	cmp	r3, #233	; 0xe9
 8004de8:	d009      	beq.n	8004dfe <check_fs+0x66>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004df0:	2beb      	cmp	r3, #235	; 0xeb
 8004df2:	d11e      	bne.n	8004e32 <check_fs+0x9a>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004dfa:	2b90      	cmp	r3, #144	; 0x90
 8004dfc:	d119      	bne.n	8004e32 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	3330      	adds	r3, #48	; 0x30
 8004e02:	3336      	adds	r3, #54	; 0x36
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7fe fe32 	bl	8003a6e <ld_dword>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004e10:	4a0a      	ldr	r2, [pc, #40]	; (8004e3c <check_fs+0xa4>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d101      	bne.n	8004e1a <check_fs+0x82>
 8004e16:	2300      	movs	r3, #0
 8004e18:	e00c      	b.n	8004e34 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	3330      	adds	r3, #48	; 0x30
 8004e1e:	3352      	adds	r3, #82	; 0x52
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7fe fe24 	bl	8003a6e <ld_dword>
 8004e26:	4602      	mov	r2, r0
 8004e28:	4b05      	ldr	r3, [pc, #20]	; (8004e40 <check_fs+0xa8>)
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d101      	bne.n	8004e32 <check_fs+0x9a>
 8004e2e:	2300      	movs	r3, #0
 8004e30:	e000      	b.n	8004e34 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8004e32:	2302      	movs	r3, #2
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3708      	adds	r7, #8
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	00544146 	.word	0x00544146
 8004e40:	33544146 	.word	0x33544146

08004e44 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b096      	sub	sp, #88	; 0x58
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	4613      	mov	r3, r2
 8004e50:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	2200      	movs	r2, #0
 8004e56:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f7ff ff5a 	bl	8004d12 <get_ldnumber>
 8004e5e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	da01      	bge.n	8004e6a <find_volume+0x26>
 8004e66:	230b      	movs	r3, #11
 8004e68:	e22e      	b.n	80052c8 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004e6a:	4aa8      	ldr	r2, [pc, #672]	; (800510c <find_volume+0x2c8>)
 8004e6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e72:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <find_volume+0x3a>
 8004e7a:	230c      	movs	r3, #12
 8004e7c:	e224      	b.n	80052c8 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e82:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004e84:	79fb      	ldrb	r3, [r7, #7]
 8004e86:	f023 0301 	bic.w	r3, r3, #1
 8004e8a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d01a      	beq.n	8004eca <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e96:	785b      	ldrb	r3, [r3, #1]
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7fe fd33 	bl	8003904 <disk_status>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004ea4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004ea8:	f003 0301 	and.w	r3, r3, #1
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d10c      	bne.n	8004eca <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004eb0:	79fb      	ldrb	r3, [r7, #7]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d007      	beq.n	8004ec6 <find_volume+0x82>
 8004eb6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004eba:	f003 0304 	and.w	r3, r3, #4
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d001      	beq.n	8004ec6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8004ec2:	230a      	movs	r3, #10
 8004ec4:	e200      	b.n	80052c8 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	e1fe      	b.n	80052c8 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ecc:	2200      	movs	r2, #0
 8004ece:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ed2:	b2da      	uxtb	r2, r3
 8004ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eda:	785b      	ldrb	r3, [r3, #1]
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7fe fd2b 	bl	8003938 <disk_initialize>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004ee8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d001      	beq.n	8004ef8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e1e7      	b.n	80052c8 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004ef8:	79fb      	ldrb	r3, [r7, #7]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d007      	beq.n	8004f0e <find_volume+0xca>
 8004efe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f02:	f003 0304 	and.w	r3, r3, #4
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d001      	beq.n	8004f0e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8004f0a:	230a      	movs	r3, #10
 8004f0c:	e1dc      	b.n	80052c8 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8004f12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004f14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004f16:	f7ff ff3f 	bl	8004d98 <check_fs>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004f20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d14b      	bne.n	8004fc0 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004f28:	2300      	movs	r3, #0
 8004f2a:	643b      	str	r3, [r7, #64]	; 0x40
 8004f2c:	e01f      	b.n	8004f6e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8004f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f30:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004f34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f36:	011b      	lsls	r3, r3, #4
 8004f38:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8004f3c:	4413      	add	r3, r2
 8004f3e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f42:	3304      	adds	r3, #4
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d006      	beq.n	8004f58 <find_volume+0x114>
 8004f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4c:	3308      	adds	r3, #8
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7fe fd8d 	bl	8003a6e <ld_dword>
 8004f54:	4602      	mov	r2, r0
 8004f56:	e000      	b.n	8004f5a <find_volume+0x116>
 8004f58:	2200      	movs	r2, #0
 8004f5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8004f62:	440b      	add	r3, r1
 8004f64:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004f68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	643b      	str	r3, [r7, #64]	; 0x40
 8004f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f70:	2b03      	cmp	r3, #3
 8004f72:	d9dc      	bls.n	8004f2e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8004f74:	2300      	movs	r3, #0
 8004f76:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8004f78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d002      	beq.n	8004f84 <find_volume+0x140>
 8004f7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f80:	3b01      	subs	r3, #1
 8004f82:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8004f84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8004f8c:	4413      	add	r3, r2
 8004f8e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004f92:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004f94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d005      	beq.n	8004fa6 <find_volume+0x162>
 8004f9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004f9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004f9e:	f7ff fefb 	bl	8004d98 <check_fs>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	e000      	b.n	8004fa8 <find_volume+0x164>
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004fac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d905      	bls.n	8004fc0 <find_volume+0x17c>
 8004fb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	643b      	str	r3, [r7, #64]	; 0x40
 8004fba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fbc:	2b03      	cmp	r3, #3
 8004fbe:	d9e1      	bls.n	8004f84 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004fc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004fc4:	2b04      	cmp	r3, #4
 8004fc6:	d101      	bne.n	8004fcc <find_volume+0x188>
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e17d      	b.n	80052c8 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004fcc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d901      	bls.n	8004fd8 <find_volume+0x194>
 8004fd4:	230d      	movs	r3, #13
 8004fd6:	e177      	b.n	80052c8 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fda:	3330      	adds	r3, #48	; 0x30
 8004fdc:	330b      	adds	r3, #11
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7fe fd2e 	bl	8003a40 <ld_word>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fea:	d001      	beq.n	8004ff0 <find_volume+0x1ac>
 8004fec:	230d      	movs	r3, #13
 8004fee:	e16b      	b.n	80052c8 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff2:	3330      	adds	r3, #48	; 0x30
 8004ff4:	3316      	adds	r3, #22
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7fe fd22 	bl	8003a40 <ld_word>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005002:	2b00      	cmp	r3, #0
 8005004:	d106      	bne.n	8005014 <find_volume+0x1d0>
 8005006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005008:	3330      	adds	r3, #48	; 0x30
 800500a:	3324      	adds	r3, #36	; 0x24
 800500c:	4618      	mov	r0, r3
 800500e:	f7fe fd2e 	bl	8003a6e <ld_dword>
 8005012:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005016:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005018:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800501a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8005020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005022:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005026:	789b      	ldrb	r3, [r3, #2]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d005      	beq.n	8005038 <find_volume+0x1f4>
 800502c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502e:	789b      	ldrb	r3, [r3, #2]
 8005030:	2b02      	cmp	r3, #2
 8005032:	d001      	beq.n	8005038 <find_volume+0x1f4>
 8005034:	230d      	movs	r3, #13
 8005036:	e147      	b.n	80052c8 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503a:	789b      	ldrb	r3, [r3, #2]
 800503c:	461a      	mov	r2, r3
 800503e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005040:	fb02 f303 	mul.w	r3, r2, r3
 8005044:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800504c:	b29a      	uxth	r2, r3
 800504e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005050:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005054:	895b      	ldrh	r3, [r3, #10]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d008      	beq.n	800506c <find_volume+0x228>
 800505a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505c:	895b      	ldrh	r3, [r3, #10]
 800505e:	461a      	mov	r2, r3
 8005060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005062:	895b      	ldrh	r3, [r3, #10]
 8005064:	3b01      	subs	r3, #1
 8005066:	4013      	ands	r3, r2
 8005068:	2b00      	cmp	r3, #0
 800506a:	d001      	beq.n	8005070 <find_volume+0x22c>
 800506c:	230d      	movs	r3, #13
 800506e:	e12b      	b.n	80052c8 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005072:	3330      	adds	r3, #48	; 0x30
 8005074:	3311      	adds	r3, #17
 8005076:	4618      	mov	r0, r3
 8005078:	f7fe fce2 	bl	8003a40 <ld_word>
 800507c:	4603      	mov	r3, r0
 800507e:	461a      	mov	r2, r3
 8005080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005082:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005086:	891b      	ldrh	r3, [r3, #8]
 8005088:	f003 030f 	and.w	r3, r3, #15
 800508c:	b29b      	uxth	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <find_volume+0x252>
 8005092:	230d      	movs	r3, #13
 8005094:	e118      	b.n	80052c8 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005098:	3330      	adds	r3, #48	; 0x30
 800509a:	3313      	adds	r3, #19
 800509c:	4618      	mov	r0, r3
 800509e:	f7fe fccf 	bl	8003a40 <ld_word>
 80050a2:	4603      	mov	r3, r0
 80050a4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80050a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d106      	bne.n	80050ba <find_volume+0x276>
 80050ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ae:	3330      	adds	r3, #48	; 0x30
 80050b0:	3320      	adds	r3, #32
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7fe fcdb 	bl	8003a6e <ld_dword>
 80050b8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80050ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050bc:	3330      	adds	r3, #48	; 0x30
 80050be:	330e      	adds	r3, #14
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7fe fcbd 	bl	8003a40 <ld_word>
 80050c6:	4603      	mov	r3, r0
 80050c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80050ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d101      	bne.n	80050d4 <find_volume+0x290>
 80050d0:	230d      	movs	r3, #13
 80050d2:	e0f9      	b.n	80052c8 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80050d4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80050d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050d8:	4413      	add	r3, r2
 80050da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050dc:	8912      	ldrh	r2, [r2, #8]
 80050de:	0912      	lsrs	r2, r2, #4
 80050e0:	b292      	uxth	r2, r2
 80050e2:	4413      	add	r3, r2
 80050e4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80050e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d201      	bcs.n	80050f2 <find_volume+0x2ae>
 80050ee:	230d      	movs	r3, #13
 80050f0:	e0ea      	b.n	80052c8 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80050f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050fa:	8952      	ldrh	r2, [r2, #10]
 80050fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005100:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005104:	2b00      	cmp	r3, #0
 8005106:	d103      	bne.n	8005110 <find_volume+0x2cc>
 8005108:	230d      	movs	r3, #13
 800510a:	e0dd      	b.n	80052c8 <find_volume+0x484>
 800510c:	20000044 	.word	0x20000044
		fmt = FS_FAT32;
 8005110:	2303      	movs	r3, #3
 8005112:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005118:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800511c:	4293      	cmp	r3, r2
 800511e:	d802      	bhi.n	8005126 <find_volume+0x2e2>
 8005120:	2302      	movs	r3, #2
 8005122:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	f640 72f5 	movw	r2, #4085	; 0xff5
 800512c:	4293      	cmp	r3, r2
 800512e:	d802      	bhi.n	8005136 <find_volume+0x2f2>
 8005130:	2301      	movs	r3, #1
 8005132:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005138:	1c9a      	adds	r2, r3, #2
 800513a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513c:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800513e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005140:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005142:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005144:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005148:	441a      	add	r2, r3
 800514a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514c:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800514e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005152:	441a      	add	r2, r3
 8005154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005156:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8005158:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800515c:	2b03      	cmp	r3, #3
 800515e:	d11e      	bne.n	800519e <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005162:	3330      	adds	r3, #48	; 0x30
 8005164:	332a      	adds	r3, #42	; 0x2a
 8005166:	4618      	mov	r0, r3
 8005168:	f7fe fc6a 	bl	8003a40 <ld_word>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <find_volume+0x332>
 8005172:	230d      	movs	r3, #13
 8005174:	e0a8      	b.n	80052c8 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005178:	891b      	ldrh	r3, [r3, #8]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <find_volume+0x33e>
 800517e:	230d      	movs	r3, #13
 8005180:	e0a2      	b.n	80052c8 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005184:	3330      	adds	r3, #48	; 0x30
 8005186:	332c      	adds	r3, #44	; 0x2c
 8005188:	4618      	mov	r0, r3
 800518a:	f7fe fc70 	bl	8003a6e <ld_dword>
 800518e:	4602      	mov	r2, r0
 8005190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005192:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	647b      	str	r3, [r7, #68]	; 0x44
 800519c:	e01f      	b.n	80051de <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800519e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a0:	891b      	ldrh	r3, [r3, #8]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <find_volume+0x366>
 80051a6:	230d      	movs	r3, #13
 80051a8:	e08e      	b.n	80052c8 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80051aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ac:	6a1a      	ldr	r2, [r3, #32]
 80051ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051b0:	441a      	add	r2, r3
 80051b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b4:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80051b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d103      	bne.n	80051c6 <find_volume+0x382>
 80051be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	e00a      	b.n	80051dc <find_volume+0x398>
 80051c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c8:	695a      	ldr	r2, [r3, #20]
 80051ca:	4613      	mov	r3, r2
 80051cc:	005b      	lsls	r3, r3, #1
 80051ce:	4413      	add	r3, r2
 80051d0:	085a      	lsrs	r2, r3, #1
 80051d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	f003 0301 	and.w	r3, r3, #1
 80051da:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80051dc:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80051de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e0:	699a      	ldr	r2, [r3, #24]
 80051e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051e4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80051e8:	0a5b      	lsrs	r3, r3, #9
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d201      	bcs.n	80051f2 <find_volume+0x3ae>
 80051ee:	230d      	movs	r3, #13
 80051f0:	e06a      	b.n	80052c8 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80051f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f4:	f04f 32ff 	mov.w	r2, #4294967295
 80051f8:	611a      	str	r2, [r3, #16]
 80051fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051fc:	691a      	ldr	r2, [r3, #16]
 80051fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005200:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8005202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005204:	2280      	movs	r2, #128	; 0x80
 8005206:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005208:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800520c:	2b03      	cmp	r3, #3
 800520e:	d149      	bne.n	80052a4 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005212:	3330      	adds	r3, #48	; 0x30
 8005214:	3330      	adds	r3, #48	; 0x30
 8005216:	4618      	mov	r0, r3
 8005218:	f7fe fc12 	bl	8003a40 <ld_word>
 800521c:	4603      	mov	r3, r0
 800521e:	2b01      	cmp	r3, #1
 8005220:	d140      	bne.n	80052a4 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005222:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005224:	3301      	adds	r3, #1
 8005226:	4619      	mov	r1, r3
 8005228:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800522a:	f7fe fea9 	bl	8003f80 <move_window>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d137      	bne.n	80052a4 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8005234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005236:	2200      	movs	r2, #0
 8005238:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800523a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523c:	3330      	adds	r3, #48	; 0x30
 800523e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005242:	4618      	mov	r0, r3
 8005244:	f7fe fbfc 	bl	8003a40 <ld_word>
 8005248:	4603      	mov	r3, r0
 800524a:	461a      	mov	r2, r3
 800524c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005250:	429a      	cmp	r2, r3
 8005252:	d127      	bne.n	80052a4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005256:	3330      	adds	r3, #48	; 0x30
 8005258:	4618      	mov	r0, r3
 800525a:	f7fe fc08 	bl	8003a6e <ld_dword>
 800525e:	4602      	mov	r2, r0
 8005260:	4b1b      	ldr	r3, [pc, #108]	; (80052d0 <find_volume+0x48c>)
 8005262:	429a      	cmp	r2, r3
 8005264:	d11e      	bne.n	80052a4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005268:	3330      	adds	r3, #48	; 0x30
 800526a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800526e:	4618      	mov	r0, r3
 8005270:	f7fe fbfd 	bl	8003a6e <ld_dword>
 8005274:	4602      	mov	r2, r0
 8005276:	4b17      	ldr	r3, [pc, #92]	; (80052d4 <find_volume+0x490>)
 8005278:	429a      	cmp	r2, r3
 800527a:	d113      	bne.n	80052a4 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800527c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800527e:	3330      	adds	r3, #48	; 0x30
 8005280:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005284:	4618      	mov	r0, r3
 8005286:	f7fe fbf2 	bl	8003a6e <ld_dword>
 800528a:	4602      	mov	r2, r0
 800528c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528e:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005292:	3330      	adds	r3, #48	; 0x30
 8005294:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8005298:	4618      	mov	r0, r3
 800529a:	f7fe fbe8 	bl	8003a6e <ld_dword>
 800529e:	4602      	mov	r2, r0
 80052a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a2:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80052a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80052aa:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80052ac:	4b0a      	ldr	r3, [pc, #40]	; (80052d8 <find_volume+0x494>)
 80052ae:	881b      	ldrh	r3, [r3, #0]
 80052b0:	3301      	adds	r3, #1
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	4b08      	ldr	r3, [pc, #32]	; (80052d8 <find_volume+0x494>)
 80052b6:	801a      	strh	r2, [r3, #0]
 80052b8:	4b07      	ldr	r3, [pc, #28]	; (80052d8 <find_volume+0x494>)
 80052ba:	881a      	ldrh	r2, [r3, #0]
 80052bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052be:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80052c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80052c2:	f7fe fdf7 	bl	8003eb4 <clear_lock>
#endif
	return FR_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3758      	adds	r7, #88	; 0x58
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	41615252 	.word	0x41615252
 80052d4:	61417272 	.word	0x61417272
 80052d8:	20000048 	.word	0x20000048

080052dc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80052e6:	2309      	movs	r3, #9
 80052e8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d01c      	beq.n	800532a <validate+0x4e>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d018      	beq.n	800532a <validate+0x4e>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d013      	beq.n	800532a <validate+0x4e>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	889a      	ldrh	r2, [r3, #4]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	88db      	ldrh	r3, [r3, #6]
 800530c:	429a      	cmp	r2, r3
 800530e:	d10c      	bne.n	800532a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	785b      	ldrb	r3, [r3, #1]
 8005316:	4618      	mov	r0, r3
 8005318:	f7fe faf4 	bl	8003904 <disk_status>
 800531c:	4603      	mov	r3, r0
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b00      	cmp	r3, #0
 8005324:	d101      	bne.n	800532a <validate+0x4e>
			res = FR_OK;
 8005326:	2300      	movs	r3, #0
 8005328:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800532a:	7bfb      	ldrb	r3, [r7, #15]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d102      	bne.n	8005336 <validate+0x5a>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	e000      	b.n	8005338 <validate+0x5c>
 8005336:	2300      	movs	r3, #0
 8005338:	683a      	ldr	r2, [r7, #0]
 800533a:	6013      	str	r3, [r2, #0]
	return res;
 800533c:	7bfb      	ldrb	r3, [r7, #15]
}
 800533e:	4618      	mov	r0, r3
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
	...

08005348 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b088      	sub	sp, #32
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	4613      	mov	r3, r2
 8005354:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800535a:	f107 0310 	add.w	r3, r7, #16
 800535e:	4618      	mov	r0, r3
 8005360:	f7ff fcd7 	bl	8004d12 <get_ldnumber>
 8005364:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	2b00      	cmp	r3, #0
 800536a:	da01      	bge.n	8005370 <f_mount+0x28>
 800536c:	230b      	movs	r3, #11
 800536e:	e02b      	b.n	80053c8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005370:	4a17      	ldr	r2, [pc, #92]	; (80053d0 <f_mount+0x88>)
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005378:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d005      	beq.n	800538c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005380:	69b8      	ldr	r0, [r7, #24]
 8005382:	f7fe fd97 	bl	8003eb4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	2200      	movs	r2, #0
 800538a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d002      	beq.n	8005398 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	490d      	ldr	r1, [pc, #52]	; (80053d0 <f_mount+0x88>)
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d002      	beq.n	80053ae <f_mount+0x66>
 80053a8:	79fb      	ldrb	r3, [r7, #7]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d001      	beq.n	80053b2 <f_mount+0x6a>
 80053ae:	2300      	movs	r3, #0
 80053b0:	e00a      	b.n	80053c8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80053b2:	f107 010c 	add.w	r1, r7, #12
 80053b6:	f107 0308 	add.w	r3, r7, #8
 80053ba:	2200      	movs	r2, #0
 80053bc:	4618      	mov	r0, r3
 80053be:	f7ff fd41 	bl	8004e44 <find_volume>
 80053c2:	4603      	mov	r3, r0
 80053c4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80053c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3720      	adds	r7, #32
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	20000044 	.word	0x20000044

080053d4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b098      	sub	sp, #96	; 0x60
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	4613      	mov	r3, r2
 80053e0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d101      	bne.n	80053ec <f_open+0x18>
 80053e8:	2309      	movs	r3, #9
 80053ea:	e1ad      	b.n	8005748 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80053ec:	79fb      	ldrb	r3, [r7, #7]
 80053ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053f2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80053f4:	79fa      	ldrb	r2, [r7, #7]
 80053f6:	f107 0110 	add.w	r1, r7, #16
 80053fa:	f107 0308 	add.w	r3, r7, #8
 80053fe:	4618      	mov	r0, r3
 8005400:	f7ff fd20 	bl	8004e44 <find_volume>
 8005404:	4603      	mov	r3, r0
 8005406:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800540a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800540e:	2b00      	cmp	r3, #0
 8005410:	f040 8191 	bne.w	8005736 <f_open+0x362>
		dj.obj.fs = fs;
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	f107 0314 	add.w	r3, r7, #20
 800541e:	4611      	mov	r1, r2
 8005420:	4618      	mov	r0, r3
 8005422:	f7ff fc05 	bl	8004c30 <follow_path>
 8005426:	4603      	mov	r3, r0
 8005428:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800542c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005430:	2b00      	cmp	r3, #0
 8005432:	d11a      	bne.n	800546a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005434:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005438:	b25b      	sxtb	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	da03      	bge.n	8005446 <f_open+0x72>
				res = FR_INVALID_NAME;
 800543e:	2306      	movs	r3, #6
 8005440:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005444:	e011      	b.n	800546a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005446:	79fb      	ldrb	r3, [r7, #7]
 8005448:	f023 0301 	bic.w	r3, r3, #1
 800544c:	2b00      	cmp	r3, #0
 800544e:	bf14      	ite	ne
 8005450:	2301      	movne	r3, #1
 8005452:	2300      	moveq	r3, #0
 8005454:	b2db      	uxtb	r3, r3
 8005456:	461a      	mov	r2, r3
 8005458:	f107 0314 	add.w	r3, r7, #20
 800545c:	4611      	mov	r1, r2
 800545e:	4618      	mov	r0, r3
 8005460:	f7fe fbe6 	bl	8003c30 <chk_lock>
 8005464:	4603      	mov	r3, r0
 8005466:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800546a:	79fb      	ldrb	r3, [r7, #7]
 800546c:	f003 031c 	and.w	r3, r3, #28
 8005470:	2b00      	cmp	r3, #0
 8005472:	d07f      	beq.n	8005574 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8005474:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005478:	2b00      	cmp	r3, #0
 800547a:	d017      	beq.n	80054ac <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800547c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005480:	2b04      	cmp	r3, #4
 8005482:	d10e      	bne.n	80054a2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005484:	f7fe fc2e 	bl	8003ce4 <enq_lock>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d006      	beq.n	800549c <f_open+0xc8>
 800548e:	f107 0314 	add.w	r3, r7, #20
 8005492:	4618      	mov	r0, r3
 8005494:	f7ff fb05 	bl	8004aa2 <dir_register>
 8005498:	4603      	mov	r3, r0
 800549a:	e000      	b.n	800549e <f_open+0xca>
 800549c:	2312      	movs	r3, #18
 800549e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80054a2:	79fb      	ldrb	r3, [r7, #7]
 80054a4:	f043 0308 	orr.w	r3, r3, #8
 80054a8:	71fb      	strb	r3, [r7, #7]
 80054aa:	e010      	b.n	80054ce <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80054ac:	7ebb      	ldrb	r3, [r7, #26]
 80054ae:	f003 0311 	and.w	r3, r3, #17
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <f_open+0xea>
					res = FR_DENIED;
 80054b6:	2307      	movs	r3, #7
 80054b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80054bc:	e007      	b.n	80054ce <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80054be:	79fb      	ldrb	r3, [r7, #7]
 80054c0:	f003 0304 	and.w	r3, r3, #4
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d002      	beq.n	80054ce <f_open+0xfa>
 80054c8:	2308      	movs	r3, #8
 80054ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80054ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d168      	bne.n	80055a8 <f_open+0x1d4>
 80054d6:	79fb      	ldrb	r3, [r7, #7]
 80054d8:	f003 0308 	and.w	r3, r3, #8
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d063      	beq.n	80055a8 <f_open+0x1d4>
				dw = GET_FATTIME();
 80054e0:	f7fe f9b4 	bl	800384c <get_fattime>
 80054e4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80054e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e8:	330e      	adds	r3, #14
 80054ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7fe fafa 	bl	8003ae6 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80054f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f4:	3316      	adds	r3, #22
 80054f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80054f8:	4618      	mov	r0, r3
 80054fa:	f7fe faf4 	bl	8003ae6 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80054fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005500:	330b      	adds	r3, #11
 8005502:	2220      	movs	r2, #32
 8005504:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800550a:	4611      	mov	r1, r2
 800550c:	4618      	mov	r0, r3
 800550e:	f7ff fa34 	bl	800497a <ld_clust>
 8005512:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005518:	2200      	movs	r2, #0
 800551a:	4618      	mov	r0, r3
 800551c:	f7ff fa4c 	bl	80049b8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005522:	331c      	adds	r3, #28
 8005524:	2100      	movs	r1, #0
 8005526:	4618      	mov	r0, r3
 8005528:	f7fe fadd 	bl	8003ae6 <st_dword>
					fs->wflag = 1;
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	2201      	movs	r2, #1
 8005530:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8005532:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005534:	2b00      	cmp	r3, #0
 8005536:	d037      	beq.n	80055a8 <f_open+0x1d4>
						dw = fs->winsect;
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800553c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800553e:	f107 0314 	add.w	r3, r7, #20
 8005542:	2200      	movs	r2, #0
 8005544:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005546:	4618      	mov	r0, r3
 8005548:	f7fe ff60 	bl	800440c <remove_chain>
 800554c:	4603      	mov	r3, r0
 800554e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8005552:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005556:	2b00      	cmp	r3, #0
 8005558:	d126      	bne.n	80055a8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800555e:	4618      	mov	r0, r3
 8005560:	f7fe fd0e 	bl	8003f80 <move_window>
 8005564:	4603      	mov	r3, r0
 8005566:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800556e:	3a01      	subs	r2, #1
 8005570:	60da      	str	r2, [r3, #12]
 8005572:	e019      	b.n	80055a8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005574:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005578:	2b00      	cmp	r3, #0
 800557a:	d115      	bne.n	80055a8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800557c:	7ebb      	ldrb	r3, [r7, #26]
 800557e:	f003 0310 	and.w	r3, r3, #16
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <f_open+0x1ba>
					res = FR_NO_FILE;
 8005586:	2304      	movs	r3, #4
 8005588:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800558c:	e00c      	b.n	80055a8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800558e:	79fb      	ldrb	r3, [r7, #7]
 8005590:	f003 0302 	and.w	r3, r3, #2
 8005594:	2b00      	cmp	r3, #0
 8005596:	d007      	beq.n	80055a8 <f_open+0x1d4>
 8005598:	7ebb      	ldrb	r3, [r7, #26]
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d002      	beq.n	80055a8 <f_open+0x1d4>
						res = FR_DENIED;
 80055a2:	2307      	movs	r3, #7
 80055a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80055a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d128      	bne.n	8005602 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80055b0:	79fb      	ldrb	r3, [r7, #7]
 80055b2:	f003 0308 	and.w	r3, r3, #8
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d003      	beq.n	80055c2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80055ba:	79fb      	ldrb	r3, [r7, #7]
 80055bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055c0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80055ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80055d0:	79fb      	ldrb	r3, [r7, #7]
 80055d2:	f023 0301 	bic.w	r3, r3, #1
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	bf14      	ite	ne
 80055da:	2301      	movne	r3, #1
 80055dc:	2300      	moveq	r3, #0
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	461a      	mov	r2, r3
 80055e2:	f107 0314 	add.w	r3, r7, #20
 80055e6:	4611      	mov	r1, r2
 80055e8:	4618      	mov	r0, r3
 80055ea:	f7fe fb9b 	bl	8003d24 <inc_lock>
 80055ee:	4602      	mov	r2, r0
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d102      	bne.n	8005602 <f_open+0x22e>
 80055fc:	2302      	movs	r3, #2
 80055fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8005602:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005606:	2b00      	cmp	r3, #0
 8005608:	f040 8095 	bne.w	8005736 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005610:	4611      	mov	r1, r2
 8005612:	4618      	mov	r0, r3
 8005614:	f7ff f9b1 	bl	800497a <ld_clust>
 8005618:	4602      	mov	r2, r0
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800561e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005620:	331c      	adds	r3, #28
 8005622:	4618      	mov	r0, r3
 8005624:	f7fe fa23 	bl	8003a6e <ld_dword>
 8005628:	4602      	mov	r2, r0
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	88da      	ldrh	r2, [r3, #6]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	79fa      	ldrb	r2, [r7, #7]
 8005646:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	3330      	adds	r3, #48	; 0x30
 800565e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005662:	2100      	movs	r1, #0
 8005664:	4618      	mov	r0, r3
 8005666:	f7fe fa89 	bl	8003b7c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800566a:	79fb      	ldrb	r3, [r7, #7]
 800566c:	f003 0320 	and.w	r3, r3, #32
 8005670:	2b00      	cmp	r3, #0
 8005672:	d060      	beq.n	8005736 <f_open+0x362>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d05c      	beq.n	8005736 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	68da      	ldr	r2, [r3, #12]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	895b      	ldrh	r3, [r3, #10]
 8005688:	025b      	lsls	r3, r3, #9
 800568a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	657b      	str	r3, [r7, #84]	; 0x54
 8005698:	e016      	b.n	80056c8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800569e:	4618      	mov	r0, r3
 80056a0:	f7fe fd28 	bl	80040f4 <get_fat>
 80056a4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80056a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d802      	bhi.n	80056b2 <f_open+0x2de>
 80056ac:	2302      	movs	r3, #2
 80056ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80056b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b8:	d102      	bne.n	80056c0 <f_open+0x2ec>
 80056ba:	2301      	movs	r3, #1
 80056bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80056c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80056c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	657b      	str	r3, [r7, #84]	; 0x54
 80056c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d103      	bne.n	80056d8 <f_open+0x304>
 80056d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80056d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d8e0      	bhi.n	800569a <f_open+0x2c6>
				}
				fp->clust = clst;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056dc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80056de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d127      	bne.n	8005736 <f_open+0x362>
 80056e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d022      	beq.n	8005736 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7fe fcdf 	bl	80040b8 <clust2sect>
 80056fa:	6478      	str	r0, [r7, #68]	; 0x44
 80056fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d103      	bne.n	800570a <f_open+0x336>
						res = FR_INT_ERR;
 8005702:	2302      	movs	r3, #2
 8005704:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005708:	e015      	b.n	8005736 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800570a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800570c:	0a5a      	lsrs	r2, r3, #9
 800570e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005710:	441a      	add	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	7858      	ldrb	r0, [r3, #1]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6a1a      	ldr	r2, [r3, #32]
 8005724:	2301      	movs	r3, #1
 8005726:	f7fe f92d 	bl	8003984 <disk_read>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d002      	beq.n	8005736 <f_open+0x362>
 8005730:	2301      	movs	r3, #1
 8005732:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8005736:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800573a:	2b00      	cmp	r3, #0
 800573c:	d002      	beq.n	8005744 <f_open+0x370>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005744:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8005748:	4618      	mov	r0, r3
 800574a:	3760      	adds	r7, #96	; 0x60
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b08e      	sub	sp, #56	; 0x38
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
 800575c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	2200      	movs	r2, #0
 8005766:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f107 0214 	add.w	r2, r7, #20
 800576e:	4611      	mov	r1, r2
 8005770:	4618      	mov	r0, r3
 8005772:	f7ff fdb3 	bl	80052dc <validate>
 8005776:	4603      	mov	r3, r0
 8005778:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800577c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005780:	2b00      	cmp	r3, #0
 8005782:	d107      	bne.n	8005794 <f_read+0x44>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	7d5b      	ldrb	r3, [r3, #21]
 8005788:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800578c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005790:	2b00      	cmp	r3, #0
 8005792:	d002      	beq.n	800579a <f_read+0x4a>
 8005794:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005798:	e115      	b.n	80059c6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	7d1b      	ldrb	r3, [r3, #20]
 800579e:	f003 0301 	and.w	r3, r3, #1
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d101      	bne.n	80057aa <f_read+0x5a>
 80057a6:	2307      	movs	r3, #7
 80057a8:	e10d      	b.n	80059c6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	68da      	ldr	r2, [r3, #12]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	6a3b      	ldr	r3, [r7, #32]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	f240 80fe 	bls.w	80059bc <f_read+0x26c>
 80057c0:	6a3b      	ldr	r3, [r7, #32]
 80057c2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80057c4:	e0fa      	b.n	80059bc <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f040 80c6 	bne.w	8005960 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	0a5b      	lsrs	r3, r3, #9
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	8952      	ldrh	r2, [r2, #10]
 80057de:	3a01      	subs	r2, #1
 80057e0:	4013      	ands	r3, r2
 80057e2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d12f      	bne.n	800584a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d103      	bne.n	80057fa <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	633b      	str	r3, [r7, #48]	; 0x30
 80057f8:	e013      	b.n	8005822 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d007      	beq.n	8005812 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	4619      	mov	r1, r3
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	f7fe fefc 	bl	8004606 <clmt_clust>
 800580e:	6338      	str	r0, [r7, #48]	; 0x30
 8005810:	e007      	b.n	8005822 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	69db      	ldr	r3, [r3, #28]
 8005818:	4619      	mov	r1, r3
 800581a:	4610      	mov	r0, r2
 800581c:	f7fe fc6a 	bl	80040f4 <get_fat>
 8005820:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8005822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005824:	2b01      	cmp	r3, #1
 8005826:	d804      	bhi.n	8005832 <f_read+0xe2>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2202      	movs	r2, #2
 800582c:	755a      	strb	r2, [r3, #21]
 800582e:	2302      	movs	r3, #2
 8005830:	e0c9      	b.n	80059c6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005838:	d104      	bne.n	8005844 <f_read+0xf4>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2201      	movs	r2, #1
 800583e:	755a      	strb	r2, [r3, #21]
 8005840:	2301      	movs	r3, #1
 8005842:	e0c0      	b.n	80059c6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005848:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	69db      	ldr	r3, [r3, #28]
 8005850:	4619      	mov	r1, r3
 8005852:	4610      	mov	r0, r2
 8005854:	f7fe fc30 	bl	80040b8 <clust2sect>
 8005858:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d104      	bne.n	800586a <f_read+0x11a>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2202      	movs	r2, #2
 8005864:	755a      	strb	r2, [r3, #21]
 8005866:	2302      	movs	r3, #2
 8005868:	e0ad      	b.n	80059c6 <f_read+0x276>
			sect += csect;
 800586a:	69ba      	ldr	r2, [r7, #24]
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	4413      	add	r3, r2
 8005870:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	0a5b      	lsrs	r3, r3, #9
 8005876:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8005878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587a:	2b00      	cmp	r3, #0
 800587c:	d039      	beq.n	80058f2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800587e:	69fa      	ldr	r2, [r7, #28]
 8005880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005882:	4413      	add	r3, r2
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	8952      	ldrh	r2, [r2, #10]
 8005888:	4293      	cmp	r3, r2
 800588a:	d905      	bls.n	8005898 <f_read+0x148>
					cc = fs->csize - csect;
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	895b      	ldrh	r3, [r3, #10]
 8005890:	461a      	mov	r2, r3
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	7858      	ldrb	r0, [r3, #1]
 800589c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589e:	69ba      	ldr	r2, [r7, #24]
 80058a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058a2:	f7fe f86f 	bl	8003984 <disk_read>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d004      	beq.n	80058b6 <f_read+0x166>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2201      	movs	r2, #1
 80058b0:	755a      	strb	r2, [r3, #21]
 80058b2:	2301      	movs	r3, #1
 80058b4:	e087      	b.n	80059c6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	7d1b      	ldrb	r3, [r3, #20]
 80058ba:	b25b      	sxtb	r3, r3
 80058bc:	2b00      	cmp	r3, #0
 80058be:	da14      	bge.n	80058ea <f_read+0x19a>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6a1a      	ldr	r2, [r3, #32]
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d90d      	bls.n	80058ea <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6a1a      	ldr	r2, [r3, #32]
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	025b      	lsls	r3, r3, #9
 80058d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058da:	18d0      	adds	r0, r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	3330      	adds	r3, #48	; 0x30
 80058e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058e4:	4619      	mov	r1, r3
 80058e6:	f7fe f929 	bl	8003b3c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80058ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ec:	025b      	lsls	r3, r3, #9
 80058ee:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80058f0:	e050      	b.n	8005994 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	69ba      	ldr	r2, [r7, #24]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d02e      	beq.n	800595a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	7d1b      	ldrb	r3, [r3, #20]
 8005900:	b25b      	sxtb	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	da18      	bge.n	8005938 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	7858      	ldrb	r0, [r3, #1]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6a1a      	ldr	r2, [r3, #32]
 8005914:	2301      	movs	r3, #1
 8005916:	f7fe f855 	bl	80039c4 <disk_write>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d004      	beq.n	800592a <f_read+0x1da>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2201      	movs	r2, #1
 8005924:	755a      	strb	r2, [r3, #21]
 8005926:	2301      	movs	r3, #1
 8005928:	e04d      	b.n	80059c6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	7d1b      	ldrb	r3, [r3, #20]
 800592e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005932:	b2da      	uxtb	r2, r3
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	7858      	ldrb	r0, [r3, #1]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005942:	2301      	movs	r3, #1
 8005944:	69ba      	ldr	r2, [r7, #24]
 8005946:	f7fe f81d 	bl	8003984 <disk_read>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d004      	beq.n	800595a <f_read+0x20a>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2201      	movs	r2, #1
 8005954:	755a      	strb	r2, [r3, #21]
 8005956:	2301      	movs	r3, #1
 8005958:	e035      	b.n	80059c6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005968:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800596c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800596e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	429a      	cmp	r2, r3
 8005974:	d901      	bls.n	800597a <f_read+0x22a>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005988:	4413      	add	r3, r2
 800598a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800598c:	4619      	mov	r1, r3
 800598e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005990:	f7fe f8d4 	bl	8003b3c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8005994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005998:	4413      	add	r3, r2
 800599a:	627b      	str	r3, [r7, #36]	; 0x24
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	699a      	ldr	r2, [r3, #24]
 80059a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a2:	441a      	add	r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	619a      	str	r2, [r3, #24]
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ae:	441a      	add	r2, r3
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	601a      	str	r2, [r3, #0]
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f47f af01 	bne.w	80057c6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3738      	adds	r7, #56	; 0x38
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b08c      	sub	sp, #48	; 0x30
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	60f8      	str	r0, [r7, #12]
 80059d6:	60b9      	str	r1, [r7, #8]
 80059d8:	607a      	str	r2, [r7, #4]
 80059da:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	2200      	movs	r2, #0
 80059e4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f107 0210 	add.w	r2, r7, #16
 80059ec:	4611      	mov	r1, r2
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7ff fc74 	bl	80052dc <validate>
 80059f4:	4603      	mov	r3, r0
 80059f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80059fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d107      	bne.n	8005a12 <f_write+0x44>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	7d5b      	ldrb	r3, [r3, #21]
 8005a06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005a0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d002      	beq.n	8005a18 <f_write+0x4a>
 8005a12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a16:	e14b      	b.n	8005cb0 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	7d1b      	ldrb	r3, [r3, #20]
 8005a1c:	f003 0302 	and.w	r3, r3, #2
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d101      	bne.n	8005a28 <f_write+0x5a>
 8005a24:	2307      	movs	r3, #7
 8005a26:	e143      	b.n	8005cb0 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	699a      	ldr	r2, [r3, #24]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	441a      	add	r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	f080 812d 	bcs.w	8005c94 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	43db      	mvns	r3, r3
 8005a40:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8005a42:	e127      	b.n	8005c94 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f040 80e3 	bne.w	8005c18 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	0a5b      	lsrs	r3, r3, #9
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	8952      	ldrh	r2, [r2, #10]
 8005a5c:	3a01      	subs	r2, #1
 8005a5e:	4013      	ands	r3, r2
 8005a60:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d143      	bne.n	8005af0 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10c      	bne.n	8005a8a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8005a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d11a      	bne.n	8005ab2 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2100      	movs	r1, #0
 8005a80:	4618      	mov	r0, r3
 8005a82:	f7fe fd28 	bl	80044d6 <create_chain>
 8005a86:	62b8      	str	r0, [r7, #40]	; 0x28
 8005a88:	e013      	b.n	8005ab2 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d007      	beq.n	8005aa2 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	4619      	mov	r1, r3
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f7fe fdb4 	bl	8004606 <clmt_clust>
 8005a9e:	62b8      	str	r0, [r7, #40]	; 0x28
 8005aa0:	e007      	b.n	8005ab2 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	69db      	ldr	r3, [r3, #28]
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	4610      	mov	r0, r2
 8005aac:	f7fe fd13 	bl	80044d6 <create_chain>
 8005ab0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f000 80f2 	beq.w	8005c9e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d104      	bne.n	8005aca <f_write+0xfc>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2202      	movs	r2, #2
 8005ac4:	755a      	strb	r2, [r3, #21]
 8005ac6:	2302      	movs	r3, #2
 8005ac8:	e0f2      	b.n	8005cb0 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad0:	d104      	bne.n	8005adc <f_write+0x10e>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	755a      	strb	r2, [r3, #21]
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e0e9      	b.n	8005cb0 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ae0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d102      	bne.n	8005af0 <f_write+0x122>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005aee:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	7d1b      	ldrb	r3, [r3, #20]
 8005af4:	b25b      	sxtb	r3, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	da18      	bge.n	8005b2c <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	7858      	ldrb	r0, [r3, #1]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6a1a      	ldr	r2, [r3, #32]
 8005b08:	2301      	movs	r3, #1
 8005b0a:	f7fd ff5b 	bl	80039c4 <disk_write>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d004      	beq.n	8005b1e <f_write+0x150>
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2201      	movs	r2, #1
 8005b18:	755a      	strb	r2, [r3, #21]
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e0c8      	b.n	8005cb0 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	7d1b      	ldrb	r3, [r3, #20]
 8005b22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b26:	b2da      	uxtb	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	69db      	ldr	r3, [r3, #28]
 8005b32:	4619      	mov	r1, r3
 8005b34:	4610      	mov	r0, r2
 8005b36:	f7fe fabf 	bl	80040b8 <clust2sect>
 8005b3a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d104      	bne.n	8005b4c <f_write+0x17e>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2202      	movs	r2, #2
 8005b46:	755a      	strb	r2, [r3, #21]
 8005b48:	2302      	movs	r3, #2
 8005b4a:	e0b1      	b.n	8005cb0 <f_write+0x2e2>
			sect += csect;
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	4413      	add	r3, r2
 8005b52:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	0a5b      	lsrs	r3, r3, #9
 8005b58:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005b5a:	6a3b      	ldr	r3, [r7, #32]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d03c      	beq.n	8005bda <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005b60:	69ba      	ldr	r2, [r7, #24]
 8005b62:	6a3b      	ldr	r3, [r7, #32]
 8005b64:	4413      	add	r3, r2
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	8952      	ldrh	r2, [r2, #10]
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d905      	bls.n	8005b7a <f_write+0x1ac>
					cc = fs->csize - csect;
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	895b      	ldrh	r3, [r3, #10]
 8005b72:	461a      	mov	r2, r3
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	7858      	ldrb	r0, [r3, #1]
 8005b7e:	6a3b      	ldr	r3, [r7, #32]
 8005b80:	697a      	ldr	r2, [r7, #20]
 8005b82:	69f9      	ldr	r1, [r7, #28]
 8005b84:	f7fd ff1e 	bl	80039c4 <disk_write>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d004      	beq.n	8005b98 <f_write+0x1ca>
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2201      	movs	r2, #1
 8005b92:	755a      	strb	r2, [r3, #21]
 8005b94:	2301      	movs	r3, #1
 8005b96:	e08b      	b.n	8005cb0 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6a1a      	ldr	r2, [r3, #32]
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	6a3a      	ldr	r2, [r7, #32]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d915      	bls.n	8005bd2 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6a1a      	ldr	r2, [r3, #32]
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	025b      	lsls	r3, r3, #9
 8005bb6:	69fa      	ldr	r2, [r7, #28]
 8005bb8:	4413      	add	r3, r2
 8005bba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	f7fd ffbc 	bl	8003b3c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	7d1b      	ldrb	r3, [r3, #20]
 8005bc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bcc:	b2da      	uxtb	r2, r3
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8005bd2:	6a3b      	ldr	r3, [r7, #32]
 8005bd4:	025b      	lsls	r3, r3, #9
 8005bd6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8005bd8:	e03f      	b.n	8005c5a <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d016      	beq.n	8005c12 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	699a      	ldr	r2, [r3, #24]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d210      	bcs.n	8005c12 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	7858      	ldrb	r0, [r3, #1]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	f7fd fec1 	bl	8003984 <disk_read>
 8005c02:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d004      	beq.n	8005c12 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	755a      	strb	r2, [r3, #21]
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e04e      	b.n	8005cb0 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	697a      	ldr	r2, [r7, #20]
 8005c16:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c20:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8005c24:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8005c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d901      	bls.n	8005c32 <f_write+0x264>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c40:	4413      	add	r3, r2
 8005c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c44:	69f9      	ldr	r1, [r7, #28]
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7fd ff78 	bl	8003b3c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	7d1b      	ldrb	r3, [r3, #20]
 8005c50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c54:	b2da      	uxtb	r2, r3
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8005c5a:	69fa      	ldr	r2, [r7, #28]
 8005c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5e:	4413      	add	r3, r2
 8005c60:	61fb      	str	r3, [r7, #28]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	699a      	ldr	r2, [r3, #24]
 8005c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c68:	441a      	add	r2, r3
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	619a      	str	r2, [r3, #24]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	68da      	ldr	r2, [r3, #12]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	bf38      	it	cc
 8005c7a:	461a      	movcc	r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	60da      	str	r2, [r3, #12]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c86:	441a      	add	r2, r3
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	601a      	str	r2, [r3, #0]
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	f47f aed4 	bne.w	8005a44 <f_write+0x76>
 8005c9c:	e000      	b.n	8005ca0 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005c9e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	7d1b      	ldrb	r3, [r3, #20]
 8005ca4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ca8:	b2da      	uxtb	r2, r3
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3730      	adds	r7, #48	; 0x30
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b086      	sub	sp, #24
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f107 0208 	add.w	r2, r7, #8
 8005cc6:	4611      	mov	r1, r2
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7ff fb07 	bl	80052dc <validate>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005cd2:	7dfb      	ldrb	r3, [r7, #23]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d168      	bne.n	8005daa <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	7d1b      	ldrb	r3, [r3, #20]
 8005cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d062      	beq.n	8005daa <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	7d1b      	ldrb	r3, [r3, #20]
 8005ce8:	b25b      	sxtb	r3, r3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	da15      	bge.n	8005d1a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	7858      	ldrb	r0, [r3, #1]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a1a      	ldr	r2, [r3, #32]
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	f7fd fe61 	bl	80039c4 <disk_write>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d001      	beq.n	8005d0c <f_sync+0x54>
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e04f      	b.n	8005dac <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	7d1b      	ldrb	r3, [r3, #20]
 8005d10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d14:	b2da      	uxtb	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8005d1a:	f7fd fd97 	bl	800384c <get_fattime>
 8005d1e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8005d20:	68ba      	ldr	r2, [r7, #8]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d26:	4619      	mov	r1, r3
 8005d28:	4610      	mov	r0, r2
 8005d2a:	f7fe f929 	bl	8003f80 <move_window>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8005d32:	7dfb      	ldrb	r3, [r7, #23]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d138      	bne.n	8005daa <f_sync+0xf2>
					dir = fp->dir_ptr;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	330b      	adds	r3, #11
 8005d42:	781a      	ldrb	r2, [r3, #0]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	330b      	adds	r3, #11
 8005d48:	f042 0220 	orr.w	r2, r2, #32
 8005d4c:	b2d2      	uxtb	r2, r2
 8005d4e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6818      	ldr	r0, [r3, #0]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	461a      	mov	r2, r3
 8005d5a:	68f9      	ldr	r1, [r7, #12]
 8005d5c:	f7fe fe2c 	bl	80049b8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f103 021c 	add.w	r2, r3, #28
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	4610      	mov	r0, r2
 8005d6e:	f7fd feba 	bl	8003ae6 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	3316      	adds	r3, #22
 8005d76:	6939      	ldr	r1, [r7, #16]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7fd feb4 	bl	8003ae6 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	3312      	adds	r3, #18
 8005d82:	2100      	movs	r1, #0
 8005d84:	4618      	mov	r0, r3
 8005d86:	f7fd fe94 	bl	8003ab2 <st_word>
					fs->wflag = 1;
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7fe f922 	bl	8003fdc <sync_fs>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	7d1b      	ldrb	r3, [r3, #20]
 8005da0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005da4:	b2da      	uxtb	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8005daa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3718      	adds	r7, #24
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f7ff ff7b 	bl	8005cb8 <f_sync>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8005dc6:	7bfb      	ldrb	r3, [r7, #15]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d118      	bne.n	8005dfe <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f107 0208 	add.w	r2, r7, #8
 8005dd2:	4611      	mov	r1, r2
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f7ff fa81 	bl	80052dc <validate>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005dde:	7bfb      	ldrb	r3, [r7, #15]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d10c      	bne.n	8005dfe <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	4618      	mov	r0, r3
 8005dea:	f7fe f829 	bl	8003e40 <dec_lock>
 8005dee:	4603      	mov	r3, r0
 8005df0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8005df2:	7bfb      	ldrb	r3, [r7, #15]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d102      	bne.n	8005dfe <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8005dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b092      	sub	sp, #72	; 0x48
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8005e14:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005e18:	f107 030c 	add.w	r3, r7, #12
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7ff f810 	bl	8004e44 <find_volume>
 8005e24:	4603      	mov	r3, r0
 8005e26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8005e2a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f040 8099 	bne.w	8005f66 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8005e34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8005e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3c:	691a      	ldr	r2, [r3, #16]
 8005e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	3b02      	subs	r3, #2
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d804      	bhi.n	8005e52 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8005e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4a:	691a      	ldr	r2, [r3, #16]
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	601a      	str	r2, [r3, #0]
 8005e50:	e089      	b.n	8005f66 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8005e52:	2300      	movs	r3, #0
 8005e54:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8005e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d128      	bne.n	8005eb0 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8005e5e:	2302      	movs	r3, #2
 8005e60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e64:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8005e66:	f107 0314 	add.w	r3, r7, #20
 8005e6a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7fe f941 	bl	80040f4 <get_fat>
 8005e72:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8005e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e7a:	d103      	bne.n	8005e84 <f_getfree+0x7c>
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005e82:	e063      	b.n	8005f4c <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8005e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d103      	bne.n	8005e92 <f_getfree+0x8a>
 8005e8a:	2302      	movs	r3, #2
 8005e8c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005e90:	e05c      	b.n	8005f4c <f_getfree+0x144>
					if (stat == 0) nfree++;
 8005e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d102      	bne.n	8005e9e <f_getfree+0x96>
 8005e98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8005e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea6:	695b      	ldr	r3, [r3, #20]
 8005ea8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d3db      	bcc.n	8005e66 <f_getfree+0x5e>
 8005eae:	e04d      	b.n	8005f4c <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8005eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb8:	6a1b      	ldr	r3, [r3, #32]
 8005eba:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	637b      	str	r3, [r7, #52]	; 0x34
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8005ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d113      	bne.n	8005ef2 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8005eca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ece:	1c5a      	adds	r2, r3, #1
 8005ed0:	63ba      	str	r2, [r7, #56]	; 0x38
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	f7fe f854 	bl	8003f80 <move_window>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8005ede:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d131      	bne.n	8005f4a <f_getfree+0x142>
							p = fs->win;
 8005ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee8:	3330      	adds	r3, #48	; 0x30
 8005eea:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8005eec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ef0:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8005ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d10f      	bne.n	8005f1a <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8005efa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005efc:	f7fd fda0 	bl	8003a40 <ld_word>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d102      	bne.n	8005f0c <f_getfree+0x104>
 8005f06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f08:	3301      	adds	r3, #1
 8005f0a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8005f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0e:	3302      	adds	r3, #2
 8005f10:	633b      	str	r3, [r7, #48]	; 0x30
 8005f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f14:	3b02      	subs	r3, #2
 8005f16:	637b      	str	r3, [r7, #52]	; 0x34
 8005f18:	e010      	b.n	8005f3c <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8005f1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f1c:	f7fd fda7 	bl	8003a6e <ld_dword>
 8005f20:	4603      	mov	r3, r0
 8005f22:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d102      	bne.n	8005f30 <f_getfree+0x128>
 8005f2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8005f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f32:	3304      	adds	r3, #4
 8005f34:	633b      	str	r3, [r7, #48]	; 0x30
 8005f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f38:	3b04      	subs	r3, #4
 8005f3a:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8005f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1bd      	bne.n	8005ec4 <f_getfree+0xbc>
 8005f48:	e000      	b.n	8005f4c <f_getfree+0x144>
							if (res != FR_OK) break;
 8005f4a:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f50:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8005f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f56:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8005f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5a:	791a      	ldrb	r2, [r3, #4]
 8005f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5e:	f042 0201 	orr.w	r2, r2, #1
 8005f62:	b2d2      	uxtb	r2, r2
 8005f64:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8005f66:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3748      	adds	r7, #72	; 0x48
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b088      	sub	sp, #32
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	60f8      	str	r0, [r7, #12]
 8005f7a:	60b9      	str	r1, [r7, #8]
 8005f7c:	607a      	str	r2, [r7, #4]
	int n = 0;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8005f86:	e01b      	b.n	8005fc0 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8005f88:	f107 0310 	add.w	r3, r7, #16
 8005f8c:	f107 0114 	add.w	r1, r7, #20
 8005f90:	2201      	movs	r2, #1
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7ff fbdc 	bl	8005750 <f_read>
		if (rc != 1) break;
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d116      	bne.n	8005fcc <f_gets+0x5a>
		c = s[0];
 8005f9e:	7d3b      	ldrb	r3, [r7, #20]
 8005fa0:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8005fa2:	7dfb      	ldrb	r3, [r7, #23]
 8005fa4:	2b0d      	cmp	r3, #13
 8005fa6:	d100      	bne.n	8005faa <f_gets+0x38>
 8005fa8:	e00a      	b.n	8005fc0 <f_gets+0x4e>
		*p++ = c;
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	1c5a      	adds	r2, r3, #1
 8005fae:	61ba      	str	r2, [r7, #24]
 8005fb0:	7dfa      	ldrb	r2, [r7, #23]
 8005fb2:	701a      	strb	r2, [r3, #0]
		n++;
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8005fba:	7dfb      	ldrb	r3, [r7, #23]
 8005fbc:	2b0a      	cmp	r3, #10
 8005fbe:	d007      	beq.n	8005fd0 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	69fa      	ldr	r2, [r7, #28]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	dbde      	blt.n	8005f88 <f_gets+0x16>
 8005fca:	e002      	b.n	8005fd2 <f_gets+0x60>
		if (rc != 1) break;
 8005fcc:	bf00      	nop
 8005fce:	e000      	b.n	8005fd2 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8005fd0:	bf00      	nop
	}
	*p = 0;
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d001      	beq.n	8005fe2 <f_gets+0x70>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	e000      	b.n	8005fe4 <f_gets+0x72>
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3720      	adds	r7, #32
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8005ff8:	78fb      	ldrb	r3, [r7, #3]
 8005ffa:	2b0a      	cmp	r3, #10
 8005ffc:	d103      	bne.n	8006006 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8005ffe:	210d      	movs	r1, #13
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f7ff fff3 	bl	8005fec <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2b00      	cmp	r3, #0
 8006010:	db25      	blt.n	800605e <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	1c5a      	adds	r2, r3, #1
 8006016:	60fa      	str	r2, [r7, #12]
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	4413      	add	r3, r2
 800601c:	78fa      	ldrb	r2, [r7, #3]
 800601e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2b3c      	cmp	r3, #60	; 0x3c
 8006024:	dd12      	ble.n	800604c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6818      	ldr	r0, [r3, #0]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f103 010c 	add.w	r1, r3, #12
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	f107 0308 	add.w	r3, r7, #8
 8006036:	f7ff fcca 	bl	80059ce <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800603a:	68ba      	ldr	r2, [r7, #8]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	429a      	cmp	r2, r3
 8006040:	d101      	bne.n	8006046 <putc_bfd+0x5a>
 8006042:	2300      	movs	r3, #0
 8006044:	e001      	b.n	800604a <putc_bfd+0x5e>
 8006046:	f04f 33ff 	mov.w	r3, #4294967295
 800604a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	1c5a      	adds	r2, r3, #1
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	609a      	str	r2, [r3, #8]
 800605c:	e000      	b.n	8006060 <putc_bfd+0x74>
	if (i < 0) return;
 800605e:	bf00      	nop
}
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b084      	sub	sp, #16
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	2b00      	cmp	r3, #0
 8006074:	db17      	blt.n	80060a6 <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6818      	ldr	r0, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f103 010c 	add.w	r1, r3, #12
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	461a      	mov	r2, r3
 8006086:	f107 030c 	add.w	r3, r7, #12
 800608a:	f7ff fca0 	bl	80059ce <f_write>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d108      	bne.n	80060a6 <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	461a      	mov	r2, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	429a      	cmp	r2, r3
 800609e:	d102      	bne.n	80060a6 <putc_flush+0x40>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	e001      	b.n	80060aa <putc_flush+0x44>
	return EOF;
 80060a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80060b2:	b480      	push	{r7}
 80060b4:	b083      	sub	sp, #12
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
 80060ba:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	683a      	ldr	r2, [r7, #0]
 80060c0:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	605a      	str	r2, [r3, #4]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685a      	ldr	r2, [r3, #4]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	609a      	str	r2, [r3, #8]
}
 80060d0:	bf00      	nop
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bc80      	pop	{r7}
 80060d8:	4770      	bx	lr

080060da <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80060da:	b580      	push	{r7, lr}
 80060dc:	b096      	sub	sp, #88	; 0x58
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
 80060e2:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 80060e4:	f107 030c 	add.w	r3, r7, #12
 80060e8:	6839      	ldr	r1, [r7, #0]
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7ff ffe1 	bl	80060b2 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 80060f0:	e009      	b.n	8006106 <f_puts+0x2c>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	1c5a      	adds	r2, r3, #1
 80060f6:	607a      	str	r2, [r7, #4]
 80060f8:	781a      	ldrb	r2, [r3, #0]
 80060fa:	f107 030c 	add.w	r3, r7, #12
 80060fe:	4611      	mov	r1, r2
 8006100:	4618      	mov	r0, r3
 8006102:	f7ff ff73 	bl	8005fec <putc_bfd>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1f1      	bne.n	80060f2 <f_puts+0x18>
	return putc_flush(&pb);
 800610e:	f107 030c 	add.w	r3, r7, #12
 8006112:	4618      	mov	r0, r3
 8006114:	f7ff ffa7 	bl	8006066 <putc_flush>
 8006118:	4603      	mov	r3, r0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3758      	adds	r7, #88	; 0x58
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
	...

08006124 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006124:	b480      	push	{r7}
 8006126:	b087      	sub	sp, #28
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	4613      	mov	r3, r2
 8006130:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006132:	2301      	movs	r3, #1
 8006134:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006136:	2300      	movs	r3, #0
 8006138:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800613a:	4b1e      	ldr	r3, [pc, #120]	; (80061b4 <FATFS_LinkDriverEx+0x90>)
 800613c:	7a5b      	ldrb	r3, [r3, #9]
 800613e:	b2db      	uxtb	r3, r3
 8006140:	2b00      	cmp	r3, #0
 8006142:	d131      	bne.n	80061a8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006144:	4b1b      	ldr	r3, [pc, #108]	; (80061b4 <FATFS_LinkDriverEx+0x90>)
 8006146:	7a5b      	ldrb	r3, [r3, #9]
 8006148:	b2db      	uxtb	r3, r3
 800614a:	461a      	mov	r2, r3
 800614c:	4b19      	ldr	r3, [pc, #100]	; (80061b4 <FATFS_LinkDriverEx+0x90>)
 800614e:	2100      	movs	r1, #0
 8006150:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006152:	4b18      	ldr	r3, [pc, #96]	; (80061b4 <FATFS_LinkDriverEx+0x90>)
 8006154:	7a5b      	ldrb	r3, [r3, #9]
 8006156:	b2db      	uxtb	r3, r3
 8006158:	4a16      	ldr	r2, [pc, #88]	; (80061b4 <FATFS_LinkDriverEx+0x90>)
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	4413      	add	r3, r2
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006162:	4b14      	ldr	r3, [pc, #80]	; (80061b4 <FATFS_LinkDriverEx+0x90>)
 8006164:	7a5b      	ldrb	r3, [r3, #9]
 8006166:	b2db      	uxtb	r3, r3
 8006168:	461a      	mov	r2, r3
 800616a:	4b12      	ldr	r3, [pc, #72]	; (80061b4 <FATFS_LinkDriverEx+0x90>)
 800616c:	4413      	add	r3, r2
 800616e:	79fa      	ldrb	r2, [r7, #7]
 8006170:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006172:	4b10      	ldr	r3, [pc, #64]	; (80061b4 <FATFS_LinkDriverEx+0x90>)
 8006174:	7a5b      	ldrb	r3, [r3, #9]
 8006176:	b2db      	uxtb	r3, r3
 8006178:	1c5a      	adds	r2, r3, #1
 800617a:	b2d1      	uxtb	r1, r2
 800617c:	4a0d      	ldr	r2, [pc, #52]	; (80061b4 <FATFS_LinkDriverEx+0x90>)
 800617e:	7251      	strb	r1, [r2, #9]
 8006180:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006182:	7dbb      	ldrb	r3, [r7, #22]
 8006184:	3330      	adds	r3, #48	; 0x30
 8006186:	b2da      	uxtb	r2, r3
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	3301      	adds	r3, #1
 8006190:	223a      	movs	r2, #58	; 0x3a
 8006192:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	3302      	adds	r3, #2
 8006198:	222f      	movs	r2, #47	; 0x2f
 800619a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	3303      	adds	r3, #3
 80061a0:	2200      	movs	r2, #0
 80061a2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80061a4:	2300      	movs	r3, #0
 80061a6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80061a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	371c      	adds	r7, #28
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bc80      	pop	{r7}
 80061b2:	4770      	bx	lr
 80061b4:	2000006c 	.word	0x2000006c

080061b8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80061c2:	2200      	movs	r2, #0
 80061c4:	6839      	ldr	r1, [r7, #0]
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f7ff ffac 	bl	8006124 <FATFS_LinkDriverEx>
 80061cc:	4603      	mov	r3, r0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3708      	adds	r7, #8
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
	...

080061d8 <__libc_init_array>:
 80061d8:	b570      	push	{r4, r5, r6, lr}
 80061da:	2500      	movs	r5, #0
 80061dc:	4e0c      	ldr	r6, [pc, #48]	; (8006210 <__libc_init_array+0x38>)
 80061de:	4c0d      	ldr	r4, [pc, #52]	; (8006214 <__libc_init_array+0x3c>)
 80061e0:	1ba4      	subs	r4, r4, r6
 80061e2:	10a4      	asrs	r4, r4, #2
 80061e4:	42a5      	cmp	r5, r4
 80061e6:	d109      	bne.n	80061fc <__libc_init_array+0x24>
 80061e8:	f000 f822 	bl	8006230 <_init>
 80061ec:	2500      	movs	r5, #0
 80061ee:	4e0a      	ldr	r6, [pc, #40]	; (8006218 <__libc_init_array+0x40>)
 80061f0:	4c0a      	ldr	r4, [pc, #40]	; (800621c <__libc_init_array+0x44>)
 80061f2:	1ba4      	subs	r4, r4, r6
 80061f4:	10a4      	asrs	r4, r4, #2
 80061f6:	42a5      	cmp	r5, r4
 80061f8:	d105      	bne.n	8006206 <__libc_init_array+0x2e>
 80061fa:	bd70      	pop	{r4, r5, r6, pc}
 80061fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006200:	4798      	blx	r3
 8006202:	3501      	adds	r5, #1
 8006204:	e7ee      	b.n	80061e4 <__libc_init_array+0xc>
 8006206:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800620a:	4798      	blx	r3
 800620c:	3501      	adds	r5, #1
 800620e:	e7f2      	b.n	80061f6 <__libc_init_array+0x1e>
 8006210:	08006398 	.word	0x08006398
 8006214:	08006398 	.word	0x08006398
 8006218:	08006398 	.word	0x08006398
 800621c:	0800639c 	.word	0x0800639c

08006220 <memset>:
 8006220:	4603      	mov	r3, r0
 8006222:	4402      	add	r2, r0
 8006224:	4293      	cmp	r3, r2
 8006226:	d100      	bne.n	800622a <memset+0xa>
 8006228:	4770      	bx	lr
 800622a:	f803 1b01 	strb.w	r1, [r3], #1
 800622e:	e7f9      	b.n	8006224 <memset+0x4>

08006230 <_init>:
 8006230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006232:	bf00      	nop
 8006234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006236:	bc08      	pop	{r3}
 8006238:	469e      	mov	lr, r3
 800623a:	4770      	bx	lr

0800623c <_fini>:
 800623c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800623e:	bf00      	nop
 8006240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006242:	bc08      	pop	{r3}
 8006244:	469e      	mov	lr, r3
 8006246:	4770      	bx	lr
